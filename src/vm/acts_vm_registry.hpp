#pragma once

namespace acts::vm::opcodes {
	enum OpCodeId : uint8_t {
		OPCODE_NOP = 0,
		OPCODE_EXPORT_NO_PARAMS = 0xd,
		OPCODE_END = 0x10,
		OPCODE_EXPORT_PARAMS = 0x11,
		OPCODE_GET_INT = 0x20,
		OPCODE_GET_FLOAT = 0x21,
		OPCODE_GET_HASH = 0x22,
		OPCODE_GET_UNDEFINED = 0x23,
		OPCODE_PRE_CALL = 0x24,

		OPCODE_JUMP = 0x23,
		OPCODE_DEV_BLOCK = 0x24,
		OPCODE_JUMP_IF_TRUE = 0x25,
		OPCODE_JUMP_IF_FALSE = 0x26,
		OPCODE_JUMP_IF_TRUE_EXPR = 0x27,
		OPCODE_JUMP_IF_FALSE_EXPR = 0x28,
		OPCODE_JUMP_IF_DEFINED = 0x29,

		OPCODE_IS_DEFINED = 0x30,
		OPCODE_DEC_TOP = 0x31,


		OPCODE_OP_PLUS = 0x50,
		OPCODE_OP_MINUS = 0x51,
		OPCODE_OP_NOT = 0x52,
		OPCODE_OP_MULTIPLY = 0x53,
		OPCODE_OP_DIVIDE = 0x54,
		OPCODE_OP_MODULUS = 0x55,
		OPCODE_OP_BIT_XOR = 0x56,
		OPCODE_OP_BIT_OR = 0x57,
		OPCODE_OP_BIT_AND = 0x58,
		OPCODE_OP_BIT_NOT = 0x59,
		OPCODE_OP_BIT_SHIFT_LEFT = 0x5a,
		OPCODE_OP_BIT_SHIFT_RIGHT = 0x5b,
		OPCODE_OP_LOWER_THAN = 0x5c,
		OPCODE_OP_GREATER_THAN = 0x5d,
		OPCODE_OP_LOWER_OR_EQUAL_THAN = 0x5e,
		OPCODE_OP_GREATER_OR_EQUAL_THAN = 0x5f,
		OPCODE_OP_LOWER_OR_SUPER_EQUAL_THAN = 0x60,
		OPCODE_OP_GREATER_OR_SUPER_EQUAL_THAN = 0x61,
		OPCODE_OP_EQUAL = 0x62,
		OPCODE_OP_NOT_EQUAL = 0x63,
		OPCODE_OP_SUPER_EQUAL = 0x64,
		OPCODE_OP_SUPER_NOT_EQUAL = 0x65,
	};
}