#include <includes.hpp>

#pragma region Encryption table
// off_59F5930
static INT32 encryptiontable[] = {
	0x24FCAAE, 0x2E543B3, 0x01C94DD, 0x51D15E4, 0x0FB831A, 0x1E16CA9, 0x285BE0A, 0x5910248, 0x22CDDE4,
	0x5C224AE, 0x0A9ADC0, 0x0B04EB8, 0x37AC36C, 0x5E6572A, 0x0486B19, 0x1049B4E, 0x4854CEA, 0x428329C,
	0x1C6D5BB, 0x287696E, 0x2A2FF6A, 0x34C2EC8, 0x1494A9C, 0x5423467, 0x242E23F, 0x0DC7519, 0x1BA84E2,
	0x00089E8, 0x53F3E36, 0x0139F8B, 0x4290529, 0x1416AD3, 0x5282D1A, 0x1AA92E0, 0x012B273, 0x0567ED0,
	0x2A8FCA8, 0x4BFF024, 0x2F86A5F, 0x481E0A1, 0x25CAC0C, 0x27C2E9C, 0x072382C, 0x47DAB8A, 0x1F01582,
	0x11ED5A0, 0x3980131, 0x0DE927F, 0x26DD7B9, 0x15BF6AE, 0x2CCAF4E, 0x03BE854, 0x1C95C5E, 0x0A02EC7,
	0x2DE8730, 0x2E80050, 0x3FAF5CC, 0x314D710, 0x14C670F, 0x2055940, 0x055565A, 0x54B23AE, 0x2B10306,
	0x4B0BCBB, 0x4163738, 0x5B4E93C, 0x4768B4F, 0x53AB7ED, 0x05C1E6C, 0x31382A3, 0x2130FD9, 0x054FEB1,
	0x2A181F0, 0x44AE23E, 0x2BB04F4, 0x51A8956, 0x547E031, 0x36DC06F, 0x04C6FA7, 0x4374E8B, 0x33FA267,
	0x17EBF80, 0x06BD4C4, 0x2D9C992, 0x5D33639, 0x1529B14, 0x5E98D84, 0x3632D65, 0x12DC204, 0x58E6490,
	0x0688E22, 0x3253B52, 0x1AED0FF, 0x10D5413, 0x2F8FD4D, 0x59EC6FC, 0x3ABECEC, 0x3DE206B, 0x23A0102,
	0x5D865F5, 0x2074C7A, 0x34B0997, 0x4EBDE18, 0x01ADCBE, 0x017FBC1, 0x0A8B5B9, 0x283F950, 0x41F50B5,
	0x2FF1515, 0x384CD93, 0x3E7A258, 0x4684054, 0x1D91A26, 0x25AAB26, 0x19EE2F1, 0x5052E94, 0x0AE4DE7,
	0x335142E, 0x56241B8, 0x1710AFC, 0x2B6AB9D, 0x2C1BF04, 0x1F6FABD, 0x3BE0FA9, 0x1EBE480, 0x241E913,
	0x5AF4850, 0x3235330, 0x21C4901, 0x349BA7B, 0x159EDE0, 0x32BB658, 0x1AB7573, 0x2FE58CF, 0x121E5CE,
	0x1F8129D, 0x0921A22, 0x0950E8A, 0x178603C, 0x3D9F256, 0x13809F3, 0x589FAFA, 0x2C193CF, 0x0EF853B,
	0x4B9868C, 0x484D855, 0x148A452, 0x0D1388C, 0x14F3567, 0x2E97654, 0x1CF730E, 0x40F358A, 0x28C86D1,
	0x16CCA1C, 0x40A639A, 0x543928B, 0x4E71CC1, 0x1CCADFF, 0x2D8D48A, 0x45AC398, 0x09AFDDF, 0x0A5EF7B,
	0x3B7F2AE, 0x036E2AF, 0x04AB0DD, 0x2990FCD, 0x18C3569, 0x31DD4D2, 0x336A14A, 0x058D471, 0x47555D6,
	0x156B98C, 0x39DE656, 0x1E747AE, 0x3855AE8, 0x5BE93E3, 0x3AEFDA6, 0x304034B, 0x4AB93D3, 0x02F351A,
	0x090BE42, 0x49CD195, 0x461CEBC, 0x14AF555, 0x154BE99, 0x4F43602, 0x5C716EC, 0x5D84C73, 0x04DFE46,
	0x3219F01, 0x2AD5EB0, 0x5BDCE73, 0x106218B, 0x0172642, 0x2E72DF6, 0x4971C50, 0x492B2C1, 0x4ED6643,
	0x2597E66, 0x142D601, 0x157E2A6, 0x40A5B1F, 0x459F64D, 0x2487C59, 0x237A513, 0x16802AA, 0x5260BA6,
	0x18E98A3, 0x50B31DD, 0x5D793FC, 0x0598AA0, 0x3AF13C3, 0x31A06F5, 0x28B1268, 0x48FF374, 0x158FDC0,
	0x2EA61E2, 0x1127CA2, 0x168BC1C, 0x52113CB, 0x1D5CAA7, 0x5EADAFA, 0x42CEBC2, 0x412A258, 0x086EC74,
	0x497AECA, 0x506CE04, 0x011398C, 0x58334E3, 0x568E3CE, 0x5AB7E89, 0x31209D6, 0x14D127A, 0x1A0E46E,
	0x56E872A, 0x3CA2CB8, 0x21EA7B1, 0x372D3E7, 0x5E01B5B, 0x32FC24F, 0x4B96D8B, 0x2611EEA, 0x461EB76,
	0x4979DE4, 0x571468A, 0x2C171EC, 0x3531F1D, 0x12DDAEE, 0x0523E8F, 0x1ECBCCE, 0x1B51864, 0x5A36540,
	0x133534B, 0x3467777, 0x40DD017, 0x1824869, 0x48C9D20, 0x36539A5, 0x3C68A72, 0x55C4295, 0x57975E0,
	0x15B0919, 0x474CF1D, 0x474EF15, 0x02B612C, 0x2EEC3FA, 0x27CD17F, 0x1DC6461, 0x037CD33, 0x3518FA9,
	0x0107061, 0x453B8A5, 0x461757D, 0x545AD82, 0x0EB436A, 0x24B3129, 0x0442440, 0x041D22F, 0x48480FA,
	0x4751AD1, 0x4FA4F28, 0x26BD287, 0x35E41C8, 0x1CAD485, 0x1D0CFA1, 0x101A020, 0x509F531, 0x2329C75,
	0x1AFB07A, 0x34217A6, 0x15BFB0C, 0x564BB03, 0x4F29C5E, 0x0FB0277, 0x5223186, 0x22407A5, 0x1CEE7CA,
	0x11CA27D, 0x22C7C41, 0x0D44D1D, 0x12E9B3E, 0x2FDB9B5, 0x537BC48, 0x56FEAC8, 0x3E0EF62, 0x2864C8C,
	0x13FAC0B, 0x1707B86, 0x44BEA16, 0x578EC4F, 0x27217EF, 0x2B8ACC0, 0x54635ED, 0x3F742A9, 0x051D525,
	0x4BDBAF7, 0x198FAC4, 0x2292BA3, 0x1EE57C0, 0x44CF159, 0x16F4A8B, 0x0A4E9A0, 0x0CE76DD, 0x409480B,
	0x11353B6, 0x2787BE6, 0x5824ACA, 0x30DBFE9, 0x0036886, 0x443C752, 0x0023C76, 0x30F29DD, 0x24ECD12,
	0x3E3E1F9, 0x45FFB50, 0x3ACED97, 0x04B5BB4, 0x5DD1E0A, 0x362FD4F, 0x2F87354, 0x14327FA, 0x563D944,
	0x5EDD077, 0x1271C10, 0x2D35C80, 0x3B7CBEC, 0x038DF7D, 0x40823D2, 0x351A8DE, 0x3C16548, 0x456488E,
	0x5439A9E, 0x339DBBC, 0x3B54EFB, 0x54F445E, 0x51051F5, 0x37C2712, 0x5C958E8, 0x3C16E96, 0x59D1960,
	0x1C4A895, 0x1706CEB, 0x06F197E, 0x4C43CFE, 0x46B1E3C, 0x1136615, 0x11D11E4, 0x37E0CD8, 0x5672AB4,
	0x1BD762D, 0x1E334EE, 0x461B39A, 0x0208EB4, 0x5745E76, 0x5A5CF8A, 0x198196B, 0x3B95FB9, 0x168406C,
	0x4EB5D43, 0x0BC584D, 0x56AFB18, 0x036AA3D, 0x3328DB3, 0x09891B1, 0x05EC2BD, 0x47216CA, 0x4B4CA45,
	0x5E37B2D, 0x414C582, 0x0A7C106, 0x158CFA0, 0x24EC0F3, 0x0B6F4B1, 0x35227C7, 0x27336E2, 0x3F28321,
	0x0C4155A, 0x34ED321, 0x5B22437, 0x3961F0C, 0x042FB9D, 0x41D4BD6, 0x47EB68F, 0x1F8B603, 0x4AC99D2,
	0x5E3076A, 0x111C712, 0x26034A8, 0x590502A, 0x53914CA, 0x1651296, 0x2E271C2, 0x0C323C5, 0x0C84B80,
	0x1A1BC46, 0x2512581, 0x501090C, 0x3628901, 0x207D755, 0x5629C10, 0x5A5D762, 0x549E62E, 0x195ECF6,
	0x1CAA042, 0x3A564E4, 0x0797D48, 0x5542E88, 0x5536D96, 0x3E0D5D7, 0x41AC0D5, 0x5A2C768, 0x0779C5E,
	0x5DAED43, 0x0CC5102, 0x53BF90A, 0x1ED1708, 0x44F5B47, 0x55AE782, 0x061EE31, 0x170E077, 0x560DB0D,
	0x466B459, 0x54D178B, 0x5DB380E, 0x0DF46B0, 0x30DD6DC, 0x1255BFA, 0x2A9893E, 0x5A65818, 0x46D76DD,
	0x336C8A7, 0x2382CEF, 0x1A81725, 0x219E620, 0x06462F5, 0x2C60639, 0x42025FD, 0x375F559, 0x4387DA7,
	0x5633D91, 0x047DE78, 0x02DCA66, 0x3A80AE4, 0x58285FC, 0x531287A, 0x19DCFAF, 0x36BAA63, 0x02C7F06,
	0x17E82AF, 0x4C5C5AA, 0x2276F70, 0x189BF30, 0x313B370, 0x3D8D2C1, 0x09396B5, 0x5A0B9F3, 0x4154230,
	0x0AD1A99, 0x5A52386, 0x3AAD507, 0x2C3D343, 0x5F2616C, 0x0DCEB81, 0x1C07B25, 0x0607BDA, 0x0E1C867,
	0x4D47834, 0x26A573B, 0x3B88356, 0x0FBAC6D, 0x1A90545, 0x1DD2CC1, 0x5D26034, 0x3F40110, 0x5C9C5E8,
	0x08B7537, 0x2CD43E3, 0x3A27A2D, 0x34144AC, 0x2C11BCF, 0x3724928, 0x0B3B053, 0x22E88E9, 0x1567D7D,
	0x4A1BF77, 0x30C1D62, 0x16B503E, 0x2E12B5A, 0x295F283, 0x2F87A55, 0x00F5203, 0x24A5D47, 0x0F4E42A,
	0x5C642FC, 0x133E099, 0x4DAB872, 0x4170FE4, 0x5F5B77E, 0x4F19441, 0x36B4187, 0x4EC53F1, 0x1EB55FD,
	0x0F5680D, 0x35365A1, 0x04EF362, 0x5EB5E4F, 0x3C9AB1A, 0x48ED0B5, 0x200F765, 0x1EE049E, 0x32D0C0D,
	0x42D554D, 0x5B75A4B, 0x0100910, 0x154D613, 0x0233723, 0x4403AC1, 0x15EABCB, 0x36B9B95, 0x4B19887,
	0x04D4959, 0x07C8B0D, 0x18942B8, 0x5B3A520, 0x5235658, 0x029DDE7, 0x494CB54, 0x1552671, 0x2F5795F,
	0x26C0EAA, 0x079DA0F, 0x3A148A7, 0x4D38230, 0x1328B8D, 0x57E5896, 0x1552087, 0x333EC3F, 0x162655F,
	0x148330C, 0x28B9DD6, 0x15A28CF, 0x12D7393, 0x40F050F, 0x0FE6EB9, 0x1B98D86, 0x39A609A, 0x0437BBF,
	0x310FE9F, 0x1756B9A, 0x1061764, 0x3F7CDFD, 0x2CEDA5C, 0x2B2DB4B, 0x38398E4, 0x52DDE74, 0x4D5DDCA,
	0x57383E6, 0x0FD2595, 0x108205E, 0x0DE3AA2, 0x38FBFF3, 0x50BFAB3, 0x24D4B54, 0x391DACC, 0x149BD58,
	0x2558C59, 0x3A29F8C, 0x2D9508C, 0x2B45DB2, 0x4AD42FF, 0x0C1BD31, 0x0BAC196, 0x498DC75, 0x5D8D38C,
	0x2F9DFF4, 0x4A8E4FC, 0x2085D60, 0x00392CE, 0x02D94BE, 0x498D374, 0x279A0B3, 0x5B56A58, 0x03E86BD,
	0x0F4E277, 0x108A2A4, 0x0B14CA8, 0x469467D, 0x0ACACD6, 0x183A178, 0x0F031D3, 0x1432D18, 0x50E1A04,
	0x064071E, 0x52CB04D, 0x38B9605, 0x3D9C6F9, 0x33A9138, 0x4FFE2DE, 0x1660324, 0x2E357D0, 0x21AB903,
	0x428D708, 0x0F74ED3, 0x044D014, 0x167E13D, 0x23DF609, 0x4649677, 0x3C6E540, 0x3140DDD, 0x5D3D485,
	0x4AB2EB7, 0x05A4335, 0x1029949, 0x1227702, 0x0EEEF95, 0x56B228A, 0x46C29E5, 0x3687563, 0x36D124C,
	0x5E7FD82, 0x0FC7B25, 0x06ED015, 0x2DC0360, 0x14EDBA7, 0x4875827, 0x429CCFF, 0x4135E02, 0x55ECBEF,
	0x0E3EB1D, 0x11D8B75, 0x486A7F2, 0x33B37F9, 0x29F7F7D, 0x0E2CD37, 0x1270CFC, 0x1699B3A, 0x1B17758,
	0x3DC1F00, 0x3AC6FD7, 0x141165F, 0x53A3024, 0x4294FB9, 0x505EC95, 0x224A445, 0x56A6A39, 0x57E823B,
	0x199A1C2, 0x1A2B4C1, 0x5819937, 0x1CF2E26, 0x281E1CA, 0x2FD30AE, 0x323B872, 0x1499638, 0x5E14166,
	0x05048CF, 0x3299FB8, 0x048C449, 0x48642C4, 0x3FCF2B2, 0x5844EFE, 0x3C51553, 0x088347F, 0x096CD29,
	0x3FCC4C9, 0x4DA9532, 0x44E6044, 0x37B74EF, 0x504641C, 0x4D1B0DA, 0x4A0ECBC, 0x3DB6018, 0x24D92FC,
	0x26000EE, 0x02FF079, 0x44711FC, 0x1F52C1A, 0x15EB855, 0x558B2E2, 0x052FF5A, 0x39A6991, 0x5531E4C,
	0x3A3B82C, 0x0145198, 0x1DADB24, 0x0B31E74, 0x29A789B, 0x29F04F6, 0x4DC985C, 0x0EF2478, 0x28EB497,
	0x1AEC588, 0x4927AEA, 0x0AE1166, 0x0CCD449, 0x005C892, 0x120CA41, 0x0F280C8, 0x2E70480, 0x55CE9F8,
	0x236EB13, 0x31A3CBE, 0x3D4F5B9, 0x0C37796, 0x447731C, 0x4AE23F2, 0x2418813, 0x39EA2AB, 0x3051CCF,
	0x053A7AC, 0x40E2DA1, 0x3CA13D5, 0x50B189E, 0x2C774BC, 0x209C8D7, 0x2B0F104, 0x0D20400, 0x25E3BDE,
	0x4D345E2, 0x18BF484, 0x1CA8482, 0x28858F9, 0x1F5B2E3, 0x4ACFF22, 0x20A29ED, 0x1F8CCAE, 0x3499341,
	0x4B65B2D, 0x3931A4F, 0x4BA6E71, 0x596DDE4, 0x2536DA0, 0x174F303, 0x2ABCF81, 0x166FDA4, 0x48FBF50,
	0x128C9C7, 0x22ABDCC, 0x111DFE3, 0x04B016E, 0x264DCFB, 0x4847AA6, 0x04D1CB2, 0x47BA18E, 0x3EDD828,
	0x593CCAC, 0x1D2A0DA, 0x4551A7D, 0x5A2787D, 0x2048CB9, 0x31C3B7F, 0x4AE7F60, 0x3F4D953, 0x39D3A22,
	0x5F0EA4E, 0x4D3908B, 0x32FA330, 0x1259424, 0x39F75DE, 0x4BE8457, 0x40F4C03, 0x303B345, 0x5B140FF,
	0x1BF2805, 0x0D017BA, 0x3CFAAD1, 0x08E524A, 0x23F7199, 0x1E75C60, 0x14F0630, 0x1C47E1F, 0x3E72B7E,
	0x1897CAB, 0x3D141FF, 0x2E17CEC, 0x1D3F63C, 0x289560F, 0x2FA8C54, 0x288414C, 0x2B17882, 0x469F0B3,
	0x49BB523, 0x362455F, 0x1DB75ED, 0x1A50666, 0x4528A23, 0x0046B14, 0x0DCF858, 0x1262F92, 0x32FC202,
	0x30A65C4, 0x234CC21, 0x310237D, 0x094E465, 0x06162CB, 0x028C746, 0x118AF7B, 0x4D14D8B, 0x4EE7767,
	0x00D31FE, 0x0B3EDEE, 0x52572FC, 0x5D28D7F, 0x1DB9DD7, 0x343EA82, 0x3798690, 0x14E4480, 0x129D84F,
	0x0177D68, 0x19E7658, 0x2D06FFF, 0x22CC5E8, 0x2A1EFA9, 0x09A9FF6, 0x1631223, 0x3A3B8B8, 0x13866EB,
	0x1AC142A, 0x1161687, 0x25B514C, 0x020BDEC, 0x09434E6, 0x0F09C43, 0x34EAD99, 0x1F4DB75, 0x095DD63,
	0x4928BA1, 0x4B3519C, 0x543EA4A, 0x59BD982, 0x124A298, 0x1E99AB8, 0x29A364A, 0x2D586B7, 0x069BE90,
	0x1A2E8C3, 0x5B86E70, 0x02591F7, 0x472E228, 0x3586E4A, 0x17AD76B, 0x240952D, 0x4BFECA8, 0x3117CD1,
	0x00E59B4, 0x060A041, 0x4FF2B79, 0x43C700F, 0x2B466F7, 0x46B1A69, 0x4D3E38E, 0x06B92E2, 0x1F9EB7E,
	0x18C0C61, 0x07FCF48, 0x1A99446, 0x5CA0D24, 0x06C707C, 0x3D95DCC, 0x10D7BAD, 0x579D99C, 0x1879A7A,
	0x2B36BB8, 0x1CCA749, 0x2F48117, 0x3AA03E0, 0x57B5188, 0x3066A8F, 0x0CCEFCF, 0x54424FD, 0x441E74C,
	0x56632C8, 0x507E5B8, 0x3408AF1, 0x035A238, 0x4F1C327, 0x56B7C8A, 0x36E3F61, 0x20E3811, 0x194F58C,
	0x3FF64B7, 0x0CE5A53, 0x5418ED7, 0x3902DA8, 0x39546A1, 0x084884E, 0x59AF77D, 0x4A8A9A6, 0x37C3C37,
	0x295F546, 0x2438394, 0x4487EC3, 0x533C741, 0x2197E1F, 0x253D854, 0x30EC754, 0x15EF107, 0x06C36F1,
	0x2B2DEB0, 0x56BDE8C, 0x515F8EF, 0x45BB2F8, 0x1122D13, 0x4D7F2DB, 0x0EC78DF, 0x0F778E9, 0x1DCB503,
	0x35C989F, 0x591FFD8, 0x1DF1148, 0x254B9C6, 0x56A8D52, 0x5C34588, 0x4FF26EC, 0x35F2512, 0x23CBDAF,
	0x2E1100A, 0x3F80F6B, 0x22A7C3A, 0x25FB31A, 0x442C47A, 0x06BDCBE, 0x3B397BD, 0x36E78A2, 0x2C174D5,
	0x442424D, 0x094DB22, 0x1E7416F, 0x569F1BA, 0x0EFA0A9, 0x39055B4, 0x5D6558B, 0x0BEB73E, 0x19E5314,
	0x05416F9, 0x02F1F5B, 0x10CC24B, 0x4280AD1, 0x3A9C99E, 0x2988B74, 0x2623B63, 0x0331A78, 0x2F1BB9C,
	0x4747041, 0x50C76FF, 0x24975A4, 0x4B59D02, 0x480B7B5, 0x0206B0A, 0x170A6B9, 0x334A909, 0x313444C,
	0x2092119, 0x332FE0E, 0x22EC18D, 0x5C955A1, 0x456A783, 0x5BABCA7, 0x48E3682, 0x4E3EBBD, 0x541C165,
	0x20E07CD, 0x34A1DF1, 0x07EEC0B, 0x49D8E00, 0x0F4E693, 0x3638F7A, 0x4137F6C, 0x3CAC327, 0x574B2A6,
	0x58482E8, 0x16E8CAF, 0x1ACFA3E, 0x3EBDB4E, 0x22C949F, 0x39A1A28, 0x2A8A2C4, 0x4D7CF0D, 0x0A8D37A,
	0x0CC1AE4, 0x4285EB9, 0x18402B0, 0x44D3EC9, 0x00D53E6, 0x5DDDCE4, 0x141223F, 0x5EDB1DE, 0x103F3FE,
	0x2AE8E5F, 0x42E6C0F, 0x2392FBF, 0x1B6DAE2, 0x036C220, 0x56495FD, 0x45FE487, 0x0A22F22, 0x5854C0D,
	0x06F3AE7, 0x56951F7, 0x0BD9B13, 0x2828A66, 0x5344B04, 0x0DF274E, 0x061DE13, 0x48EF80E, 0x532ACD8,
	0x3AE7319, 0x497036E, 0x451EB58, 0x355C721, 0x4BBE714, 0x3281574, 0x2F8AC50, 0x26C9ADB, 0x38B5C3D,
	0x1AF203A, 0x5DCE0A5, 0x5D6CAE4, 0x4CB9EFC, 0x5F3A160, 0x0E96B81, 0x3CD7707, 0x078CAF4, 0x0801227,
	0x2D58ECB, 0x539B90E, 0x03F8D82, 0x51FA18E, 0x10BA0B2, 0x3A8CE60, 0x4914111, 0x096D434, 0x52DDE72,
	0x09497E2, 0x4D65CA7, 0x13547B1, 0x2F21C6B, 0x4E2C84F, 0x44F0944, 0x27FD56A, 0x163C098, 0x007A5B6,
	0x33BF069, 0x5D2E8EE, 0x179B843, 0x30DAED8, 0x3BCC025, 0x43578A9, 0x45F0797, 0x46B025B, 0x5AAC2C2,
	0x0F48EF9, 0x5C6E025, 0x000F273, 0x2227238, 0x4396410, 0x084043C, 0x50E6E36, 0x570C962, 0x305B955,
	0x5CCA53A, 0x1C12916, 0x5D0BE8B, 0x42E8E09, 0x3644715, 0x4CDE24F, 0x4AA0FE4, 0x5D1A259, 0x31E914D,
	0x18DE604, 0x167BC50, 0x1F36CE5, 0x4F30AB0, 0x09C0191, 0x505DD80, 0x1BE0A0D, 0x03629B4, 0x089F5EE,
	0x292DE3A, 0x1C9AB27, 0x37AE08E, 0x3A55F76, 0x4A55258, 0x2126501, 0x16AC623, 0x534E552, 0x0D85FD3,
	0x397F9B1, 0x188E822, 0x3AF0A85, 0x2B399F0, 0x199A789, 0x25E3BC1, 0x18BF200, 0x5BB1FD7, 0x3DD2D48,
	0x47725F5, 0x0BC2D7B, 0x36A214C, 0x28791C4, 0x459F17D, 0x0A5C969, 0x3EE5EB4, 0x52FBD61, 0x1C398F6,
	0x5BF3A17, 0x16E47D5, 0x1742CB0, 0x4CF2CCD, 0x59D5D57, 0x56A6CEB, 0x091CB92, 0x35597C5, 0x0CFD8B2,
	0x4DA013E, 0x5742CD5, 0x14A1408, 0x1AAEF8C, 0x1426D5A, 0x512A00A, 0x1B82E78, 0x3F7A5DA, 0x5B29733,
	0x31A2C7E, 0x5E55519, 0x2676659, 0x3B0A418, 0x39CE0E6, 0x425BFA3, 0x2D8B346, 0x316AFA8, 0x5A5705E,
	0x4999511, 0x082A51D, 0x0E85D77, 0x10F4E3E, 0x3824AB4, 0x3CC5E7C, 0x077611F, 0x110C659, 0x47DE8B6,
	0x5B3D84E, 0x192539C, 0x071F030, 0x0959FA0, 0x3890643, 0x30B9AFF, 0x3D27418, 0x044A4A6, 0x43F444E,
	0x0D350A5, 0x599893C, 0x363ADAB, 0x58D82DC, 0x0F3AC48, 0x15FB160, 0x37801BC, 0x374F87E, 0x59AF676,
	0x3D1D946, 0x24F7795, 0x4345C50, 0x2A4688D, 0x53B9880, 0x0AC552F, 0x3C266A4, 0x0251AB4, 0x48E624C,
	0x3BDB74E, 0x22D1B42, 0x591F830, 0x2166E0A, 0x450A8EC, 0x15A17B2, 0x4128196, 0x31E2406, 0x023EF50,
	0x4B13A8D, 0x5C8AA87, 0x1E42528, 0x29AB54F, 0x5360187, 0x0CC434B, 0x1EFC34D, 0x432E979, 0x1DEE277,
	0x13863A3, 0x1371118, 0x0301756, 0x3DE0B82, 0x44071A4, 0x4C743C6, 0x28B168C, 0x5291702, 0x01BB384,
	0x5833C51, 0x3DC82E0, 0x41E1392, 0x3179E4E, 0x5B7B54A, 0x4AD938C, 0x1F2EF41, 0x191D83B, 0x2453D49,
	0x48C54E8, 0x2E8B580, 0x5BB5E4A, 0x4409F6C, 0x3F33167, 0x127FC07, 0x45F58B3, 0x29B5D6C, 0x353AB7E,
	0x44E97AE, 0x30FCD6A, 0x5EBE392, 0x20046B9, 0x3E42C12, 0x461F353, 0x342C05A, 0x354780B, 0x347A827,
	0x536BEB4, 0x00FDA6E, 0x44CBE9C, 0x4C2192C, 0x32AF8C7, 0x2F865AF, 0x20DDB56, 0x5934876, 0x4D1E6BF,
	0x33AFB2E, 0x4DE038B, 0x04EDB5B, 0x30AEE67, 0x4937621, 0x38A29ED, 0x3ADE515, 0x453BA2A, 0x2B897C0,
	0x4F80B2E, 0x5691002, 0x3BA3D96, 0x3120FA9, 0x18D1155, 0x1C76BE0, 0x22F0B55, 0x4C7CF18, 0x25C6566,
	0x18357DA, 0x586DB93, 0x01C065F, 0x1492CA2, 0x5A47545, 0x04347DC, 0x16907BD, 0x3EE3FC5, 0x377DC3D,
	0x23E80AD, 0x1DA64CB, 0x3CF779A, 0x5A6D36B, 0x2B86A44, 0x3836D21, 0x254F886, 0x49233EF, 0x3483533,
	0x166E0B3, 0x2F9B5C3, 0x3827779, 0x2ADDF25, 0x5D2FD30, 0x483357C, 0x498E088, 0x3B96AA0, 0x2083C4C,
	0x5D8A17E, 0x255F200, 0x336DC70, 0x1C9E780, 0x5DEB3FE, 0x4676EDD, 0x47FB624, 0x2C178CF, 0x5280492,
	0x1977E63, 0x4ED81AF, 0x21745E8, 0x515790D, 0x1FD1626, 0x57BF860, 0x194D2E2, 0x4B9EE87, 0x4E58437,
	0x450B4E2, 0x203E9EE, 0x18056AA, 0x20FF146, 0x2739770, 0x5621411, 0x0A6907B, 0x4FA465A, 0x012D953,
	0x14124D6, 0x09CAC9A, 0x24A1A96, 0x2972483, 0x5945C34, 0x5D72E64, 0x0C833F0, 0x4E43F82, 0x492900D,
	0x2D6A496, 0x1012350, 0x465A43E, 0x40F209C, 0x0092313, 0x41A5DCF, 0x229AF22, 0x2536509, 0x14C3E06,
	0x5EBC9D8, 0x4A2476A, 0x0D04601, 0x1B7FEF5, 0x4CBEFA1, 0x3B41D9F, 0x367F3BA, 0x26DDC92, 0x391C0AC,
	0x1D57647, 0x36B41B9, 0x4903ABE, 0x3AD027F, 0x495DD7A, 0x1FA9134, 0x302E0B0, 0x50585BE, 0x2465228,
	0x284C872, 0x2931333, 0x0882CA8, 0x3ED7968, 0x50410ED, 0x156FB14, 0x0E7AF97, 0x58D51A1, 0x572B7C0,
	0x212ADBD, 0x4D4337E, 0x3AA2F3E, 0x5F209CD, 0x4D93B51, 0x0E85885, 0x09BAF45, 0x0F8EF4D, 0x4101754,
	0x3E94118, 0x362B5DB, 0x1B484E5, 0x1873B5C, 0x5D36D14, 0x0ABB00A, 0x4A97F60, 0x3B08D67, 0x283AE89,
	0x01031A8, 0x0DF785B, 0x4D34F40, 0x3C6250E, 0x0DC903F, 0x41BC2BE, 0x3E2A4DA, 0x3482DBE, 0x294DD71,
	0x3372D80, 0x4D58830, 0x11E789A, 0x53A420D, 0x0DAB0A2, 0x28B7071, 0x477CCAA, 0x0520E65, 0x3896340,
	0x3DA1E2D, 0x5CD84CA, 0x1A5C729, 0x3D54297, 0x3981024, 0x1CCC0FE, 0x17DB3F3, 0x2A2C949, 0x5B3AE4E,
	0x0597ED2, 0x5C30054, 0x4C4FCC3, 0x5290332, 0x0B22AB2, 0x5210B5F, 0x41EECB1, 0x48E67B5, 0x1603510,
	0x01300C2, 0x17C0E3F, 0x32F6065, 0x0734F7A, 0x2623142, 0x0594DFD, 0x3F2E2A6, 0x0613139, 0x01D8B51,
	0x327B299, 0x5E645B8, 0x2940734, 0x3B93FA1, 0x25678CE, 0x310F981, 0x3DEB76F, 0x23B237F, 0x08D363C,
	0x0EF6AC2, 0x3B38F34, 0x13B0279, 0x3E8451B, 0x0D8B42E, 0x4C338C2, 0x193BCA5, 0x02827A4, 0x1EDC164,
	0x501EE85, 0x4DC3ABF, 0x0E82132, 0x2FE2FD6, 0x25C3C2D, 0x1E1522B, 0x459115B, 0x2C959CA, 0x53F6177,
	0x2F5A617, 0x026C54A, 0x252D843, 0x0491994, 0x3CD029E, 0x24D24BD, 0x291B14C, 0x5827398, 0x44C9120,
	0x3A5E23A, 0x4C818E2, 0x107E584, 0x07E3897, 0x3116DFB, 0x4B71650, 0x14F461C, 0x125B669, 0x50CC493,
	0x4432AB4, 0x410FFA7, 0x347ABCF, 0x3075B74, 0x4E535B3, 0x18592C5, 0x115ACE8, 0x46E8476, 0x36BA336,
	0x01E9144, 0x4B98469, 0x4248427, 0x5A967C9, 0x3CE4588, 0x06D6FA0, 0x5E6A5AA, 0x2C57D1F, 0x5C749F5,
	0x0A9BC58, 0x38DA02E, 0x35F55A1, 0x206B0D1, 0x2B0F7FD, 0x46053C6, 0x09BC016, 0x522B732, 0x243824B,
	0x0AA1DA4, 0x3E90D20, 0x3548BBC, 0x4F8D9F5, 0x5012565, 0x25FA017, 0x105E675, 0x346B7C7, 0x381C107,
	0x3D9D788, 0x07AB17F, 0x4266031, 0x059B2EE, 0x0398F3D, 0x49C19DD, 0x5A9DB63, 0x26F1399, 0x4617302,
	0x5F07F59, 0x435AF73, 0x06EFE68, 0x371A67E, 0x483178F, 0x03C4C17, 0x3E00B22, 0x3D4F8A6, 0x1C338F6,
	0x1366CA2, 0x238375B, 0x445D47A, 0x15C3C54, 0x13CA6A1, 0x3A005B4, 0x58D514F, 0x59E2184, 0x5F3746C,
	0x583244A, 0x061089E, 0x3677322, 0x421C647, 0x1D7EAA6, 0x5389668, 0x2390351, 0x3759CC8, 0x1C97C6D,
	0x502D74E, 0x4DC4DC1, 0x4C384A6, 0x11DF3BA, 0x5137305, 0x300E926, 0x17978AB, 0x211FDE8, 0x4DE4779,
	0x3128231, 0x0410A8F, 0x40C3CB0, 0x486CC8F, 0x4303D3B, 0x2E25C4C, 0x0B31905, 0x29E5BAB, 0x083AFE5,
	0x4C2E563, 0x06966DC, 0x289AD6E, 0x1B464A1, 0x0B16FAB, 0x5C00443, 0x0A310F8, 0x416B52D, 0x2A1344A,
	0x034DBF5, 0x3669DBC, 0x3E285CD, 0x26CD490, 0x2EB2E58, 0x03A1B48, 0x5E5D476, 0x530EB65, 0x4DB1DA3,
	0x41D14BF, 0x329351D, 0x4EE43C1, 0x18D3811, 0x48C92C8, 0x24D63CB, 0x5EC1121, 0x37B8BC5, 0x2CA13AD,
	0x1B478C4, 0x1EBD5B7, 0x1AD6866, 0x4069E4E, 0x0788D05, 0x3630080, 0x45B3A93, 0x3D93BC6, 0x54049B7,
	0x0FC2FC5, 0x0D50F36, 0x1AD6F6B, 0x2ED8390, 0x0CC58B0, 0x0DD98DC, 0x54D3485, 0x0F867C9, 0x0154DD4,
	0x3E5473F, 0x283ED9D, 0x4F8C08A, 0x3CA2655, 0x3BF8422, 0x404DE9A, 0x092BAF0, 0x116AD73, 0x03A9F39,
	0x3BB501D, 0x32ECE0A, 0x3C1BAA2, 0x493F720, 0x28D2E50, 0x07B6DF9, 0x2B366E3, 0x1581605, 0x39F857B,
	0x4305A28, 0x5AB1BBB, 0x547975F, 0x31AD075, 0x17ADF67, 0x364C38F, 0x03D109C, 0x0420851, 0x19C7D3A,
	0x48BBADA, 0x435C74F, 0x4BEA449, 0x000FBAC, 0x11C4352, 0x57B5DE6, 0x554D6E5, 0x3C8CD8C, 0x5E8B726,
	0x2281C25, 0x48B3AA7, 0x0D0777A, 0x3F1017F, 0x2077933, 0x2E3373C, 0x592CB24, 0x53E01FC, 0x1505A2D,
	0x1D049B3, 0x411B1D8, 0x23A9ABC, 0x1752CE2, 0x4A9B459, 0x40B186D, 0x0B6DBCD, 0x26A799A, 0x109EA84,
	0x5B167AD, 0x1562C3F, 0x5D2BDBE, 0x4013FEA, 0x3C030A3, 0x09FA63E, 0x591B459, 0x549B0BA, 0x1891120,
	0x1A65D32, 0x27217F8, 0x0C1A1D5, 0x5AE573B, 0x543FC78, 0x56317B3, 0x37F5F32, 0x4DE5A24, 0x2D5E7F4,
	0x52FEAA7, 0x5F38D70, 0x0594E89, 0x4ABF149, 0x00DFD6D, 0x2BA88C1, 0x5080EAD, 0x2B3748F, 0x2D82B37,
	0x203C93A, 0x39D5549, 0x29548DC, 0x5C7F591, 0x1E42566, 0x25761CE, 0x42D8A9E, 0x2ECE6FD, 0x5B5E634,
	0x15AC11B, 0x4AB16BF, 0x0C1CBE5, 0x01644E3, 0x16B9909, 0x2C35EC9, 0x47540DF, 0x024E8F1, 0x588109D,
	0x4F28142, 0x4C73957, 0x27B484C, 0x01136C5, 0x5029292, 0x59D7A4E, 0x5467CA4, 0x4F48D1E, 0x31E399B,
	0x0CC2D31, 0x1E36EB5, 0x39471A4, 0x48B27A3, 0x0118EF9, 0x4DA2AB0, 0x5E7D6CB, 0x07C8527, 0x39B0185,
	0x230B1CF, 0x49C4BC4, 0x2909827, 0x06CBAF0, 0x47594AB, 0x43209A0, 0x2B58003, 0x5DE903D, 0x2D11065,
	0x43008BF, 0x0F06866, 0x0E01BA3, 0x0EEB596, 0x5E7C50C, 0x32ED9A8, 0x5099598, 0x20EC806, 0x0906748,
	0x2577E46, 0x2E0FD46, 0x51A2A65, 0x3465C97, 0x219E2D1, 0x1940E22, 0x04AB4EE, 0x262C35D, 0x33E8CBA,
	0x39B4F07, 0x48F4F29, 0x50CF7B7, 0x502C9D2, 0x348B955, 0x341EF92, 0x15909E2, 0x1D30314, 0x0058CEA,
	0x29E38E2, 0x14B6015, 0x1A12B45, 0x02082AB, 0x337FF20, 0x192CD07, 0x1AF810E, 0x494E8D7, 0x3D2BC0B,
	0x01B8461, 0x2CDFECF, 0x57DEE2C, 0x1E3D48D, 0x56B5C05, 0x1B4EA0A, 0x0E610DA, 0x00B0ABA, 0x1DD2A52,
	0x11C5EC3, 0x408017B, 0x57C5B51, 0x37B1673, 0x299D501, 0x2D063A8, 0x0627146, 0x5BD0163, 0x5328452,
	0x0095179, 0x1139DAC, 0x2D54406, 0x1FD70A3, 0x44F4FE1, 0x07025E9, 0x1B08763, 0x3F20C11, 0x2491F83,
	0x2448B6F, 0x15E9E18, 0x3FF5170, 0x3E0C821, 0x58BD5AA, 0x2D55CE8, 0x3C188A6, 0x51F0E5C, 0x434A855,
	0x1E5EC1E, 0x5E6C550, 0x37F708B, 0x5590863, 0x152706A, 0x0777A22, 0x5B41D5B, 0x4FB6FE2, 0x545DC80,
	0x3442E65, 0x46F25B8, 0x2E2326F, 0x454E5E0, 0x41C9FEF, 0x2770713, 0x1C3A22F, 0x1874A2D, 0x182157B,
	0x585862B, 0x3763AD9, 0x528DFFF, 0x4260B1B, 0x4DFBB15, 0x45D28C2, 0x41E344E, 0x4107DF1, 0x0BABECF,
	0x3ED367C, 0x5BAD14A, 0x202DCAA, 0x1DDED14, 0x2C16028, 0x53255ED, 0x3D6312D, 0x32A3D03, 0x2A6D034,
	0x3EBC893, 0x5A838C9, 0x2D04BDC, 0x47BEBD7, 0x0D8F37F, 0x2C6EA1D, 0x28E43C7, 0x29DDA9F, 0x4BD5DD0,
	0x05D3C92, 0x462AA43, 0x5F0B8FF, 0x2D68F60, 0x35C3078, 0x56C4D27, 0x1900C65, 0x072B1FE, 0x0CC7E69,
	0x51FB128, 0x42374DF, 0x48A2D81, 0x461608A, 0x200BE88, 0x594F966, 0x3367C8C, 0x582BDB3, 0x3788B38,
	0x195F623, 0x37D1C31, 0x059C3CA, 0x035983A, 0x4A1178D, 0x2D5FFE3, 0x0DE3CD7, 0x09F93B7, 0x47CD443,
	0x1F54F4C, 0x13C1FB3, 0x116BFB7, 0x3485FAE, 0x1BC3527, 0x2B153B5, 0x4348A9C, 0x0EF7758, 0x32862C8,
	0x4CA5D0D, 0x12E37D6, 0x337BB57, 0x012C315, 0x3152F0C, 0x1273BA4, 0x0720442, 0x4679928, 0x1CF08AB,
	0x1E79C5E, 0x3DC9D83, 0x3869A29, 0x4E0A9CE, 0x1F8C26E, 0x5706494, 0x35BB7F8, 0x592219C, 0x19B899F,
	0x16DF781, 0x2C5BD67, 0x58A8E29, 0x30688E2, 0x1F33E21, 0x011FD25, 0x4FBBF4D, 0x405DE63, 0x5ACFEA3,
	0x0FB852C, 0x103A393, 0x06B1B5A, 0x383FB7A, 0x224450A, 0x241644C, 0x265698A, 0x0EF7279, 0x502DED6,
	0x197AC51, 0x2F270B9, 0x4A81D88, 0x38D2FAA, 0x3204A6B, 0x06BFD1C, 0x456F8BF, 0x34DAC54, 0x01BD5FA,
	0x1594FB9, 0x130030F, 0x140BAC2, 0x5C2BB6F, 0x489DB48, 0x5D28C6D, 0x5951C94, 0x381835F, 0x43BE715,
	0x2197F5E, 0x16CB9AB, 0x3CA7B89, 0x154C2E3, 0x4422C8E, 0x390E057, 0x235327E, 0x46561F8, 0x4F06646,
	0x355D542, 0x55DF700, 0x2C0CD0E, 0x0C00D43, 0x49BA1E0, 0x37CDF78, 0x1261F34, 0x3B9D311, 0x41F98A6,
	0x4EB0D29, 0x02766B3, 0x28C7534, 0x5936485, 0x0F11EA1, 0x352ECB5, 0x356A445, 0x3E6700F, 0x49F5767,
	0x5B56BAF, 0x270EFA0, 0x57C7C79, 0x334A350, 0x1290D51, 0x0C612D5, 0x14F2968, 0x1A43F4A, 0x1D1DA93,
	0x2E3587D, 0x5D26174, 0x3703C12, 0x2C94349, 0x3860C77, 0x3AE292A, 0x335F3B7, 0x0FE84E2, 0x1CFD233,
	0x02D40A4, 0x0550980, 0x25CB9BE, 0x25A72D2, 0x07D9A82, 0x1E026BF, 0x342D90E, 0x54F2E02, 0x168BFF4,
	0x05A529E, 0x5DAB7F3, 0x2784EC5, 0x0FBB0A7, 0x52CCCCE, 0x12D4276, 0x2AC0EFC, 0x3743BCC, 0x4750069,
	0x5CAE22B, 0x1ED0745, 0x175C447, 0x103363C, 0x5C37084, 0x161C186, 0x25B3E4F, 0x2EF3DEF, 0x32ADF9C,
	0x3B7CD83, 0x3737E24, 0x25A937E, 0x49DBA3C, 0x422C41D, 0x14B9B71, 0x51D63A9, 0x2A0E2C6, 0x2B05BD5,
	0x21A6389, 0x08DCFF3, 0x0D7F734, 0x1856C0A, 0x2E56D2E, 0x1D143F1, 0x1FF3C11, 0x42D784E, 0x08999DC,
	0x39F0CE5, 0x3A51A79, 0x39A07ED, 0x1BAB900, 0x289E2F0, 0x1296D93, 0x40CB98B, 0x2814911, 0x4E85B48,
	0x1339553, 0x470BFE0, 0x47A7EF8, 0x2C96F1B, 0x0CAAFBE, 0x1D41466, 0x282E5A0, 0x1FB0240, 0x11BCABB,
	0x10A8E7B, 0x16EF28B, 0x4186D97, 0x25C0CDB, 0x1503481, 0x4AD25A1, 0x407BF32, 0x27F9BB5, 0x01073DD,
	0x489E8A5, 0x5238342, 0x1F71862, 0x35E9C74, 0x44BB88C, 0x17E2E58, 0x325A31D, 0x0DEE898, 0x0FD3C58,
	0x04E34D8, 0x2E39BEB, 0x1EAD30F, 0x1F22F36, 0x59CEC84, 0x0321030, 0x5D3BA6E, 0x0636F07, 0x340A2AA,
	0x39B3F19, 0x2408E7D, 0x5C5B740, 0x12EAD75, 0x151631D, 0x07FCFC0, 0x3DA028E, 0x22BB454, 0x246D6D8,
	0x196583F, 0x45D9BCE, 0x034AA10, 0x4A35EDB, 0x49110AA, 0x38DDD31, 0x13FD894, 0x5018C45, 0x513AE81,
	0x0336328, 0x5DD806A, 0x372488B, 0x28F9AFA, 0x33A9A1E, 0x571FDAC, 0x330F1BF, 0x49C0E85, 0x10147C2,
	0x2C911EB, 0x469D482, 0x3E70384, 0x52BE069, 0x55A2A81, 0x4FCD26A, 0x1CC3937, 0x5BEC6F6, 0x2C069F5,
	0x2E3BAC8, 0x0992DDF, 0x12EB934, 0x50E3B90, 0x2813AE6, 0x000DA68, 0x30CA777, 0x1510A86, 0x27FBF37,
	0x0F3B538, 0x3A6B6E0, 0x0C7B853, 0x1D49DBA, 0x12813A8, 0x459E19B, 0x4E57AAD, 0x07FE793, 0x28EDB69,
	0x2B1A675, 0x2731525, 0x1174944, 0x4F9CCA1, 0x2C001FA, 0x4DFD5F2, 0x50F71AF, 0x2A793E7, 0x4F0F39F,
	0x097A515, 0x07AD40B, 0x23CF053, 0x12F64D8, 0x52CC8C9, 0x3713FD5, 0x32BF864, 0x0539BAD, 0x52CC10A,
	0x1496E78, 0x1CD7A08, 0x402D8C9, 0x0F07269, 0x1846995, 0x0513446, 0x03BD6F5, 0x0275C90, 0x04ECF72,
	0x57CF1D4, 0x3AEBA2F, 0x277A2E6, 0x0FD3F0A, 0x59D6EE4, 0x04FE681, 0x30136BE, 0x5D23261, 0x22A72E6,
	0x2D53C75, 0x3B77A71, 0x5595647, 0x593FB96, 0x2E02685, 0x1657863, 0x3E093D4, 0x2A5081D, 0x4C24A71,
	0x4978846, 0x58F8A69, 0x5A67A94, 0x0FA4AD3, 0x462C37A, 0x5B4058E, 0x35DEE0D, 0x157103A, 0x41DEBC9,
	0x1D6E7D8, 0x3339711, 0x54C896F, 0x29E5D68, 0x5BE94B0, 0x54CCD62, 0x057A586, 0x23B4CE3, 0x57085E2,
	0x1AA1DB7, 0x39FBBE8, 0x5CBCA9B, 0x358083C, 0x3B1FB70, 0x3D04C5A, 0x5B494AC, 0x317C481, 0x4B2D233,
	0x1D8E046, 0x0A7EFCE, 0x3BC14BA, 0x25AB745, 0x1002240, 0x4F72A35, 0x46E0768, 0x1FF8E03, 0x370E6E3,
	0x0C9467F, 0x102DBEE, 0x0D4CA7F, 0x5AD8031, 0x07F1CBD, 0x31449F1, 0x17BFC9A, 0x13947E6, 0x3924937,
	0x3DDE2B3, 0x554FD4E, 0x345D819, 0x404F35F, 0x3E42F77, 0x23CD172, 0x423A4A0, 0x4888318, 0x284C986,
	0x51BF560, 0x3B3B789, 0x32A3206, 0x01754B7, 0x0DF0BB2, 0x2B01E43, 0x1CEBF86, 0x5225FA9, 0x3323083,
	0x5728057, 0x1FA653A, 0x1CDA1B4, 0x0307DA1, 0x5178A7E, 0x117E938, 0x3CFAC83, 0x5479D0C, 0x4F2DCD9,
	0x2A2EEC0, 0x0298C1E, 0x4DAAE0C, 0x5B2B867, 0x2268873, 0x564FB21, 0x4F67966, 0x1EAF6AA, 0x561F06E,
	0x56C9092, 0x4BF6869, 0x25A6739, 0x4444CF3, 0x12BCD11, 0x1A0DE10, 0x1C9E9CF, 0x24D1243, 0x5349684,
	0x0E77CEA, 0x3FE89FF, 0x4A58854, 0x4FD2CD5, 0x1CE605E, 0x4517EC3, 0x4879C44, 0x3FA7227, 0x386F263,
	0x369E5D2, 0x0F0FCC1, 0x2ECAE51, 0x5A90DC1, 0x385ED6A, 0x5788603, 0x21B96AD, 0x214D7AD, 0x34EEDE2,
	0x3D1DFB6, 0x1BCCDD7, 0x3FE685A, 0x45F2944, 0x229ABC7, 0x304BFB7, 0x412E2E1, 0x0372C75, 0x5F573B6,
	0x140C544, 0x240D643, 0x48CCECB, 0x1B64687, 0x11BD00F, 0x0A60A1C, 0x006CD62, 0x30EAD62, 0x0F90577,
	0x4531973, 0x1FCB1C0, 0x3BB91A5, 0x0AF8670, 0x51FD895, 0x53F6C0B, 0x2F04FD4, 0x4521F87, 0x3AF12A7,
	0x268D17E, 0x59CF4E9, 0x4BD64AF, 0x23B8716, 0x4BF68C3, 0x239DE1E, 0x1E01E96, 0x337FBF1, 0x5A8ED71,
	0x37AD5F4, 0x300FC79, 0x3249C93, 0x2343DEF, 0x3B0140B, 0x48533F0, 0x105E788, 0x50B632C, 0x2AFB9DB,
	0x3883BD1, 0x3CC563A, 0x0DFB080, 0x15558DC, 0x1633D20, 0x5554EC0, 0x04C9324, 0x46E6640, 0x55077C4,
	0x5C79548, 0x528B145, 0x0A97243, 0x4F0B9FC, 0x1EFCD10, 0x2AE3250, 0x036DE5A, 0x1DD0380, 0x06702A4,
	0x3D5B48F, 0x36C491E, 0x5C23C07, 0x47E6002, 0x512B92C, 0x46EA5B2, 0x128FE43, 0x1E02B39, 0x2D1F66B,
	0x4B6A50E, 0x45124B3, 0x55DFAF7, 0x2A3A819, 0x1BD056D, 0x5064EF7, 0x07A554E, 0x262D2CF, 0x5280E6D,
	0x28E2287, 0x2E89BB4, 0x22241F8, 0x4E00FB1, 0x4083F8B, 0x4B92383, 0x06CB9C9, 0x1EAEC12, 0x5B0ADD7,
	0x3928F66, 0x3DE211B, 0x0EDC5FD, 0x430B5FD, 0x2A16CF2, 0x4EF13A5, 0x0C44A68, 0x06406EF, 0x54F005F,
	0x0485F2D, 0x3829987, 0x3D9B077, 0x54B85CB, 0x03E42FE, 0x5A42DAE, 0x5632C4D, 0x1703E11, 0x4EABB2A,
	0x33FBA05, 0x158BBB3, 0x4B1172E, 0x0CA2882, 0x58A6F15, 0x0BB63C1, 0x430542B, 0x1EE069A, 0x19A4BB0,
	0x4A12EB9, 0x092D5DA, 0x3A240A0, 0x36B3325, 0x1AF8939, 0x1363AC1, 0x0BC0229, 0x106AC90, 0x237C5BD,
	0x3515070, 0x0BF6137, 0x56C2ED4, 0x18300F6, 0x282BB3C, 0x5CB9C34, 0x082BD04, 0x29BA6B5, 0x5B2379C,
	0x0297B61, 0x5A27214, 0x43DEC09, 0x1963A6D, 0x4EE16AC, 0x5045110, 0x073422A, 0x20B86D1, 0x3B61D5D,
	0x45E6CDC, 0x0EFAF87, 0x5B56510, 0x3CF6F76, 0x01465C7, 0x3829441, 0x1A7AC77, 0x05C1EB7, 0x164A554,
	0x36A60D0, 0x2744757, 0x3843E37, 0x1612504, 0x12B10B8, 0x18E060B, 0x07A36E0, 0x0072A5C, 0x469A7B9,
	0x0A461CE, 0x1770B00, 0x2B487EC, 0x2552947, 0x2D4B278, 0x2E20F6E, 0x0D03A0C, 0x0AF85E3, 0x4626DF3,
	0x5ADD9C0, 0x0BBE698, 0x37205C4, 0x04B0645, 0x1CC6523, 0x2A30B3C, 0x4A9DF1C, 0x13B9CFF, 0x5465BDD,
	0x136ACA4, 0x3327288, 0x4186AE2, 0x246CEA8, 0x4E170A7, 0x30EE596, 0x2824636, 0x1E2B6A6, 0x01C5FE4,
	0x4E7F40E, 0x2266FA9, 0x1C319FE, 0x522A7C8, 0x18A4455, 0x5E52DC4, 0x481A94F, 0x4CDF7C8, 0x2C28A0F,
	0x00163A3, 0x28B706E, 0x5080825, 0x109F1DD, 0x317CACE, 0x0E25B72, 0x1ECC07E, 0x1544911, 0x3F18BB9,
	0x0AE4F50, 0x35427FD, 0x272A83A, 0x1AE2EC8, 0x18D85AB, 0x1E3C689, 0x2326F96, 0x4B688A4, 0x496F332,
	0x1E23B05, 0x2E12C31, 0x47BE43B, 0x2A102F0, 0x03AFCED, 0x515D6A3, 0x1EE7648, 0x4119BF3, 0x37633D5,
	0x0AE1254, 0x5CE3529, 0x29D5228, 0x384FFA5, 0x33E4968, 0x0FB4889, 0x0568383, 0x57609D2, 0x3307D7A,
	0x22CF206, 0x26AEDE1, 0x07881FA, 0x2C18C6F, 0x505460B, 0x511602F, 0x4EFCA15, 0x5EEACC4, 0x34BE485,
	0x4A8FDA9, 0x053BE2C, 0x0382A21, 0x04B1391, 0x08FB647, 0x4EB564C, 0x3EFC636, 0x048E515, 0x0DD510D,
	0x105CCB1, 0x42A264C, 0x1E49614, 0x3628D43, 0x29A0E7A, 0x366C95C, 0x0D14515, 0x438EBA9, 0x2029F5C,
	0x5932155, 0x29E6362, 0x04A9D1E, 0x41868B5, 0x1EEA6C5, 0x0FCB767, 0x3C3DDFC, 0x149ABFA, 0x21676C4,
	0x53F51C8, 0x1A45585, 0x357FE21, 0x43457BD, 0x0BF6D42, 0x12AE9BA, 0x3AEF294, 0x1080E57, 0x1D3770C,
	0x1A6820A, 0x0D761ED, 0x2E00157, 0x38A5B1A, 0x19E6176, 0x1CE1CE7, 0x11B5567, 0x1DC47A2, 0x332BC46,
	0x2F9A405, 0x1A69A77, 0x59DF106, 0x1CD849E, 0x048DCA6, 0x0E39FC3, 0x38ACD44, 0x15F6029, 0x0392F14,
	0x12FAE63, 0x21A6295, 0x1E98F4D, 0x1C9A7E1, 0x126EA6B, 0x2664564, 0x4B5314D, 0x4145697, 0x19A0D63,
	0x2F9D900, 0x08377EE, 0x26CD3C9, 0x148BEE0, 0x0497A4D, 0x498CA53, 0x4237B4B, 0x55E88D0, 0x1867DE5,
	0x328F907, 0x4C4CF99, 0x5DB3797, 0x0D2660F, 0x5A06B85, 0x2E2BA71, 0x12D7454, 0x5F5C19F, 0x4AC50C9,
	0x0A71EBB, 0x3BA6BEF, 0x4E97F20, 0x276F07A, 0x4F5122B, 0x55359E0, 0x1687C38, 0x596E229, 0x2E8EF2E,
	0x0C10F77, 0x4661916, 0x013F8A7, 0x405231B, 0x4154C6D, 0x077CD20, 0x17FDBCB, 0x1FC9D2F, 0x044A2B3,
	0x08DBE33, 0x25F7B98, 0x533592E, 0x5EA1ECA, 0x09690B2, 0x2580F72, 0x5103C00, 0x1BDEA35, 0x186036E,
	0x2F83CDF, 0x03982DE, 0x2BEC27F, 0x430D172, 0x0691906, 0x2DAC209, 0x3933F55, 0x5D8A4E0, 0x3363F21,
	0x1191849, 0x496EC01, 0x19D3B12, 0x3628DD7, 0x366E2F0, 0x5B6E989, 0x11E7653, 0x0AF4486, 0x067FBB4,
	0x5578A4A, 0x178978C, 0x549A07A, 0x0610234, 0x5EC9111, 0x1171179, 0x3919A4D, 0x45A0150, 0x0C05C42,
	0x2E31B91, 0x5070867, 0x0FB98F5, 0x17168BE, 0x11663A4, 0x0C0204B, 0x05BA688, 0x1821DCE, 0x1FD8CFD,
	0x2281766, 0x015C5A1, 0x00C9438, 0x58EB4CB, 0x2EAC847, 0x5046D61, 0x42406A7, 0x5BBC44D, 0x5AB51E2,
	0x4917D9B, 0x2651371, 0x1A2D38C, 0x1BC2106, 0x24B1450, 0x26D42A2, 0x35231ED, 0x5156610, 0x25D7C87,
	0x4B22944, 0x4F9F881, 0x1A6666D, 0x4EAF900, 0x59C677C, 0x4494876, 0x315D583, 0x3DC5A4C, 0x2705B23,
	0x1801431, 0x4B24360, 0x19FB635, 0x069A9D3, 0x017527A, 0x474ED52, 0x0275E4C, 0x2627294, 0x4592D07,
	0x5E0AA83, 0x43E3B05, 0x1D3E7D8, 0x16D0C15, 0x1E822D7, 0x08E6EE5, 0x46564FE, 0x23717AB, 0x3D53D7E,
	0x2D1B3EA, 0x279D9CA, 0x434F3A1, 0x3EBBC0D, 0x2893FA0, 0x5AD3523, 0x5A77659, 0x1F5DB3A, 0x47FED2F,
	0x3E8925C, 0x1264DD0, 0x1A260AB, 0x2BC7257, 0x31F8C85, 0x2A9BA67, 0x2807D28, 0x074E56B, 0x5EAF479,
	0x145DFEA, 0x54EF11A, 0x01F0AD8, 0x1DCF52E, 0x5C227FD, 0x49C6006, 0x1211D03, 0x4735E7D, 0x2248B8B,
	0x31D7BAE, 0x50B44AC, 0x1AB7493, 0x40ED148, 0x434D979, 0x03070A5, 0x4A7E88F, 0x2056B74, 0x44483EF,
	0x48A19AB, 0x0788BC4, 0x11C85B9, 0x2386C16, 0x3B52870, 0x5E55EA5, 0x5CAD0A2, 0x51FE9D2, 0x1747D50,
	0x206523D, 0x5D07F91, 0x420E957, 0x25FC79A, 0x53909AC, 0x36E1153, 0x379D131, 0x11B3A1C, 0x281D311,
	0x32C3E29, 0x4D881A8, 0x2D9179E, 0x22EE858, 0x354BDFF, 0x32E1094, 0x21D1E21, 0x1D273C3, 0x1D11E00,
	0x50A29C1, 0x5B6F7EC, 0x202379D, 0x1F38463, 0x56E4848, 0x1FC74C1, 0x41D8698, 0x00F3051, 0x51253FA,
	0x1BCA201, 0x54B152A, 0x0BA5AE1, 0x0DD7C2A, 0x3ED69BE, 0x3F45D26, 0x53D846A, 0x5D8B8BC, 0x01EAF36,
	0x553A42C, 0x4DEB23C, 0x53539FD, 0x2373F6C, 0x14BA97A, 0x47C4691, 0x0242CAF, 0x35B4EFB, 0x29E746A,
	0x1A85F2F, 0x03BE4D1, 0x02A58D2, 0x3EF1AD4, 0x1CF7969, 0x5681106, 0x3292CFD, 0x4F7B945, 0x50D5368,
	0x0957799, 0x5778868, 0x03FE939, 0x5C43662, 0x38C039E, 0x297B83B, 0x118C9A9, 0x241DD23, 0x1B12ECD,
	0x5EAB423, 0x192890D, 0x217E712, 0x1CC55A6, 0x05FA60D, 0x50D6FB7, 0x4D8FB11, 0x1D6B610, 0x4A8C606,
	0x50DFECB, 0x1BF94FC, 0x168FC84, 0x1A89C1F, 0x38BFD24, 0x21DB709, 0x4477764, 0x545EE05, 0x4C91064,
	0x367957A, 0x2F864F1, 0x3C0EDA5, 0x2F29503, 0x09FA58A, 0x193DDC9, 0x1F8CB1E, 0x33F272E, 0x31F15FC,
	0x2D9B67D, 0x1A0CA7A, 0x3153FA1, 0x30F5F51, 0x263C765, 0x5B05DC7, 0x43FF3D3, 0x22CCA87, 0x0EAD718,
	0x2158E86, 0x384D682, 0x4769F82, 0x394A306, 0x4FA28F6, 0x29DC9A5, 0x172C42A, 0x3F421A3, 0x3E5C412,
	0x09909A7, 0x373265E, 0x30DA07B, 0x47F17CF, 0x386A97B, 0x2CE4F55, 0x553546B, 0x42F4C6E, 0x5A7BCCF,
	0x4F0F005, 0x4C7F729, 0x04D9306, 0x4D13127, 0x55EFE65, 0x184CA08, 0x5CE9896, 0x407DF1F, 0x3BB0197,
	0x0716A25, 0x3B51EDA, 0x25D55A5, 0x34AEC75, 0x0965FC3, 0x0FBAB2A, 0x324E7FC, 0x5C0881B, 0x2D384DF,
	0x19180D0, 0x149B95B, 0x2CFCC50, 0x24A223A, 0x56CC756, 0x08F0E65, 0x52A1772, 0x209DFCF, 0x2921877,
	0x486D9DB, 0x31CF317, 0x05AA2C0, 0x1AEB954, 0x21649C0, 0x121F033, 0x44BC0D7, 0x5515F9F, 0x00CE993,
	0x425CEAD, 0x422D950, 0x0CB1D17, 0x155F829, 0x09184C7, 0x3055061, 0x167B0CA, 0x30AB99B, 0x4611EE2,
	0x5670A2C, 0x135018F, 0x2199961, 0x38704AC, 0x5DBBA08, 0x1C9AD5A, 0x242FA26, 0x5CE4C3C, 0x3F00BD2,
	0x30C0912, 0x1DEF656, 0x16F8002, 0x3177057, 0x333D8A5, 0x0656317, 0x5B0EB68, 0x3680B18, 0x22567CC,
	0x47646D9, 0x016B2F3, 0x299D62A, 0x0F44097, 0x4496E8B, 0x57E06BD, 0x543C686, 0x3FEAA09, 0x435A473,
	0x04102F0, 0x5CAAB81, 0x26B217A, 0x184B890, 0x209CB6C, 0x3323F1C, 0x29D80C0, 0x358F215, 0x4FF813D,
	0x2AF29DA, 0x52C9554, 0x06D6BB4, 0x152625F, 0x5B92A3F, 0x592B256, 0x2B317F1, 0x4E75DA1, 0x2DE6008,
	0x1B7DA78, 0x3743CD0, 0x1860C6B, 0x1E739C8, 0x1966C60, 0x0FBFEFB, 0x34FCCBC, 0x0519B93, 0x2758D6B,
	0x4C6755B, 0x380D9B5, 0x406C683, 0x3D9FDA6, 0x4897E9E, 0x2D07AA3, 0x5461B7C, 0x4E9DD54, 0x2EF2ED5,
	0x4242D24, 0x087F8E7, 0x56D3600, 0x25186F5, 0x268BD92, 0x56216DE, 0x5D2D348, 0x47411E1, 0x036DB96,
	0x1F2F742, 0x154EDDC, 0x438C130, 0x2FAADC7, 0x3F49D29, 0x4A26908, 0x08A3709, 0x3B36A9F, 0x535A1EF,
	0x38E8255, 0x38DB23D, 0x04307C6, 0x2DAE91C, 0x2C4597A, 0x38AC797, 0x405D81B, 0x236994D, 0x30FBA57,
	0x54678D4, 0x4CBA179, 0x23EBD1A, 0x431FF07, 0x5DFB116, 0x1C025ED, 0x31A49A7, 0x56A7FF1, 0x3AF06B5,
	0x34CA096, 0x246102F, 0x5A06214, 0x37D84CB, 0x4287A0B, 0x08B0D29, 0x5D5B02B, 0x12B5330, 0x37CFF5E,
	0x223B03A, 0x31C4F9D, 0x2CE5AD7, 0x30B92C6, 0x331051B, 0x3C0698D, 0x173A11D, 0x01E6E01, 0x5D28C03,
	0x24241D3, 0x06B25BD, 0x38FEAD1, 0x09F4B8C, 0x4503842, 0x0C4DD36, 0x0B4CCD4, 0x2791E02, 0x4DEC4DC,
	0x1449BDC, 0x0B16DC4, 0x0D8172F, 0x03087D2, 0x1F352FA, 0x1E71E4B, 0x4469C40, 0x57D5C99, 0x554E7DC,
	0x1B51095, 0x01F385C, 0x01E9FD7, 0x12D7B0C, 0x286874F, 0x09D33C7, 0x27F8012, 0x4B1276B, 0x39B2067,
	0x5199D68, 0x511CC95, 0x2858EF0, 0x417B0A3, 0x3C97C93, 0x208ABA9, 0x06FD0FA, 0x45061E2, 0x154E28B,
	0x233CB4B, 0x03317DD, 0x3835584, 0x2E8FE90, 0x395ACB5, 0x4E0CD34, 0x3A83465, 0x339FC00, 0x4E6BD6B,
	0x10FDFCA, 0x3408218, 0x05929F0, 0x020CBBC, 0x41790DA, 0x141EF3C, 0x2FAF841, 0x59FD6C8, 0x11B37AF,
	0x34F51FF, 0x0943353, 0x14CF8C7, 0x3AFD8E3, 0x17F0CB1, 0x3B7C786, 0x08C7626, 0x0B6EF75, 0x4C283C0,
	0x211D2AB, 0x1D1DB09, 0x460BB08, 0x2AC8060, 0x2B606DC, 0x5D71A74, 0x3271469, 0x42094CF, 0x048516B,
	0x156C0DD, 0x2F4D525, 0x304F3DF, 0x4F5BCDE, 0x3563559, 0x4D68B5E, 0x1F2B089, 0x2F92EA6, 0x004CE10,
	0x1F58FCD, 0x4CA6DE2, 0x0F86EB7, 0x45024EC, 0x5D005AA, 0x09A15FF, 0x5D6529C, 0x08524FF, 0x5036381,
	0x4AC0184, 0x31969EC, 0x20E8EB9, 0x05493A9, 0x044A137, 0x2A7F408, 0x0D7E781, 0x5D9DA7B, 0x5609A9A,
	0x32779A8, 0x5AF432D, 0x53ED3BD, 0x5C54B30, 0x4596361, 0x0F19E39, 0x4C91AF0, 0x53AB4A6, 0x1437A47,
	0x09C017E, 0x2A6FE1E, 0x5D6E7AC, 0x2275860, 0x4AE8110, 0x16F3BAB, 0x51A0358, 0x5EDDDFE, 0x08A8772,
	0x04D5937, 0x4B2CFC8, 0x061333C, 0x049B03B, 0x58D2A43, 0x362B35B, 0x0EB101E, 0x332A0CB, 0x5AA648F,
	0x1FCCFEC, 0x126CD7E, 0x1CFDF4D, 0x5D55417, 0x431D908, 0x2CC0D25, 0x1658E7A, 0x21D76F6, 0x2CF9237,
	0x055C8F1, 0x217AE4D, 0x0A15841, 0x46991E8, 0x37BB757, 0x29B8B66, 0x58F68FC, 0x5E99EA3, 0x08E31DE,
	0x44A334A, 0x29A9314, 0x369FE1D, 0x4DA7C57, 0x19E5494, 0x1148929, 0x0756F4F, 0x24FD1B5, 0x42D8299,
	0x30B2E1C, 0x00EF7F3, 0x4A89623, 0x25628CA, 0x39BCABF, 0x34AD63C, 0x2598BC9, 0x3EFBC0B, 0x3D56B0D,
	0x567957F, 0x3AFF6F8, 0x1F2FB07, 0x5946A32, 0x50CE55C, 0x5548228, 0x1181713, 0x33A00BE, 0x0CC6FDB,
	0x4FF1B0E, 0x5313D17, 0x40070F7, 0x29BA36C, 0x37213DF, 0x328ACA9, 0x115720F, 0x56E6888, 0x04D9A8C,
	0x514BFFB, 0x36F3826, 0x55706AD, 0x301B085, 0x5C08013, 0x53F2674, 0x02308C7, 0x15F2AD3, 0x2FEAB8A,
	0x34DEBDA, 0x20858A9, 0x2EFF041, 0x3A5A359, 0x0A90546, 0x14BA428, 0x0CB58E0, 0x49744FA, 0x3DC403E,
	0x59F8B53, 0x571359A, 0x0FAC464, 0x53DAAA4, 0x0DA8BC6, 0x52F2711, 0x14746BC, 0x33BF03F, 0x2B39D5F,
	0x4431925, 0x34B30D2, 0x190737C, 0x1098F18, 0x3A0CEF9, 0x2006EF7, 0x410FB46, 0x3A0FA73, 0x5A2009C,
	0x0AABAC3, 0x1BD90EA, 0x063ED97, 0x36DA080, 0x5119523, 0x0B0A7F1, 0x129A016, 0x2EE6D88, 0x5547999,
	0x230B218, 0x27FE8AC, 0x5BA1204, 0x3F6CBFE, 0x4B62379, 0x52EBD27, 0x1AE2653, 0x1234164, 0x5E80D5E,
	0x188B2F3, 0x4F46D42, 0x0D53B86, 0x12A5310, 0x419C874, 0x209F34F, 0x584DAC2, 0x0562B31, 0x5A66498,
	0x1E9C7FB, 0x3118004, 0x060DA99, 0x54999D6, 0x565D465, 0x179A9B4, 0x51B1463, 0x59A06FE, 0x2F74315,
	0x24C8640, 0x335C762, 0x5E2D7BC, 0x0FDF391, 0x402036E, 0x42148D8, 0x12E4909, 0x2BF3F8C, 0x08FF623,
	0x44AD0FE, 0x2374C5B, 0x3C2BA85, 0x014B251, 0x5AC3921, 0x039E340, 0x0543D9E, 0x030891B, 0x4C451EC,
	0x36AF719, 0x278A32D, 0x4B40231, 0x4E66072, 0x2AB7ED1, 0x0F721F5, 0x577EB12, 0x4A38D2B, 0x27575EE,
	0x0A8E00C, 0x2419226, 0x5C55212, 0x41B8651, 0x157A51F, 0x261AE04, 0x563F15B, 0x0477185, 0x07E6D03,
	0x193933F, 0x5E6A1C5, 0x343D18D, 0x42CBFFD, 0x37DDCC6, 0x3B7D027, 0x1488A14, 0x431E829, 0x0449BF3,
	0x1F59F15, 0x3872E6E, 0x0778DF2, 0x39F1213, 0x2B86455, 0x135E13E, 0x08B899A, 0x08B9410, 0x4513414,
	0x53426FB, 0x57953E7, 0x0B6AF3B, 0x342E839, 0x18DD096, 0x3F7ADC0, 0x4BC8993, 0x24760DA, 0x11CB9FF,
	0x37C577B, 0x4579E6E, 0x1E2D96B, 0x005877C, 0x1E09B4A, 0x54A1E93, 0x2E90CF4, 0x01F0C0F, 0x0FDBADA,
	0x2425422, 0x1960396, 0x010EDB4, 0x07EC131, 0x439EC55, 0x4060D40, 0x3A8F482, 0x2720876, 0x3933AB8,
	0x1D7BE83, 0x2372EFE, 0x5A0D666, 0x415F180, 0x0E217CE, 0x14D73BA, 0x4200590, 0x1FA9C35, 0x0F76C50,
	0x15D0214, 0x0A22FAA, 0x5B54C87, 0x1FA35F3, 0x23E34BE, 0x58DD813, 0x0BDF455, 0x1A2F4D4, 0x061DA56,
	0x5224F81, 0x522E325, 0x141DB9D, 0x575D402, 0x03CADBE, 0x1FB0A20, 0x12D31B1, 0x4F01669, 0x5AEA4BD,
	0x5A880E1, 0x2DC2CD5, 0x0B215AD, 0x177BA2A, 0x0040E0B, 0x4ABD9F9, 0x0CDC817, 0x3D88ED1, 0x0FF5250,
	0x50810BC, 0x0317605, 0x15819F7, 0x5894E11, 0x3CD5974, 0x1B80598, 0x49FD0AB, 0x5B02018, 0x55D325F,
	0x3AD2D34, 0x45FB915, 0x33AE9B1, 0x3F2F65A, 0x1FC4F53, 0x2CF3204, 0x04113A3, 0x20BC205, 0x53C6C0D,
	0x0ABE179, 0x176C9B4, 0x0118F43, 0x5567999, 0x18557A3, 0x37B4E37, 0x1F029DE, 0x3A899ED, 0x35B14D3,
	0x45D6D45, 0x26603ED, 0x4DCB4FD, 0x1DA7648, 0x1472EEE, 0x5F029FE, 0x489476F, 0x5694441, 0x58487DE,
	0x2C0337E, 0x21B8FF1, 0x04E707D, 0x47B9B6B, 0x02A5C30, 0x38E316B, 0x1258F71, 0x25B73A8, 0x2725978,
	0x3B55B27, 0x4AA180F, 0x2420400, 0x2C78F3E, 0x46C76BC, 0x1DEEE1E, 0x12B0060, 0x53AE7C7, 0x5F0A081,
	0x4C48675, 0x2E470A2, 0x18236EE, 0x2A76C09, 0x4DD7570, 0x2779741, 0x40D1A72, 0x21AF367, 0x1017D33,
	0x2FA6294, 0x35AA386, 0x3163688, 0x5CA5572, 0x58A3A64, 0x0193334, 0x222E0FE, 0x1AB10A8, 0x2C5AACC,
	0x4E244D6, 0x4532EAE, 0x231FAC5, 0x4743A8A, 0x2C0C267, 0x4CA6D26, 0x1821249, 0x197E78C, 0x25D80EB,
	0x00613FC, 0x34AB803, 0x567F964, 0x586BA83, 0x371D945, 0x33629F2, 0x1537D1A, 0x1AADD98, 0x28753C3,
	0x07001D0, 0x1B5EC93, 0x33C2E67, 0x49A418B, 0x2F3352C, 0x51255A0, 0x58A4AFC, 0x2357FF3, 0x4B793EC,
	0x19F604A, 0x1901095, 0x4C5A445, 0x161B991, 0x47CEC3E, 0x237F1EA, 0x40B3FD2, 0x092283E, 0x3F0E6B6,
	0x1CC4D4B, 0x304C45C, 0x37209DA, 0x4857A52, 0x1A80B2D, 0x041B26A, 0x0FDC5DE, 0x13EE9F1, 0x0BE48A0,
	0x500B832, 0x407B0AF, 0x35B5B6D, 0x54678F6, 0x1E9A468, 0x51BDBA6, 0x284E5D3, 0x1CD9022, 0x3B44BBA,
	0x50AF8AC, 0x483E718, 0x22BE5CA, 0x3BB7886, 0x50B7CF2, 0x473CCEE, 0x0DFCF55, 0x46DEA9E, 0x1B13C11,
	0x33FBC8D, 0x24B83E0, 0x4F486F9, 0x1B13360, 0x58CD401, 0x12749A0, 0x0147C34, 0x19FF0CD, 0x0E53ECE,
	0x1D1D5EB, 0x4DE993F, 0x063BB94, 0x31B29AF, 0x1C99231, 0x44D04F4, 0x08C7E33, 0x1A2F61B, 0x3F0BDAF,
	0x4A56ADE, 0x599E146, 0x2831CEF, 0x285AE92, 0x5BFDF1D, 0x19E4AE1, 0x5082B81, 0x1F955E6, 0x4DF316C,
	0x00A1719, 0x4FC559D, 0x3C2C195, 0x1C55BEF, 0x3F454C3, 0x091C0C7, 0x4DFA477, 0x153C7F4, 0x3994C51,
	0x1638D52, 0x389F04C, 0x1B8EDBA, 0x1BE35F0, 0x06C63FA, 0x3EBBAB9, 0x18895ED, 0x09E259F, 0x4BEA36F,
	0x3D2238C, 0x2E4DE61, 0x137974C, 0x0A71922, 0x294FDCD, 0x0E9892D, 0x5CE5753, 0x4C22FE5, 0x212EAF3,
	0x58266D8, 0x35CE7B5, 0x00E0A92, 0x31C4A46, 0x13BF885, 0x58127D2, 0x3304E81, 0x38C3741, 0x438B7A3,
	0x1B19FB8, 0x106D8ED, 0x5853899, 0x22E84DC, 0x3420F63, 0x449C7CB, 0x48D8060, 0x12C43EF, 0x4EDFAB9,
	0x381B855, 0x31E36C7, 0x13723DB, 0x2BD08FC, 0x2BEBA2E, 0x01372C9, 0x0B3F149, 0x5F1C5D6, 0x4D34A5A,
	0x29C3B38, 0x5D09236, 0x1DFE6B7, 0x4AE89A2, 0x4A9EB7E, 0x121E78D, 0x41C7A76, 0x326B9A8, 0x2304BBC,
	0x28AF8CF, 0x1C7F5FB, 0x2AC6261, 0x54D47A9, 0x13B1044, 0x59CC2DC, 0x52A7C8C, 0x2816070, 0x4A14C57,
	0x5BCFF59, 0x327067E, 0x10F8701, 0x2F754D4, 0x41872B4, 0x537EB95, 0x5918453, 0x59886CD, 0x5155E95,
	0x03AC009, 0x0E7B94F, 0x117C91C, 0x3D99C26, 0x2F06CBB, 0x302C14A, 0x3B3CD0C, 0x06C70C6, 0x12AEF05,
	0x47CBC4D, 0x548E514, 0x2C76905, 0x56D2FC4, 0x44CC20F, 0x48CC4BE, 0x12E7D5F, 0x57E8B4C, 0x1C9ADCB,
	0x03AB109, 0x52CA583, 0x5F49A6D, 0x0E6F464, 0x1C35470, 0x1D6D442, 0x46C8BF0, 0x2528FCA, 0x1184BA6,
	0x1FB9ACB, 0x282FCDB, 0x0471CD4, 0x4911883, 0x27BDCBF, 0x0847655, 0x1D332E9, 0x569D592, 0x4136A87,
	0x0070C76, 0x4515350, 0x3457CC1, 0x41E9853, 0x1A4B4B4, 0x183879F, 0x0BEA260, 0x35FE429, 0x0717B5B,
	0x5DB7A69, 0x5B978CF, 0x436D080, 0x394F41D, 0x53D7CCB, 0x141C200, 0x1BB4460, 0x545F2AB, 0x4204729,
	0x047310D, 0x3D870CB, 0x26DB58B, 0x2AA53EF, 0x3F7C871, 0x2983089, 0x1CC1611, 0x2D4ECE7, 0x32FB661,
	0x4B961FA, 0x56D2F43, 0x11E2996, 0x1EB862C, 0x4C28435, 0x57E5696, 0x1ECEB9A, 0x24A1DBC, 0x4F150E8,
	0x4A85997, 0x072DE16, 0x3AE25FE, 0x57B6C5C, 0x51397BF, 0x2FFEA30, 0x4AD6CF7, 0x005D2FF, 0x16620B6,
	0x068711B, 0x089DFEA, 0x3757CF2, 0x5A08D27, 0x45F86A4, 0x373D93B, 0x59CBD0F, 0x1BFE2D1, 0x297E4D3,
	0x05E5B33, 0x54D6C88, 0x0EF1C48, 0x118C267, 0x081E9D5, 0x47323BE, 0x04B99E2, 0x37373C9, 0x38C6AAA,
	0x486A0FE, 0x2FDAAE5, 0x29D9AA0, 0x5B8D117, 0x3242867, 0x4A8396A, 0x0DE411F, 0x3329873, 0x026A5CF,
	0x0B8AB34, 0x06773C1, 0x248FCC1, 0x025CA27, 0x0EE052E, 0x182560D, 0x54FE08E, 0x14CE21B, 0x0118236,
	0x180EC7E, 0x4DD1A44, 0x19EECD2, 0x1A3BE97, 0x1E833C0, 0x405B0F3, 0x0513BDD, 0x14CD7A2, 0x5426ECC,
	0x46B059C, 0x3E957E5, 0x0DF5165, 0x2F6DE8B, 0x15CC0DB, 0x2567D15, 0x0CBA4C1, 0x3287B3A, 0x0180772,
	0x1F66966, 0x0A3F4BB, 0x5E526AD, 0x5195503, 0x0AC4CC7, 0x1770948, 0x3C075B3, 0x025D2B7, 0x1C8570B,
	0x4D3F23E, 0x0EA4BA0, 0x18AA1E4, 0x40F33E4, 0x4544D76, 0x18BFC9A, 0x5C4DC45, 0x383E5EF, 0x24A657E,
	0x1EB4F91, 0x2304470, 0x2FEBD0F, 0x4BFC733, 0x0F97973, 0x266107F, 0x41442FA, 0x5E62BD4, 0x39CF3DB,
	0x12806E5, 0x1ACC063, 0x1C15FB4, 0x44F0D8F, 0x3ECE740, 0x2DD1F82, 0x4B42074, 0x14FB8C0, 0x2321497,
	0x3AB5FF1, 0x57EDEF7, 0x0BDEB6C, 0x3EFB22E, 0x2D475C8, 0x32B0AE7, 0x340F90C, 0x35CD6D9, 0x1CA61CC,
	0x44526B4, 0x2F9FF9D, 0x13F95A1, 0x4B0E277, 0x3954FA6, 0x44350EC, 0x3EBDC59, 0x5887DCE, 0x3A9A2DD,
	0x0213AB7, 0x24AC8F7, 0x12C3CE9, 0x4D02D51, 0x23923C3, 0x453667A, 0x41AEF95, 0x5C02C66, 0x210BCA7,
	0x5DDF1E3, 0x036D2ED, 0x077C4F2, 0x0304CA1, 0x4EF4D19, 0x0BEAD04, 0x5F0FE9C, 0x5439415, 0x5D38DC3,
	0x0E5DF37, 0x534BA35, 0x1FE3775, 0x454C7C6, 0x1D18911, 0x3D4180F, 0x20014E8, 0x58CC4D9, 0x56329CC,
	0x056F88C, 0x197B564, 0x49725CB, 0x28832EB, 0x339075B, 0x39421FC, 0x1C24F54, 0x00B7F64, 0x4CBC09A,
	0x348B348, 0x1AD3E75, 0x124176E, 0x3E44F27, 0x37CD0F6, 0x535C5E1, 0x3B9E52F, 0x36806AD, 0x2A40EB7,
	0x40A9F8B, 0x308D460, 0x1A954C9, 0x05C49A8, 0x00478E0, 0x28B413D, 0x4210CE6, 0x3B383AA, 0x06CABE9,
	0x2B1D9DC, 0x26C9A55, 0x0555FBA, 0x334423A, 0x0A8DFAA, 0x3EF47F6, 0x3383390, 0x321F149, 0x2633DD3,
	0x2C1C3C1, 0x2483714, 0x4E27AAE, 0x0E6E248, 0x454BF4E, 0x17572F2, 0x57FD9B1, 0x5D7CC78, 0x479B0F2,
	0x5AC2538, 0x31325B4, 0x1104D4E, 0x18E370D, 0x4425ED3, 0x5B7E6DB, 0x2244534, 0x04FD696, 0x5790029,
	0x0944A0D, 0x49B9081, 0x32F6C61, 0x005F402, 0x4139FFD, 0x150B56B, 0x38B7994, 0x18CDB89, 0x0603A96,
	0x3FE95A2, 0x39AC030, 0x0DE5BB7, 0x5541DD5, 0x5996453, 0x5595A0C, 0x5B5ECD9, 0x4F8D0E8, 0x45C4C73,
	0x488E084, 0x35222D0, 0x367649D, 0x2D69BFF, 0x04CEF71, 0x23003EF, 0x17F126D, 0x1DF0D2C, 0x53800F6,
	0x0B84F04, 0x3974CAA, 0x475831B, 0x1FC919E, 0x2BB058B, 0x18E9078, 0x531413D, 0x2B49715, 0x3D01CDA,
	0x0905FB3, 0x5794266, 0x56EF63F, 0x5D812A0, 0x3DC19AC, 0x17DAE98, 0x320D7D5, 0x45A3332, 0x41B9CBD,
	0x0624F67, 0x429764C, 0x1F64112, 0x2D85436, 0x40639AF, 0x0AA57EF, 0x30AEF81, 0x3014B43, 0x1ACFF4F,
	0x0467EBE, 0x34C9C61, 0x018BFB0, 0x4F5F2BF, 0x218BD79, 0x288024A, 0x0D3D8F5, 0x458D973, 0x2D30C93,
	0x0A6A1D2, 0x2DC33E1, 0x5953FF2, 0x3CEEDB9, 0x543639B, 0x3AF7FA9, 0x1860F77, 0x4E58EBB, 0x2DF0998,
	0x093561C, 0x5942A1F, 0x3378382, 0x4DD4B54, 0x4EBEDFD, 0x44ED4AA, 0x2ABF600, 0x5062E3F, 0x1093054,
	0x539281A, 0x1EEA0B8, 0x4461207, 0x2E32856, 0x5B9097C, 0x5B48E48, 0x2595BAE, 0x4F84E64, 0x1DD9C50,
	0x19A1106, 0x1751A5D, 0x5A41D57, 0x4E4580A, 0x5CA3898, 0x4076AF2, 0x51162D4, 0x27B1303, 0x411BDCE,
	0x2E86964, 0x28BA7D6, 0x4440BBD, 0x5694211, 0x2308552, 0x4490FF6, 0x1F8A7D7, 0x564AF2B, 0x4D412BB,
	0x338AE56, 0x5C5FB19, 0x0A0BE30, 0x58F9FED, 0x43EBC5E, 0x1732380, 0x303AD09, 0x27F2BD2, 0x44ACDA1,
	0x52FBC25, 0x131BE6C, 0x098828C, 0x07B84E8, 0x56E5D0D, 0x4F5CADF, 0x5BC0B04, 0x39316F1, 0x3BF745E,
	0x48BD899, 0x2655A29, 0x5494288, 0x291CBB9, 0x3335F99, 0x221B7AF, 0x152A016, 0x3FE1827, 0x36F3105,
	0x4B4980F, 0x3090685, 0x1789C40, 0x3F951DE, 0x0FCC257, 0x3F992AE, 0x216C798, 0x1800059, 0x162B171,
	0x569AF55, 0x0E1269F, 0x1F95BAB, 0x0787CB0, 0x1F98960, 0x4CB0972, 0x233C3DA, 0x2B325B0, 0x42A4D74,
	0x57D9AF0, 0x09BF455, 0x0D533FA, 0x0B4CFB0, 0x4B57B11
};
#pragma endregion

// idc
#pragma warning(push)
#pragma warning(disable:6385)
#pragma warning(disable:4244)
#pragma warning(disable:4101)

// sub:3C4E300
char* tool::decrypt::DecryptString(char* str) {

#pragma region Vars
	UINT8* tmp; // rdi
	BYTE* v2; // rbx
	UINT32 v3; // r11d
	INT32 v4; // r9d
	BYTE* v5; // r10
	BYTE v6; // dl
	UINT32 v7; // r8d
	INT32 v8; // r9d
	BYTE* v9; // r10
	UINT32 v10; // r9d
	INT32 v11; // r10d
	BYTE* v12; // r11
	BYTE v13; // r8
	INT32 v14; // ecx
	BYTE* v15; // rdx
	BYTE v16; // r9
	INT32 v17; // r10d
	BYTE* v18; // r8
	BYTE v19; // dl
	BYTE v20; // r8
	INT32 v21; // ecx
	BYTE* v22; // rdx
	UINT32 v23; // r8d
	INT32 v24; // r9d
	BYTE* v25; // r10
	UINT32 v26; // r10d
	INT32 v27; // r9d
	BYTE* v28; // r11
	UINT32 v29; // r10d
	INT32 v30; // r9d
	BYTE* v31; // r11
	UINT32 v32; // r9d
	INT32 v33; // r10d
	BYTE* v34; // r11
	UINT32 v35; // r11d
	INT32 v36; // r9d
	BYTE* v37; // r10
	BYTE v38; // dl
	BYTE v39; // r9
	INT32 v40; // r10d
	BYTE* v41; // r8
	BYTE v42; // dl
	UINT32 v43; // r9d
	INT32 v44; // r10d
	BYTE* v45; // r11
	BYTE v46; // dl
	UINT32 v47; // r9d
	INT32 v48; // r10d
	BYTE* v49; // r11
	BYTE v50; // dl
	UINT32 v51; // r10d
	INT32 v52; // r9d
	BYTE* v53; // r11
	BYTE v54; // r9
	INT32 v55; // edx
	BYTE* v56; // r8
	BYTE v57; // r9
	INT32 v58; // r10d
	BYTE* v59; // r8
	BYTE v60; // dl
	UINT32 v61; // r11d
	INT32 v62; // r9d
	BYTE* v63; // r10
	UINT32 v64; // r11d
	INT32 v65; // r9d
	BYTE* v66; // r10
	UINT32 v67; // r9d
	INT32 v68; // r10d
	BYTE* v69; // r11
	BYTE v70; // dl
	UINT32 v71; // r8d
	INT32 v72; // r10d
	BYTE* v73; // r9
	BYTE v74; // r9
	INT32 v75; // r10d
	BYTE* v76; // r8
	BYTE v77; // dl
	UINT32 v78; // r9d
	INT32 v79; // r10d
	BYTE* v80; // r11
	BYTE v81; // dl
	UINT32 v82; // r8d
	INT32 v83; // r9d
	BYTE* v84; // r10
	UINT32 v85; // r9d
	INT32 v86; // r10d
	BYTE* v87; // r11
	BYTE v88; // dl
	UINT32 v89; // r9d
	INT32 v90; // r10d
	BYTE* v91; // r11
	BYTE v92; // dl
	BYTE v93; // r10
	INT32 v94; // r8d
	BYTE* v95; // r9
	UINT32 v96; // r9d
	INT32 v97; // r10d
	BYTE* v98; // r11
	BYTE v99; // dl
	UINT32 v100; // r9d
	INT32 v101; // r10d
	BYTE* v102; // r11
	BYTE v103; // dl
	BYTE v104; // r9
	INT32 v105; // edx
	BYTE* v106; // r8
	UINT32 v107; // r8d
	INT32 v108; // r9d
	BYTE* v109; // r10
	BYTE v110; // r9
	INT32 v111; // r10d
	BYTE* v112; // r8
	BYTE v113; // dl
	UINT32 v114; // r9d
	INT32 v115; // r10d
	BYTE* v116; // r11
	BYTE v117; // dl
	UINT32 v118; // r10d
	INT32 v119; // r9d
	BYTE* v120; // r11
	BYTE v121; // dl
	BYTE v122; // r9
	INT32 v123; // r10d
	BYTE* v124; // r8
	BYTE v125; // dl
	UINT32 v126; // r9d
	INT32 v127; // r10d
	BYTE* v128; // r11
	BYTE v129; // dl
	UINT32 v130; // r10d
	INT32 v131; // r9d
	BYTE* v132; // r11
	BYTE v133; // r8
	INT32 v134; // edx
	INT32 v135; // r10d
	BYTE* v136; // r9
	BYTE v137; // r8
	BYTE v138; // r9
	INT32 v139; // r10d
	BYTE* v140; // r8
	BYTE v141; // dl
	UINT32 v142; // r10d
	INT32 v143; // r9d
	BYTE* v144; // r11
	UINT32 v145; // r8d
	INT32 v146; // r9d
	BYTE* v147; // r10
	INT32 v148; // r8d
	INT32 v149; // r9d
	BYTE* v150; // r10
	BYTE v151; // dl
	UINT32 v152; // r9d
	INT32 v153; // r10d
	BYTE* v154; // r11
	BYTE* v155; // r11
	UINT64 v156; // r9
	UINT64 v157; // r8
	BYTE v158; // r10
	UINT32 v159; // eax
	INT32 v160; // ecx
	UINT32 v161; // edx
	INT32 v162; // eax
	BYTE* v163; // r11
	UINT64 v164; // r9
	UINT64 v165; // r8
	BYTE v166; // r10
	UINT32 v167; // eax
	INT32 v168; // ecx
	UINT32 v169; // edx
	INT32 v170; // eax
	BYTE* v171; // r11
	UINT64 v172; // r9
	BYTE v173; // r10
	UINT32 v174; // eax
	INT32 v175; // ecx
	UINT64 v176; // r8
	UINT32 v177; // edx
	INT32 v178; // eax
	BYTE* v179; // r11
	UINT64 v180; // r9
	UINT64 v181; // r8
	BYTE v182; // r10
	UINT32 v183; // eax
	INT32 v184; // ecx
	UINT32 v185; // edx
	INT32 v186; // eax
	BYTE* v187; // r11
	UINT64 v188; // r9
	UINT64 v189; // r8
	BYTE v190; // r10
	UINT32 v191; // eax
	INT32 v192; // ecx
	UINT32 v193; // edx
	INT32 v194; // eax
	BYTE* v195; // r11
	UINT64 v196; // r9
	BYTE v197; // r10
	UINT32 v198; // eax
	INT32 v199; // ecx
	UINT64 v200; // r8
	UINT32 v201; // edx
	INT32 v202; // eax
	BYTE* v203; // r11
	UINT64 v204; // r9
	UINT64 v205; // r8
	BYTE v206; // r10
	UINT32 v207; // eax
	INT32 v208; // ecx
	UINT32 v209; // edx
	INT32 v210; // eax
	BYTE* v211; // r11
	UINT64 v212; // r9
	UINT64 v213; // r8
	BYTE v214; // r10
	UINT32 v215; // eax
	INT32 v216; // ecx
	UINT32 v217; // edx
	INT32 v218; // eax
	BYTE* v219; // r11
	UINT64 v220; // r9
	UINT64 v221; // r8
	BYTE v222; // r10
	UINT32 v223; // eax
	INT32 v224; // ecx
	UINT32 v225; // edx
	INT32 v226; // eax
	BYTE* v227; // r11
	UINT64 v228; // r9
	BYTE v229; // r10
	UINT32 v230; // eax
	INT32 v231; // ecx
	UINT64 v232; // r8
	UINT32 v233; // edx
	INT32 v234; // eax
	BYTE* v235; // r11
	UINT64 v236; // r9
	BYTE v237; // r10
	UINT32 v238; // eax
	INT32 v239; // ecx
	UINT64 v240; // r8
	UINT32 v241; // edx
	INT32 v242; // eax
	BYTE* v243; // r11
	UINT64 v244; // r9
	UINT64 v245; // r8
	BYTE v246; // r10
	UINT32 v247; // eax
	INT32 v248; // ecx
	UINT32 v249; // edx
	INT32 v250; // eax
	BYTE* v251; // r11
	UINT64 v252; // r9
	BYTE v253; // r10
	UINT32 v254; // eax
	INT32 v255; // ecx
	UINT64 v256; // r8
	UINT32 v257; // edx
	INT32 v258; // eax
	BYTE* v259; // r11
	UINT64 v260; // r9
	UINT64 v261; // r8
	BYTE v262; // r10
	UINT32 v263; // eax
	INT32 v264; // ecx
	UINT32 v265; // edx
	INT32 v266; // eax
	BYTE* v267; // r11
	UINT64 v268; // r9
	UINT64 v269; // r8
	BYTE v270; // r10
	UINT32 v271; // eax
	INT32 v272; // ecx
	UINT32 v273; // edx
	INT32 v274; // eax
	BYTE* v275; // r11
	UINT64 v276; // r9
	BYTE v277; // r10
	UINT32 v278; // eax
	INT32 v279; // ecx
	UINT64 v280; // r8
	UINT32 v281; // edx
	INT32 v282; // eax

#pragma endregion

	if ((*str & 0xC0) != 0x80) {
		return str; // not encrypted
	}

	tmp = reinterpret_cast<UINT8*>(str);
	switch (*tmp) {
	case 0x80:
	{
		// mark as decrypted
		*tmp = -97;
		UINT32 v = 0x98324306;
		UINT8 l = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v144 = tmp + 2;
		do {
			v *= encryptiontable[314 * (v % 5) + l % 0x11Cu];
			if (*v144 != (BYTE)v + 6)
				*v144 ^= (BYTE)v + 6;
			++l;
			++v144;
		} while (l < tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	}
	case 0x81:
		*tmp = -97;
		v107 = 1192577426;
		v108 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v109 = tmp + 2;
		do
		{
			v107 *= encryptiontable[314 * (v108 & 1) + v107 % 0x1F];
			if (*v109 != (BYTE)v107 - 110)
				*v109 ^= (BYTE)v107 - 110;
			++v108;
			++v109;
		} while (v108 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x82:
		*tmp = -123;
		v187 = tmp + 1;
		v188 = 0i64;
		v189 = 0i64;
		v190 = 0;
		v191 = 218608806;
		v192 = 0x53163A67;
		do
		{
			if (v191 > 0x7FB53D90)
			{
				switch (v191)
				{
				case 0x80AF792C:
					v188 = 0xD69F1AECFC0104E1ui64;
					v192 = 326524455;
					break;
				case 0xA5FAD7F3:
					v188 = 0xDA88B969AF46AC5Aui64;
					v192 = 0x181975E;
					break;
				case 0xABD3B79F:
					v188 = 0x309602DB293AE501i64;
					v192 = 0xE2B6203D;
					break;
				case 0xEB3ADD8B:
					v188 = 0xD27DAC006D6B6282ui64;
					v192 = 0xC311EE8;
					break;
				}
			}
			else
			{
				switch (v191)
				{
				case 0x7FB53D90u:
					v188 = 0xD4CD1304F1B8A214ui64;
					v192 = 1307789438;
					break;
				case 0xD07B4A6u:
					v188 = 0xF35E494A4A6EB8D5ui64;
					v192 = -2089080281;
					break;
				case 0x1EFEF6FDu:
					v188 = 0xEBE488FF4D1B694Cui64;
					v192 = -813587758;
					break;
				case 0x3553A1CDu:
					v188 = 0xDFD8EADCE032838Dui64;
					v192 = 254862942;
					break;
				case 0x38949B9Eu:
					v188 = 0xD7DF0220F66F8B0Dui64;
					v192 = 1760772542;
					break;
				case 0x452BBC2Au:
					v188 = 0x3A8F8114A5BD6AA0i64;
					v192 = 910526340;
					break;
				}
			}
			v191 ^= v192;
		} while (v191 != -1904435583);
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v187)
			goto LABEL_1404;
		while (1)
		{
			v193 = 185626608;
			v194 = 1261066421;
			do
			{
				if (v193 > 0x74AE5375)
				{
					if (v193 > 0xAB2B49FF)
					{
						switch (v193)
						{
						case 0xAFD5E87A:
							v188 -= 0x5EAC4676311BAC98i64;
							v194 = 1590342753;
							goto LABEL_614;
						case 0xE04E8280:
							v189 = 0x94D049BB133111EBui64 * ((v189 >> 27) ^ v189);
							v194 = 2121162081;
							break;
						case 0xE5EAC127:
							++v187;
							v194 = -1520594256;
							break;
						case 0xF51851FF:
							v189 = 0xFCF9E8A94976D35i64 * ((v189 >> 55) ^ v189);
							v194 = 278795321;
							break;
						}
					}
					else
					{
						switch (v193)
						{
						case 0xAB2B49FF:
							v189 = 0x97FA81EAD5E0B8i64 * ((v189 >> 30) ^ v189);
							v194 = 73429371;
							break;
						case 0x7678A3EFu:
							v190 = (v189 ^ (v189 >> 31)) & 0xFF;
							v194 = 1722729050;
							break;
						case 0x89827B8A:
							v188 += 0x475CF94BE71A15i64;
							v194 = 1726835370;
							goto LABEL_614;
						case 0x936108D4:
							*v187 = RotateRight8(*v187, v190);
							v194 = 1988872691;
							break;
						case 0x96CB40A4:
							v188 -= 0x40A7B892E31B1A47i64;
							v194 = 5133331;
						LABEL_614:
							v189 = v188;
							break;
						case 0x9E20DFE1:
							v190 = (v189 ^ (v189 >> 31)) & 0xFF;
							v194 = 222418741;
							break;
						}
					}
				}
				else
				{
					if (v193 == 1957581685)
					{
						v189 = 0x9E3779B97F4A7C15ui64 * ((v189 >> 27) ^ v189);
						v194 = 428364308;
						goto LABEL_615;
					}
					if (v193 <= 0x2B732A12)
					{
						switch (v193)
						{
						case 0x2B732A12u:
							v189 = 0xBF58476D1CE4E5B9ui64 * ((v189 >> 30) ^ v189);
							v194 = -885151598;
							goto LABEL_615;
						case 0x29D6D22u:
							--v187;
							v194 = 93749231;
							goto LABEL_615;
						case 0x445D9DCu:
							v190 = (v189 ^ (v189 >> 60)) & 5;
							v194 = 1907878313;
							goto LABEL_615;
						case 0x5A9B2C7u:
							*v187 = RotateLeft8(*v187, v190);
							v194 = 1467468906;
							goto LABEL_615;
						}
						if (v193 != 185626608)
							goto LABEL_615;
						v188 -= 0x61C8864680B583EBi64;
						v194 = 543376866;
						goto LABEL_614;
					}
					switch (v193)
					{
					case 0x39E6C183u:
						v189 = 0x9A4BCE6548F94EBi64 * ((v189 >> 27) ^ v189);
						v194 = -1949240942;
						break;
					case 0x3E1B27F4u:
						v189 = 0x94D049BB133111EBui64 * ((v189 >> 30) ^ v189);
						v194 = -1725158211;
						break;
					case 0x41D0ED29u:
						v190 = (v189 ^ (v189 >> 31)) & 0x14;
						v194 = 84758084;
						break;
					case 0x597BF68Au:
						v189 = 0xCC6EFC216F36F56Fui64 * ((v189 >> 61) ^ v189);
						v194 = -1646253141;
						break;
					}
				}
			LABEL_615:
				v193 ^= v194;
			} while (v193 != 1085756311);
			if (!*v187)
				goto LABEL_1403;
		}
	case 0x83:
		*tmp = -97;
		v10 = 877228565;
		v11 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v12 = tmp + 2;
		do
		{
			v10 -= encryptiontable[314 * (v11 % 0xAu) + v10 % 0x8B];
			if (*v12 != ((unsigned __int8)v10 ^ 0x15))
				*v12 ^= (unsigned __int8)v10 ^ 0x15;
			++v11;
			++v12;
		} while (v11 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x84:
		*tmp = -123;
		v211 = tmp + 1;
		v212 = 0i64;
		v213 = 0i64;
		v214 = 0;
		v215 = -369391952;
		v216 = -296921319;
		do
		{
			if (v215 > 0x5EFDC197)
			{
				switch (v215)
				{
				case 0x90CE51AC:
					v212 = 0xBAC4FDA10679FF74ui64;
					v216 = 156213431;
					break;
				case 0xA9FAB451:
					v212 = 0x51BCC832F0789D4Di64;
					v216 = 263644581;
					break;
				case 0xDE5AFD96:
					v212 = 0x34260CC9B0F8FA0Bi64;
					v216 = -1819813919;
					break;
				case 0xE9FB86B0:
					v212 = 0xF00C425F77C65810ui64;
					v216 = 92325169;
					break;
				}
			}
			else
			{
				switch (v215)
				{
				case 0x5EFDC197u:
					v212 = 0x6656B11AAF386161i64;
					v216 = 1909105453;
					break;
				case 0x71BF9C5u:
					v212 = 0xB0AA9F99710DDEEi64;
					v216 = -991086494;
					break;
				case 0xE6CBC1Fu:
					v212 = 0xBCB77D5E969D648Aui64;
					v216 = -313265700;
					break;
				case 0xE939891u:
					v212 = 0xBC1A8422EFD65D28ui64;
					v216 = -47736673;
					break;
				case 0xF9B5121u:
					v212 = 0xBFC06F013B1FAD39ui64;
					v216 = 734388819;
					break;
				case 0x3F8E1456u:
					v212 = 0xBCA3D97183D8A2CDui64;
					v216 = -1242461100;
					break;
				}
			}
			v215 ^= v216;
		} while (v215 != -327466111);
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v211)
			goto LABEL_1404;
		do
		{
			v217 = -1228277798;
			v218 = -1599212872;
			do
			{
				if (v217 > 0x534F2566)
				{
					if (v217 > 0xC515362C)
					{
						switch (v217)
						{
						case 0xDC387BED:
							v213 = 0x2FE0458AF4921DF8i64 * ((v213 >> 27) ^ v213);
							v218 = 1693343965;
							break;
						case 0xEA5C6FDA:
							*v211 = RotateLeft8(*v211, v214);
							v218 = 140108213;
							break;
						case 0xEF82401C:
							--v211;
							v218 = 2002357562;
							break;
						case 0xEFEB8C23:
							v213 = 0x13E5AFEBD866D65i64 * ((v213 >> 31) ^ v213);
							v218 = 783392409;
							break;
						}
					}
					else
					{
						switch (v217)
						{
						case 0xC515362C:
							v213 = 0x3DD2AAFADCF688AAi64 * ((v213 >> 30) ^ v213);
							v218 = -717284540;
							break;
						case 0x61D58B50u:
							*v211 = RotateRight8(*v211, v214);
							v218 = 1569366939;
							break;
						case 0x70DD7C19u:
							v212 -= 0x40A7B892E31B1A47i64;
							v213 = v212;
							v218 = -1874865767;
							break;
						case 0x7AEBD8E9u:
							v214 = (v213 ^ (v213 >> 31)) & 0xFF;
							v218 = 457069497;
							break;
						case 0xB6C9F7DA:
							v212 -= 0x61C8864680B583EBi64;
							v213 = v212;
							v218 = -157831402;
							break;
						}
					}
				}
				else if (v217 == 1397695846)
				{
					v214 = (v213 ^ (v213 >> 31)) & 0xFF;
					v218 = -1956829189;
				}
				else if (v217 > 0x1C5A21FD)
				{
					switch (v217)
					{
					case 0x3C5F28CBu:
						++v211;
						v218 = -1279414159;
						break;
					case 0x405E58CCu:
						v213 = 0xBF58476D1CE4E5B9ui64 * ((v213 >> 30) ^ v213);
						v218 = 1520127406;
						break;
					case 0x426FDD45u:
						v213 = 0x94D049BB133111EBui64 * ((v213 >> 30) ^ v213);
						v218 = 1286774411;
						break;
					case 0x51DCC26Bu:
						v214 = (v213 ^ (v213 >> 19)) & 0x14;
						v218 = 170660723;
						break;
					}
				}
				else
				{
					switch (v217)
					{
					case 0x1C5A21FDu:
						v213 = 0x28D7B425E3D2CE9Fi64 * ((v213 >> 3) ^ v213);
						v218 = 736753327;
						break;
					case 0xF7EA8u:
						v214 = (v213 ^ (v213 >> 31)) & 0x2C;
						v218 = -947629968;
						break;
					case 0x92762Eu:
						v212 += 0x3C9D4AB86194C6i64;
						v213 = v212;
						v218 = 1916665181;
						break;
					case 0xDA66AD5u:
						v213 = 0x9E3779B97F4A7C15ui64 * ((v213 >> 27) ^ v213);
						v218 = 1271354443;
						break;
					case 0xEC72767u:
						v212 += 0x7A22887CF66A6EC9i64;
						v213 = v212;
						v218 = 1375172183;
						break;
					case 0x1AC51562u:
						v213 = 0x94D049BB133111EBui64 * ((v213 >> 27) ^ v213);
						v218 = 1613680011;
						break;
					}
				}
				v217 ^= v218;
			} while (v217 != -1880975174);
		} while (*v211);
		goto LABEL_1403;
	case 0x85:
		goto LABEL_1404;
	case 0x86:
		*tmp = -123;
		v235 = tmp + 1;
		v236 = 0i64;
		v237 = 0;
		v238 = -1300711513;
		v239 = -2001589885;
		do
		{
			if (v238 > 0x75FAA37E)
			{
				switch (v238)
				{
				case 0xB278B7A7:
					v236 = 0x6C6889ED7BB7BA73i64;
					v239 = -1823739519;
					break;
				case 0xBB3F3017:
					v236 = 0x97D8D3B681AB665Fui64;
					v239 = 66481448;
					break;
				case 0xD53D537E:
					v236 = 0xCF691AEECDDB9306ui64;
					v239 = -1907790757;
					break;
				case 0xD5EE6C56:
					v236 = 0xCA9EC43D2866F32Bui64;
					v239 = 216492655;
					break;
				}
			}
			else
			{
				switch (v238)
				{
				case 0x75FAA37Eu:
					v236 = 0x2829E9E579272274i64;
					v239 = -731599740;
					break;
				case 0x3BF4727u:
					v236 = 0xCFC1DCB7DF1DDEE8ui64;
					v239 = 372637118;
					break;
				case 0xE2512E2u:
					v236 = 0xBC22336168E26BB6ui64;
					v239 = 1062875573;
					break;
				case 0x12943B6Eu:
					v236 = 0x148A90DB84FB3809i64;
					v239 = -476783632;
					break;
				case 0x6F37875Fu:
					v236 = 0x50B96C371D70FBFEi64;
					v239 = 909090814;
					break;
				case 0x74101C76u:
					v236 = 0x623B25C7F454B604i64;
					v239 = 775678230;
					break;
				}
			}
			v238 ^= v239;
		} while (v238 != 557008422);
		v240 = 0i64;
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v235)
			goto LABEL_1404;
		while (1)
		{
			v241 = 1703836626;
			v242 = 1436658126;
			do
			{
				if (v241 > 0x7032AA2E)
				{
					if (v241 > 0xC4A969B7)
					{
						switch (v241)
						{
						case 0xC53727A8:
							v242 = -325113584;
							goto LABEL_1043;
						case 0xCAF4E0B0:
							v240 = 0x9E3779B97F4A7C15ui64 * ((v240 >> 27) ^ v240);
							v242 = -1247330570;
							break;
						case 0xE0F8C9C4:
							v237 = (v240 ^ (v240 >> 31)) & 0x1B;
							v242 = 792303859;
							break;
						case 0xF9DFD8ED:
							v237 = (v240 ^ (v240 >> 29)) & 0x2F;
							v242 = -7497192;
							break;
						}
					}
					else
					{
						switch (v241)
						{
						case 0xC4A969B7:
							v240 = 0xBF58476D1CE4E5B9ui64 * ((v240 >> 30) ^ v240);
							v242 = 111602011;
							break;
						case 0x732C9CBEu:
							v240 = 0x89106746A37DBE53ui64 * ((v240 >> 27) ^ v240);
							v242 = -1061279527;
							break;
						case 0x7551B6CEu:
							v240 = 0x94D049BB133111EBui64 * ((v240 >> 30) ^ v240);
							v242 = -146258781;
							break;
						case 0xB0199BBE:
							--v235;
							v242 = 1082224843;
							break;
						case 0xC20F80EC:
							v240 = 0x94D049BB133111EBui64 * ((v240 >> 27) ^ v240);
							v242 = 121153348;
							break;
						}
					}
				}
				else
				{
					if (v241 == 1882368558)
					{
						v236 -= 0x40A7B892E31B1A47i64;
						v240 = v236;
						v242 = -784900227;
						goto LABEL_1044;
					}
					if (v241 > 0x47E61AC1)
					{
						switch (v241)
						{
						case 0x4BEB79C4u:
							v240 = 0x2ECDF81DD075E1i64 * ((v240 >> 33) ^ v240);
							v242 = 1474719425;
							break;
						case 0x52CBBEBEu:
							v236 += 0x392484BD5A5DB79i64;
							v240 = v236;
							v242 = -1188580042;
							break;
						case 0x57F080EBu:
							v240 = 0x2BA416D6D345338i64 * ((v240 >> 30) ^ v240);
							v242 = 1630518589;
							break;
						case 0x658E7BD2u:
							v236 -= 0x61C8864680B583EBi64;
							v240 = v236;
							v242 = -1591274907;
							break;
						}
					}
					else
					{
						switch (v241)
						{
						case 0x47E61AC1u:
							*v235 = RotateLeft8(*v235, v237);
							v242 = -1440194417;
							break;
						case 0x2E7A42Cu:
							v236 -= 0x192F43C2160A7C3Ci64;
							v240 = v236;
							v242 = -1788303736;
							break;
						case 0x5AE2E88u:
							v242 = -155807681;
						LABEL_1043:
							v237 = (v240 ^ (v240 >> 31)) & 0xFF;
							break;
						case 0x138DD8BBu:
							v240 = 0x8764CD5FA85B6BE9ui64 * ((v240 >> 7) ^ v240);
							v242 = 2076692857;
							break;
						case 0x29A80EB8u:
							*v235 = RotateRight8(*v235, v237);
							v242 = 110304167;
							break;
						case 0x2F3B151Fu:
							++v235;
							v242 = 1339097004;
							break;
						}
					}
				}
			LABEL_1044:
				v241 ^= v242;
			} while (v241 != 1626073779);
			if (!*v235)
				goto LABEL_1403;
		}
	case 0x87:
		*tmp = -97;
		v51 = 1214813561;
		v52 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v53 = tmp + 2;
		do
		{
			v51 ^= encryptiontable[314 * (v52 % 5u) + v51 % 0xA1];
			if (*v53 != (BYTE)((BYTE)v51 + 121))
				*v53 ^= (BYTE)((BYTE)v51 + 121);
			++v52;
			++v53;
		} while (v52 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x88:
		*tmp = -97;
		v93 = 57;
		v94 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v95 = tmp + 2;
		do
		{
			v93 += v94;
			if (*v95 != (BYTE) (57 * v93))
				*v95 ^= (BYTE)(57 * v93);
			++v94;
			++v95;
		} while (v94 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x89:
		*tmp = -123;
		v275 = tmp + 1;
		v276 = 0i64;
		v277 = 0;
		v278 = -295069671;
		v279 = 875065992;
		do
		{
			if (v278 > 0xB732AD85)
			{
				switch (v278)
				{
				case 0xB77AB6C9:
					v276 = 0x85C61E2D668A175Aui64;
					v279 = -718627360;
					break;
				case 0xDCA8EC2C:
					v276 = 0x143D88AE1AC60691i64;
					v279 = 633480464;
					break;
				case 0xEC7A8669:
					v276 = 0x75753EC6D571E718i64;
					v279 = -1623864348;
					break;
				case 0xEE699819:
					v276 = 0x839990996A1F5F92ui64;
					v279 = -1182273405;
					break;
				}
			}
			else
			{
				switch (v278)
				{
				case 0xB732AD85:
					v276 = 0x4410474CAC130C6Di64;
					v279 = -1145730794;
					break;
				case 0xADEFF78u:
					v276 = 0x3222888B1C3EB30Ai64;
					v279 = -1808508108;
					break;
				case 0x37B57974u:
					v276 = 0x9F8A6B81EC866542ui64;
					v279 = 2069333708;
					break;
				case 0x4278D51Eu:
					v276 = 0x1C7153BC56FB8002i64;
					v279 = 1340068599;
					break;
				case 0x746185B7u:
					v276 = 0x1C296396CD829958i64;
					v279 = 1242915431;
					break;
				case 0x837C3DB1:
					v276 = 0x8B431138C3CA6B49ui64;
					v279 = 373732654;
					break;
				}
			}
			v278 ^= v279;
		} while (v278 != 1475242138);
		v280 = 0i64;
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v275)
			goto LABEL_1404;
		while (1)
		{
			v281 = -236118488;
			v282 = 1340883610;
			do
			{
				if (v281 > 0x609F709F)
				{
					if (v281 > 0xE35CF8C4)
					{
						switch (v281)
						{
						case 0xEDE03B66:
							v276 -= 0x40A7B892E31B1A47i64;
							v282 = -880648143;
							goto LABEL_1400;
						case 0xF06F0917:
							v280 = 0xBF58476D1CE4E5B9ui64 * ((v280 >> 30) ^ v280);
							v282 = -428512143;
							break;
						case 0xF1ED1E28:
							v276 -= 0x61C8864680B583EBi64;
							v282 = 25302847;
							goto LABEL_1400;
						case 0xF7CF6570:
							v280 = 0x9E3779B97F4A7C15ui64 * ((v280 >> 27) ^ v280);
							v282 = 1060631542;
							break;
						case 0xFA88A668:
							v280 = 0xD0AB7B1EA25B4B21ui64 * ((v280 >> 1) ^ v280);
							v282 = 113080429;
							break;
						}
					}
					else
					{
						switch (v281)
						{
						case 0xE35CF8C4:
							v280 = 0x94D049BB133111EBui64 * ((v280 >> 30) ^ v280);
							v282 = 176565023;
							break;
						case 0x6DD4F5B7u:
							*v275 = RotateRight8(*v275, v277);
							v282 = -1163701091;
							break;
						case 0x93F073A8:
							v277 = (v280 ^ (v280 >> 31)) & 0xFF;
							v282 = -2124519492;
							break;
						case 0xA6EFE66F:
							v277 = 0;
							v282 = 180514773;
							break;
						case 0xC06A2338:
							v276 -= 0x4073D30D54675A85i64;
							v282 = 99640567;
							goto LABEL_1400;
						case 0xD777A12A:
							++v275;
							v282 = 1099332403;
							break;
						}
					}
				}
				else
				{
					if (v281 == 1621061791)
					{
						v277 = (v280 ^ (v280 >> 31)) & 0xFF;
						v282 = 223053096;
						goto LABEL_1401;
					}
					if (v281 > 0xFFB2772)
					{
						switch (v281)
						{
						case 0x161A6566u:
							v280 = 0x94D049BB133111EBui64 * ((v280 >> 27) ^ v280);
							v282 = 1988433401;
							break;
						case 0x27997CB2u:
							v280 = 0xA69F69346A1C28i64 * ((v280 >> 30) ^ v280);
							v282 = -1900897660;
							break;
						case 0x2B2C3556u:
							v280 = 0xDA95F7A378E610CBui64 * ((v280 >> 8) ^ v280);
							v282 = -779176918;
							break;
						}
					}
					else
					{
						switch (v281)
						{
						case 0xFFB2772u:
							v280 = 0xE346CC3FDB0EFAFi64 * ((v280 >> 27) ^ v280);
							v282 = 666406492;
							break;
						case 0x79162Bu:
							--v275;
							v282 = -354932106;
							break;
						case 0x8FE7F21u:
							v276 -= 0x1D40218811B57BA7i64;
							v282 = 1029255964;
						LABEL_1400:
							v280 = v276;
							break;
						case 0x9DB6799u:
							*v275 = RotateLeft8(*v275, v277);
							v282 = -456204701;
							break;
						case 0xEAF2E71u:
							v277 = (v280 ^ (*((BYTE*)&(v280)+1))) & 0xC;
							v282 = 166412699;
							break;
						}
					}
				}
			LABEL_1401:
				v281 ^= v282;
			} while (v281 != -1762534887);
			if (!*v275)
				goto LABEL_1403;
		}
	case 0x8A:
		*tmp = -97;
		v110 = 25;
		v111 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v112 = tmp + 2;
		do
		{
			v110 ^= v111;
			v113 = RotateLeft8(*v112, v110);
			*v112 = v113;
			if (v113 != v110 + 25)
				*v112 = (v110 + 25) ^ v113;
			++v111;
			++v112;
		} while (v111 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x8B:
		*tmp = -97;
		v82 = 841107494;
		v83 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v84 = tmp + 2;
		do
		{
			v82 -= encryptiontable[314 * (v83 & 3) + v82 % 0x5D];
			if (*v84 != (BYTE)(38 - (BYTE)v82))
				*v84 ^= (BYTE)(38 - (BYTE)v82);
			++v83;
			++v84;
		} while (v83 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x8C:
		*tmp = -123;
		v179 = tmp + 1;
		v180 = 0i64;
		v181 = 0i64;
		v182 = 0;
		v183 = -327457874;
		v184 = 1310810916;
		do
		{
			if (v183 > 0x926AC660)
			{
				switch (v183)
				{
				case 0x93E6B7AD:
					v180 = 0xA93318AFEDC54AE5ui64;
					v184 = 56019942;
					break;
				case 0xA3816C13:
					v180 = 0x6647E36616293CBEi64;
					v184 = 94003697;
					break;
				case 0xDF19138C:
					v180 = 0x8299E710DFE9F1B3ui64;
					v184 = -1680523446;
					break;
				case 0xEC7B63AE:
					v180 = 0xB4A57B0F6DEDABEDui64;
					v184 = 248420077;
					break;
				}
			}
			else
			{
				switch (v183)
				{
				case 0x926AC660:
					v180 = 0x6CC064E7F73BF58Di64;
					v184 = -1704521100;
					break;
				case 0x990ED23u:
					v180 = 0x80EA3E82952923D8ui64;
					v184 = 1571834853;
					break;
				case 0x20481056u:
					v180 = 0xF186756D4AE33F82ui64;
					v184 = -315354280;
					break;
				case 0x2D33AE70u:
					v180 = 0x37B4EEE1F7FD577Ai64;
					v184 = 959861758;
					break;
				case 0x3A9B6DBEu:
					v180 = 0xA0122EE995C182C0ui64;
					v184 = -1842114194;
					break;
				case 0x5B4150D3u:
					v180 = 0x8F00728AE0AEBC42ui64;
					v184 = 1831516122;
					break;
				}
			}
			v183 ^= v184;
		} while (v183 != -491391677);
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v179)
			goto LABEL_1404;
		do
		{
			v185 = 34765072;
			v186 = 1575610663;
			do
			{
				if (v185 > 0x48847CB4)
				{
					if (v185 > 0x879791B6)
					{
						switch (v185)
						{
						case 0xCDB9D4C0:
							v181 = 0x70C419A196A46i64 * ((v181 >> 27) ^ v181);
							v186 = -103935700;
							break;
						case 0xE8595B1B:
							v181 = 0x9E3779B97F4A7C15ui64 * ((v181 >> 27) ^ v181);
							v186 = -846900694;
							break;
						case 0xF017B698:
							v182 = (v181 ^ (v181 >> 31)) & 0xFF;
							v186 = -1558782012;
							break;
						case 0xF087A6E4:
							v181 = 0x8E125E03963E75Ai64 * ((v181 >> 30) ^ v181);
							v186 = -650890143;
							break;
						}
					}
					else
					{
						switch (v185)
						{
						case 0x879791B6:
							v181 = 0x94D049BB133111EBui64 * ((v181 >> 30) ^ v181);
							v186 = -1669440401;
							break;
						case 0x5301695Cu:
							*v179 = RotateRight8(*v179, v182);
							v186 = -752899722;
							break;
						case 0x721A668Du:
							*v179 = RotateLeft8(*v179, v182);
							v186 = -710150247;
							break;
						case 0x72875891u:
							v181 = 0x6367D22EC256B56Fi64 * (HIBYTE(v181) ^ v181);
							v186 = 2022597659;
							break;
						case 0x801EC02A:
							++v179;
							v186 = 443303894;
							break;
						}
					}
				}
				else if (v185 == 1216642228)
				{
					v182 = (v181 ^ (v181 >> 5)) & 8;
					v186 = -488155668;
				}
				else if (v185 > 0xA634F0B)
				{
					switch (v185)
					{
					case 0x121CCCBDu:
						v180 -= 0x40A7B892E31B1A47i64;
						v181 = v180;
						v186 = -193812080;
						break;
					case 0x23CE5951u:
						v182 = (v181 ^ (v181 >> 31)) & 7;
						v186 = 830391099;
						break;
					case 0x2FC6ADFCu:
						v181 = 0xBF58476D1CE4E5B9ui64 * ((v181 >> 30) ^ v181);
						v186 = 641149997;
						break;
					case 0x34248926u:
						--v179;
						v186 = 231729590;
						break;
					}
				}
				else
				{
					switch (v185)
					{
					case 0xA634F0Bu:
						v180 += 0xCA6A7AE3A78C963i64;
						v181 = v180;
						v186 = -1865394220;
						break;
					case 0x1117350u:
						v180 -= 0x519498B2A9C663D8i64;
						v181 = v180;
						v186 = 1104409930;
						break;
					case 0x2127910u:
						v180 -= 0x61C8864680B583EBi64;
						v181 = v180;
						v186 = 768922860;
						break;
					case 0x45EC5E9u:
						v181 = 0x796FAD2692C36DD1i64 * ((v181 >> 14) ^ v181);
						v186 = 109667540;
						break;
					case 0x968E438u:
						v182 = (v181 ^ (v181 >> 31)) & 0xFF;
						v186 = -340368100;
						break;
					case 0x9F181D1u:
						v181 = 0x94D049BB133111EBui64 * ((v181 >> 27) ^ v181);
						v186 = -102353079;
						break;
					}
				}
				v185 ^= v186;
			} while (v185 != -1703770116);
		} while (*v179);
		goto LABEL_1403;
	case 0x8D:
		*tmp = -123;
		v267 = tmp + 1;
		v268 = 0i64;
		v269 = 0i64;
		v270 = 0;
		v271 = 133269839;
		v272 = 144814865;
		do
		{
			if (v271 > 0xCB29569)
			{
				switch (v271)
				{
				case 0x3EF5FA3Cu:
					v268 = 0x660D953513524424i64;
					v272 = 1552203367;
					break;
				case 0x4294FD64u:
					v268 = 0xBE2AC4E25ABCC8FEui64;
					v272 = 58496283;
					break;
				case 0x4A2921B4u:
					v268 = 0x7CD63C1266A3A045i64;
					v272 = -361393360;
					break;
				case 0xB5C44298:
					v268 = 0x21E64AC6EAF557D1i64;
					v272 = -44035289;
					break;
				}
			}
			else
			{
				switch (v271)
				{
				case 0xCB29569u:
					v268 = 0x9BF94065A4C67334ui64;
					v272 = 880105167;
					break;
				case 0x226D291u:
					v268 = 0x719658B770908159i64;
					v272 = 73621989;
					break;
				case 0x36C792Du:
					v268 = 0xB246ADDFA2A9BC3Eui64;
					v272 = -1758366623;
					break;
				case 0x3D70F67u:
					v268 = 0x19FEFD45212556A6i64;
					v272 = -1276100680;
					break;
				case 0x7F1894Fu:
					v268 = 0xAACCB8377A4707FFui64;
					v272 = -92473948;
					break;
				case 0x858426Au:
					v268 = 0xBC1549DE370D2221ui64;
					v272 = 1504783896;
					break;
				}
			}
			v271 ^= v272;
		} while (v271 != -41059093);
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v267)
			goto LABEL_1404;
		do
		{
			v273 = -1016325155;
			v274 = 1634782560;
			do
			{
				if (v273 > 0x4BD811D3)
				{
					if (v273 > 0x7C537499)
					{
						switch (v273)
						{
						case 0x9DDE9EAA:
							v268 -= 0x40A7B892E31B1A47i64;
							v274 = 1343691222;
							goto LABEL_1328;
						case 0xC36C1BDD:
							v268 -= 0x61C8864680B583EBi64;
							v274 = 652691002;
							goto LABEL_1328;
						case 0xE58B5DE7:
							v269 = 0xBF58476D1CE4E5B9ui64 * ((v269 >> 30) ^ v269);
							v274 = -1667436692;
							break;
						case 0xEA9966A5:
							v269 = 0x94D049BB133111EBui64 * ((v269 >> 30) ^ v269);
							v274 = -424689120;
							break;
						}
					}
					else
					{
						switch (v273)
						{
						case 0x7C537499u:
							v270 = (v269 ^ (v269 >> 31)) & 0xFF;
							v274 = 927331972;
							break;
						case 0x5888C983u:
							v270 = (v269 ^ (v269 >> 31)) & 0xFF;
							v274 = 129244443;
							break;
						case 0x6C41CFF4u:
							--v267;
							v274 = 139217463;
							break;
						case 0x6F9855DBu:
							v269 = 0x8A6AA525DA32605Aui64 * ((v269 >> 47) ^ v269);
							v274 = 98445049;
							break;
						case 0x7917B28Bu:
							v269 = 0x94D049BB133111EBui64 * ((v269 >> 27) ^ v269);
							v274 = 88393234;
							break;
						}
					}
				}
				else
				{
					if (v273 == 1272451539)
					{
						++v267;
						v274 = -431164642;
						goto LABEL_1329;
					}
					if (v273 <= 0x1745ABFA)
					{
						if (v273 == 390441978)
						{
							v268 += 0x935281AA2C40F77i64;
							v274 = 471765340;
						}
						else
						{
							if (v273 != 1471243)
							{
								switch (v273)
								{
								case 0x2D22E98u:
									v269 = 0x2D2A70D73480ADD1i64 * ((v269 >> 27) ^ v269);
									v274 = -2083037378;
									break;
								case 0x3EF0727u:
									*v267 = RotateLeft8(*v267, v270);
									v274 = 659959078;
									break;
								case 0xA840283u:
									v270 = (v269 ^ (v269 >> 44)) & 0x1E;
									v274 = -1739481509;
									break;
								case 0xB074E17u:
									v269 = 0x9E3779B97F4A7C15ui64 * ((v269 >> 27) ^ v269);
									v274 = 442908602;
									break;
								}
								goto LABEL_1329;
							}
							v268 += 0x51DC76113650DACEi64;
							v274 = -843451799;
						}
					LABEL_1328:
						v269 = v268;
						goto LABEL_1329;
					}
					switch (v273)
					{
					case 0x1DDCCAFDu:
						v269 = 0x3E4A3E8874C87A3Fi64 * ((v269 >> 30) ^ v269);
						v274 = 241800939;
						break;
					case 0x3A9D59B8u:
						v270 = (v269 ^ (v269 >> 31)) & 0x21;
						v274 = 224221811;
						break;
					case 0x4129D460u:
						v269 = 0x98366755C13E8BA1ui64 * ((v269 >> 52) ^ v269);
						v274 = 2144610294;
						break;
					case 0x4B16821Du:
						*v267 = RotateRight8(*v267, v270);
						v274 = 13538254;
						break;
					}
				}
			LABEL_1329:
				v273 ^= v274;
			} while (v273 != -1382751539);
		} while (*v267);
	LABEL_1403:
		tmp = reinterpret_cast<UINT8*>(str);
	LABEL_1404:
		++tmp;
	case 0x8E:
		*tmp = -97;
		v134 = -2042472607;
		v135 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v136 = tmp + 2;
		do
		{
			v134 += encryptiontable[314 * (v134 & 7) + (v135 & 7)];
			v137 = RotateRight8(*v136, v134);
			*v136 = v137;
			if (v137 != (BYTE)v134 + 97)
				*v136 = v137 ^ (v134 + 97);
			++v135;
			++v136;
		} while (v135 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x8F:
		*tmp = -123;
		v251 = tmp + 1;
		v252 = 0i64;
		v253 = 0;
		v254 = 805185422;
		v255 = -1768147477;
		do
		{
			if (v254 > 0x1CFBFDE1)
			{
				switch (v254)
				{
				case 0x2AE159D7u:
					v252 = 0xFA3E3A3BE7CF6385ui64;
					v255 = 37556892;
					break;
				case 0x2FFE278Eu:
					v252 = 0xF0F151E56813C624ui64;
					v255 = -2043273859;
					break;
				case 0x30F1BD73u:
					v252 = 0x51CD7D616329B4DEi64;
					v255 = 184153964;
					break;
				case 0x3347DBB2u:
					v252 = 0xDA505F66B76AC063ui64;
					v255 = -207622527;
					break;
				}
			}
			else
			{
				switch (v254)
				{
				case 0x1CFBFDE1u:
					v252 = 0xF352CCE3CFCA1E5Bui64;
					v255 = -758681909;
					break;
				case 0x22FBF4Eu:
					v252 = 0xF701CA7A2E97BDE4ui64;
					v255 = 257045634;
					break;
				case 0x3A5C964u:
					v252 = 0xFC21613686467636ui64;
					v255 = 1871507755;
					break;
				case 0x7725DEAu:
					v252 = 0x70E1DAA88E9BA060i64;
					v255 = -1189096117;
					break;
				case 0x7DE844Bu:
					v252 = 0x575718E46F120BF3i64;
					v255 = 756202381;
					break;
				case 0x8FB639Bu:
					v252 = 0x4C8C552D6600F782i64;
					v255 = -626885979;
					break;
				}
			}
			v254 ^= v255;
		} while (v254 != -1446495501);
		v256 = 0i64;
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v251)
			goto LABEL_1404;
		do
		{
			v257 = 895582912;
			v258 = -706890870;
			do
			{
				if (v257 > 0x531EE8EC)
				{
					if (v257 > 0xCAC488E1)
					{
						switch (v257)
						{
						case 0xD6B8793B:
							*v251 = RotateRight8(*v251, v253);
							v258 = 1251061496;
							break;
						case 0xD7406F51:
							v256 = 0x94D049BB133111EBui64 * ((v256 >> 30) ^ v256);
							v258 = 832037800;
							break;
						case 0xE13B18EE:
							v256 = 0x58BBCB1E4DD17A8i64 * ((v256 >> 11) ^ v256);
							v258 = 1851593817;
							break;
						case 0xEEBF704D:
							v256 = 0x94D049BB133111EBui64 * ((v256 >> 27) ^ v256);
							v258 = 1647866385;
							break;
						case 0xF96BEE6F:
							v253 = (v256 ^ (v256 >> 31)) & 0xFF;
							v258 = -980557513;
							break;
						}
					}
					else
					{
						switch (v257)
						{
						case 0xCAC488E1:
							v256 = 0x9E3779B97F4A7C15ui64 * ((v256 >> 27) ^ v256);
							v258 = -1199047839;
							break;
						case 0x7D25D228u:
							--v251;
							v258 = -454722120;
							break;
						case 0x839AA356:
							v253 = (v256 ^ (v256 >> 31)) & 0xF;
							v258 = -673914329;
							break;
						case 0x88F6EBD2:
							v256 = 0x9217DCBCDCC661B8ui64 * ((v256 >> 30) ^ v256);
							v258 = 1714799908;
							break;
						case 0x8C87025C:
							v253 = (v256 ^ (v256 >> 31)) & 0xFF;
							v258 = 1514109799;
							break;
						case 0x9C29D7C3:
							++v251;
							v258 = 191800300;
							break;
						}
					}
				}
				else if (v257 == 1394534636)
				{
					*v251 = RotateLeft8(*v251, v253);
					v258 = 1960981833;
				}
				else if (v257 > 0x2DCB4CB9)
				{
					switch (v257)
					{
					case 0x356182C0u:
						v252 -= 0x61C8864680B583EBi64;
						v256 = v252;
						v258 = 2131828002;
						break;
					case 0x4A709FE2u:
						v256 = 0xBF58476D1CE4E5B9ui64 * ((v256 >> 30) ^ v256);
						v258 = -1529876561;
						break;
					case 0x4EE42156u:
						v252 += 0x4046798556A752Ci64;
						v256 = v252;
						v258 = 822053448;
						break;
					}
				}
				else
				{
					switch (v257)
					{
					case 0x2DCB4CB9u:
						v252 -= 0x5648C235C0A9827i64;
						v256 = v252;
						v258 = 82109106;
						break;
					case 0x82D2DD6u:
						v252 -= 0x40A7B892E31B1A47i64;
						v256 = v252;
						v258 = 39384178;
						break;
					case 0xDC8861Fu:
						v256 = 0x73C72202BE03D99i64 * ((v256 >> 14) ^ v256);
						v258 = 1763230035;
						break;
					case 0xE97C4FBu:
						v256 = 0xB79B4D15249BFDCi64 * ((v256 >> 27) ^ v256);
						v258 = 1288745846;
						break;
					case 0x2981EA92u:
						v253 = (v256 ^ (v256 >> 14)) & 0x2E;
						v258 = -548814959;
						break;
					}
				}
				v257 ^= v258;
			} while (v257 != -1756924881);
		} while (*v251);
		goto LABEL_1403;
	case 0x91:
		*tmp = -97;
		v114 = -2124904183;
		v115 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v116 = tmp + 2;
		do
		{
			v114 *= encryptiontable[314 * (v114 % 3) + v115 % 0x9Du];
			v117 = RotateLeft8(*v116, v114);
			*v116 = v117;
			if (v117 != (BYTE)(9 * (BYTE)v114))
				*v116 = (BYTE)(9 * v114) ^ v117;
			++v115;
			++v116;
		} while (v115 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x92:
		*tmp = -97;
		v138 = 66;
		v139 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v140 = tmp + 2;
		do
		{
			v138 ^= v139;
			v141 = RotateLeft8(*v140, v138);
			*v140 = v141;
			if (v141 != v138 + 66)
				*v140 = v141 ^ (v138 + 66);
			++v139;
			++v140;
		} while (v139 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x93:
		*tmp = -123;
		v163 = tmp + 1;
		v164 = 0i64;
		v165 = 0i64;
		v166 = 0;
		v167 = 615469933;
		v168 = -1116427882;
		do
		{
			if (v167 > 0x609BC448)
			{
				switch (v167)
				{
				case 0x6B2571F0u:
					v164 = 0xC98A6D95D8CD935Cui64;
					v168 = -695878575;
					break;
				case 0x6CE114A6u:
					v164 = 0x2434BB494FBB6727i64;
					v168 = 181435451;
					break;
				case 0xA837183C:
					v164 = 0x853278FB35BE9189ui64;
					v168 = 1522357401;
					break;
				case 0xD494798B:
					v164 = 0x28BA48FD415CD57Ei64;
					v168 = -266777813;
					break;
				}
			}
			else
			{
				switch (v167)
				{
				case 0x609BC448u:
					v164 = 0xCF605DBE5E427833ui64;
					v168 = -1125683039;
					break;
				case 0x16D57C2u:
					v164 = 0xD97A12F7E3F607B8ui64;
					v168 = 878131803;
					break;
				case 0x231F139u:
					v164 = 0x1A480B828FCF47A5i64;
					v168 = -1321869703;
					break;
				case 0x11BF7DD0u:
					v164 = 0x246246C6635D8ECAi64;
					v168 = 496196055;
					break;
				case 0x24AF536Du:
					v164 = 0xE18735E5D0C44133ui64;
					v168 = 271471458;
					break;
				case 0x4AB548A2u:
					v164 = 0x2AAA311128CF49FBi64;
					v168 = -531470369;
					break;
				}
			}
			v167 ^= v168;
		} while (v167 != 880869391);
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v163)
			goto LABEL_1404;
		do
		{
			v169 = -1919711802;
			v170 = -995900694;
			do
			{
				if (v169 > 0x6A60D910)
				{
					if (v169 > 0x8ED6CE8C)
					{
						switch (v169)
						{
						case 0xA127A47C:
							--v163;
							v170 = 2132445309;
							break;
						case 0xAE943873:
							v166 = (v165 ^ (v165 >> 31)) & 0xFF;
							v170 = 294756150;
							break;
						case 0xC49EA453:
							v165 = 0x94D049BB133111EBui64 * ((v165 >> 30) ^ v165);
							v170 = 184874635;
							break;
						case 0xFCD1B734:
							++v163;
							v170 = 1507023803;
							break;
						}
					}
					else
					{
						switch (v169)
						{
						case 0x8ED6CE8C:
							v164 -= 0x40A7B892E31B1A47i64;
							v165 = v164;
							v170 = -1927388632;
							break;
						case 0x7CAC016Fu:
							*v163 = RotateRight8(*v163, v166);
							v170 = -2139244965;
							break;
						case 0x8135982D:
							v165 = 0x4410EF71D8E10BBi64 * ((v165 >> 30) ^ v165);
							v170 = 1907792221;
							break;
						case 0x82C7DA4E:
							*v163 = RotateLeft8(*v163, v166);
							v170 = 463121331;
							break;
						case 0x878B9A5B:
							v165 = 0xBF58476D1CE4E5B9ui64 * ((v165 >> 30) ^ v165);
							v170 = -877296419;
							break;
						case 0x8D9385C6:
							v164 -= 0x61C8864680B583EBi64;
							v165 = v164;
							v170 = 169353117;
							break;
						}
					}
				}
				else if (v169 == 1784731920)
				{
					v166 = (v165 ^ (v165 >> 31)) & 0x36;
					v170 = 396067239;
				}
				else if (v169 > 0x29DCE99F)
				{
					switch (v169)
					{
					case 0x4C3E1E86u:
						v165 = 0x94D049BB133111EBui64 * ((v165 >> 27) ^ v165);
						v170 = 720354182;
						break;
					case 0x518884B3u:
						v164 += 0x3D7C68D9BF6F6140i64;
						v165 = v164;
						v170 = 508028609;
						break;
					case 0x585ACDC0u:
						v164 += 0xBCD89B9247F0EFAi64;
						v165 = v164;
						v170 = 440133317;
						break;
					case 0x66D1A500u:
						v166 = v165 ^ (v165 >> 31);
						v170 = 444441711;
						break;
					}
				}
				else
				{
					switch (v169)
					{
					case 0x29DCE99Fu:
						v166 = (v165 ^ (v165 >> 20)) & 0x19;
						v170 = -1649025969;
						break;
					case 0x2198494u:
						v165 = 0x1E87407C7C4367F1i64 * ((v165 >> 27) ^ v165);
						v170 = -884956759;
						break;
					case 0x338A980u:
						v165 = 0x9E3779B97F4A7C15ui64 * ((v165 >> 27) ^ v165);
						v170 = -1729881149;
						break;
					case 0x9177A9Du:
						v165 = 0xCCF213CCCB5676Ai64 * ((v165 >> 21) ^ v165);
						v170 = 384008540;
						break;
					case 0x1650E8EEu:
						v165 = 0x665D29E34B0874i64 * ((v165 >> 35) ^ v165);
						v170 = 427669424;
						break;
					}
				}
				v169 ^= v170;
			} while (v169 != -1526535025);
		} while (*v163);
		goto LABEL_1403;
	case 0x94:
		*tmp = -97;
		v43 = 628241558;
		v44 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v45 = tmp + 2;
		do
		{
			v43 += encryptiontable[314 * (v43 % 6) + v44 % 0x74u];
			v46 = RotateLeft8(*v45, v43);
			*v45 = v46;
			if (v46 != (BYTE)v43 - 106)
				*v45 = v46 ^ (v43 - 106);
			++v44;
			++v45;
		} while (v44 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x95:
		*tmp = -123;
		v203 = tmp + 1;
		v204 = 0i64;
		v205 = 0i64;
		v206 = 0;
		v207 = 1864095573;
		v208 = -688048657;
		do
		{
			if (v207 > 0x8BF37725)
			{
				switch (v207)
				{
				case 0x8E21173A:
					v204 = 0x4506B3D91F9EE7C2i64;
					v208 = -1394583525;
					break;
				case 0xD8DE63B7:
					v204 = 0x9B894C66C2705390ui64;
					v208 = -1187279656;
					break;
				case 0xF340E496:
					v204 = 0x4C50302EAF4475C2i64;
					v208 = 893075298;
					break;
				case 0xFC931F20:
					v204 = 0x1B53FD5EEED6ED90i64;
					v208 = 599784219;
					break;
				}
			}
			else
			{
				switch (v207)
				{
				case 0x8BF37725:
					v204 = 0x43BEAF80FE86DE64i64;
					v208 = -1482548390;
					break;
				case 0x18C115Eu:
					v204 = 0x4920A8DEB0644303i64;
					v208 = 1154344014;
					break;
				case 0xA4C9CAAu:
					v204 = 0x59E218B911CD7832i64;
					v208 = -298605322;
					break;
				case 0x2E62B522u:
					v204 = 0xD95E6E677D2FDC2Dui64;
					v208 = -1746785143;
					break;
				case 0x6247B491u:
					v204 = 0x4214B807C49731D7i64;
					v208 = -563816116;
					break;
				case 0x6F1BD755u:
					v204 = 0xAE5DE055D528FFEDui64;
					v208 = 690219836;
					break;
				}
			}
			v207 ^= v208;
		} while (v207 != 1178090601);
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v203)
			goto LABEL_1404;
		break;
	case 0x96:
	{
		*tmp = -97;
		UINT32 v = 889284759;
		UINT8 i = 0;
		if (tmp[1] - 1 <= 0)
			goto LABEL_260;
		v5 = tmp + 2;
		do {
			v *= encryptiontable[i % 0x67 + 314 * (v % 6)];
			*v5 = RotateLeft8(*v5, v);
			UINT8 v2 = (UINT8)(-105 * v);
			if (*v5 != v2) {
				*v5 ^= v2;
			}
			++i;
			++v5;
		} while (i < tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	}
	case 0x97:
		*tmp = -97;
		v74 = 8;
		v75 = 0;
		if (tmp[1] - 1 <= 0)
			goto LABEL_260;
		v76 = tmp + 2;
		do
		{
			v74 *= (BYTE)v75;
			v77 = RotateRight8(*v76, v74);
			*v76 = v77;
			if (v77 != v74 + 8)
				*v76 = v77 ^ (v74 + 8);
			++v75;
			++v76;
		} while (v75 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x98:
		*tmp = -97;
		v26 = 609355846;
		v27 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v28 = tmp + 2;
		do
		{
			v26 *= encryptiontable[314 * (v26 % 3) + v27 % 0x11Bu];
			if (*v28 != (BYTE)(70 - (BYTE)v26))
				*v28 ^= (BYTE)(70 - (BYTE)v26);
			++v27;
			++v28;
		} while (v27 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x99:
		*tmp = -97;
		v78 = 1646539289;
		v79 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v80 = tmp + 2;
		do
		{
			v78 -= encryptiontable[314 * (v78 % 0xC) + v79 % 0x74u];
			v81 = RotateLeft8(*v80, v78);
			*v80 = v81;
			if (v81 != (BYTE)v78 + 25)
				*v80 = v81 ^ (v78 + 25);
			++v79;
			++v80;
		} while (v79 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x9A:
		*tmp = -97;
		v100 = 592783125;
		v101 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v102 = tmp + 2;
		do
		{
			v100 *= encryptiontable[314 * (v100 % 0xA) + v101 % 0x19u];
			v103 = RotateRight8(*v102, v100);
			*v102 = v103;
			if (v103 != 21 - (BYTE)v100)
				*v102 = (21 - v100) ^ v103;
			++v101;
			++v102;
		} while (v101 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x9B:
		*tmp = -97;
		v13 = 40;
		v14 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v15 = tmp + 2;
		do
		{
			v13 ^= v14;
			if (*v15 != ((unsigned __int8)v13 ^ 0x28))
				*v15 ^= v13 ^ 0x28;
			++v14;
			++v15;
		} while (v14 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x9C:
		*tmp = -123;
		v259 = tmp + 1;
		v260 = 0i64;
		v261 = 0i64;
		v262 = 0;
		v263 = 1842462040;
		v264 = -1252288132;
		do
		{
			if (v263 > 0x9CA05E40)
			{
				switch (v263)
				{
				case 0xDBB99BDF:
					v260 = 0x73F2018C4F5D071Ai64;
					v264 = -811985314;
					break;
				case 0xEC754467:
					v260 = 0x472398FD290AE468i64;
					v264 = 37671605;
					break;
				case 0xEFBA55BF:
					v260 = 0x6A3A135C45AD7EAEi64;
					v264 = 236346948;
					break;
				case 0xFA5340ED:
					v260 = 0x28FCABBCCE0BB3E8i64;
					v264 = -1020473119;
					break;
				}
			}
			else
			{
				switch (v263)
				{
				case 0x9CA05E40:
					v260 = 0xDF4A13ED77C301C3ui64;
					v264 = -1720609244;
					break;
				case 0x2FEC8C4u:
					v260 = 0x571CF332885AAE81i64;
					v264 = 150457192;
					break;
				case 0x324A9BBAu:
					v260 = 0x84B3A7E40CF7D18Bui64;
					v264 = -1422427059;
					break;
				case 0x6DD1BD58u:
					v260 = 0x49CD125C1B79E441i64;
					v264 = 186772667;
					break;
				case 0x6E34523Cu:
					v260 = 0x6BE59E9DD468351Ci64;
					v264 = 2023047025;
					break;
				case 0x81AD531A:
					v260 = 0x6E6FF22A735650D7i64;
					v264 = 1311979803;
					break;
				}
			}
			v263 ^= v264;
		} while (v263 != 1727025635);
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v259)
			goto LABEL_1404;
		do
		{
			v265 = 924442293;
			v266 = -388598325;
			do
			{
				if (v265 > 0x462A4070)
				{
					if (v265 > 0xB5C1AB19)
					{
						switch (v265)
						{
						case 0xBC695250:
							*v259 = RotateRight8(*v259, v262);
							v266 = 536550495;
							break;
						case 0xD99E175E:
							v262 = (v261 ^ (v261 >> 21)) & 0xB;
							v266 = -1956734906;
							break;
						case 0xE83BDE4B:
							v260 -= 0x40A7B892E31B1A47i64;
							v261 = v260;
							v266 = 225313706;
							break;
						case 0xECEFFA7A:
							v261 = 0x94D049BB133111EBui64 * ((v261 >> 30) ^ v261);
							v266 = 1686238421;
							break;
						}
					}
					else
					{
						switch (v265)
						{
						case 0xB5C1AB19:
							v261 = 0xFF79B5438F6375EBui64 * ((v261 >> 21) ^ v261);
							v266 = 1404038114;
							break;
						case 0x57400CE3u:
							v261 = 0x94D049BB133111EBui64 * ((v261 >> 27) ^ v261);
							v266 = 1316486796;
							break;
						case 0x838928BE:
							v261 = 0x623EAB835A4DA5Fi64 * ((v261 >> 30) ^ v261);
							v266 = 395991753;
							break;
						case 0x8CB07FE7:
							--v259;
							v266 = 1044377575;
							break;
						case 0xA3924E0F:
							++v259;
							v266 = -899720837;
							break;
						case 0xACB83DB9:
							*v259 = RotateLeft8(*v259, v262);
							v266 = -113537965;
							break;
						}
					}
				}
				else if (v265 == 1177174128)
				{
					v262 = v261 ^ (v261 >> 31);
					v266 = -2087422732;
				}
				else if (v265 > 0xB34B4F1)
				{
					switch (v265)
					{
					case 0xBADB1E9u:
						v261 = 0x7FCFCD44D7D5FE6Ai64 * ((v261 >> 20) ^ v261);
						v266 = 1404144510;
						break;
					case 0x1937F26Fu:
						v262 = v261 ^ (v261 >> 31);
						v266 = -1520525249;
						break;
					case 0x20DF2109u:
						v261 = 0xBF58476D1CE4E5B9ui64 * ((v261 >> 30) ^ v261);
						v266 = 2006920682;
						break;
					case 0x3719DEB5u:
						v260 -= 0x61C8864680B583EBi64;
						v261 = v260;
						v266 = 398917564;
						break;
					}
				}
				else
				{
					switch (v265)
					{
					case 0xB34B4F1u:
						v261 = 0xA3F7F6711ABB6D90ui64 * ((v261 >> 27) ^ v261);
						v266 = 165885939;
						break;
					case 0x1FBC2BFu:
						v262 = (v261 ^ (v261 >> 31)) & 0x18;
						v266 = 549908112;
						break;
					case 0x2E36EF9u:
						v260 += 0x515F8AB9F442BA6Bi64;
						v261 = v260;
						v266 = 1472527716;
						break;
					case 0x5C79337u:
						v261 = 0x9E3779B97F4A7C15ui64 * ((v261 >> 27) ^ v261);
						v266 = -780617883;
						break;
					case 0xAD6D5F7u:
						v260 += 0x152DDD4D2BA4D90i64;
						v261 = v260;
						v266 = -1520637494;
						break;
					}
				}
				v265 ^= v266;
			} while (v265 != 1775048564);
		} while (*v259);
		goto LABEL_1403;
	case 0x9D:
		*tmp = -97;
		v152 = 295057172;
		v153 = 0;
		if ((unsigned __int8)tmp[1] - 1 > 0)
		{
			v154 = tmp + 2;
			do
			{
				v152 *= encryptiontable[314 * (v152 % 5) + v153 % 0x114u];
				if (*v154 != (BYTE)(20 * (BYTE)v152))
					*v154 ^= (BYTE)(20 * (BYTE)v152);
				++v153;
				++v154;
			} while (v153 < (unsigned __int8)tmp[1] - 1);
		}
		goto LABEL_260;
	case 0x9E:
		*tmp = -97;
		v89 = 2039837206;
		v90 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v91 = tmp + 2;
		do
		{
			v89 ^= encryptiontable[314 * (v90 % 6u) + v89 % 0x118];
			v92 = RotateLeft8(*v91, v89);
			*v91 = v92;
			if (v92 != ((unsigned __int8)v89 ^ 0x16))
				*v91 = v89 ^ v92 ^ 0x16;
			++v90;
			++v91;
		} while (v90 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0x9F:
		goto LABEL_260;
	case 0xA1:
		*tmp = -123;
		v227 = tmp + 1;
		v228 = 0i64;
		v229 = 0;
		v230 = -711329350;
		v231 = 419150102;
		do
		{
			if (v230 > 0xD599F9BA)
			{
				switch (v230)
				{
				case 0xEB7A874F:
					v228 = 0x10C27F50D58A23F2i64;
					v231 = -44689620;
					break;
				case 0xEDBDBA31:
					v228 = 0x103AE8B4F95A2228i64;
					v231 = -1456527423;
					break;
				case 0xF010A8D4:
					v228 = 0x4EDFE5D3672154BFi64;
					v231 = 26904455;
					break;
				case 0xF753AA25:
					v228 = 0xE1BAE74C8FD8EF29ui64;
					v231 = -1243122215;
					break;
				}
			}
			else
			{
				switch (v230)
				{
				case 0xD599F9BA:
					v228 = 0xF602E1E10F29C79i64;
					v231 = 84679341;
					break;
				case 0xF7914CDu:
					v228 = 0x77627C2DD7C4FB51i64;
					v231 = -957989470;
					break;
				case 0x3E72967Eu:
					v228 = 0x923CD428CE149DF3ui64;
					v231 = 43178582;
					break;
				case 0x52CC91E7u:
					v228 = 0x11E096DA0A82337Di64;
					v231 = -477193999;
					break;
				case 0x8F4DCBE7:
					v228 = 0x1331CE3CAFCD09FAi64;
					v231 = -134996035;
					break;
				case 0xA7364A72:
					v228 = 0x5C4428124A6D4854i64;
					v231 = -2100179425;
					break;
				}
			}
			v230 ^= v231;
		} while (v230 != -795483369);
		v232 = 0i64;
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v227)
			goto LABEL_1404;
		do
		{
			v233 = -1232653935;
			v234 = -590782314;
			do
			{
				if (v233 > 0x577A48B8)
				{
					if (v233 > 0xAE3D1188)
					{
						if (v233 > 0xD47FE4F6)
						{
							switch (v233)
							{
							case 0xE087C133:
								--v227;
								v234 = 110742604;
								break;
							case 0xEC47374F:
								v232 = 0x8C30604E6052EDA8ui64 * ((v232 >> 27) ^ v232);
								v234 = -915255782;
								break;
							case 0xF33079EC:
								v229 = v232 ^ (v232 >> 31);
								v234 = -32262859;
								break;
							}
						}
						else
						{
							switch (v233)
							{
							case 0xD47FE4F6:
								++v227;
								v234 = -2017306983;
								break;
							case 0xAEEC8B6C:
								v232 = 0x9E3779B97F4A7C15ui64 * ((v232 >> 27) ^ v232);
								v234 = 968046988;
								break;
							case 0xB3AAD965:
								*v227 = RotateLeft8(*v227, v229);
								v234 = 28641829;
								break;
							case 0xB6873191:
								v228 -= 0x61C8864680B583EBi64;
								v232 = v228;
								v234 = 503076775;
								break;
							}
						}
					}
					else if (v233 == -1371729528)
					{
						v229 = v232 ^ (v232 >> 31);
						v234 = -44612391;
					}
					else if (v233 > 0x8E666FD0)
					{
						switch (v233)
						{
						case 0xA6F51627:
							v232 = 0x94D049BB133111EBui64 * ((v232 >> 27) ^ v232);
							v234 = 147326895;
							break;
						case 0xAB7B6636:
							v232 = 0xBF58476D1CE4E5B9ui64 * ((v232 >> 30) ^ v232);
							v234 = 227438609;
							break;
						case 0xAD442DE5:
							v232 = 0x5B78ABC07F31A2EFi64 * ((v232 >> 30) ^ v232);
							v234 = 47393521;
							break;
						}
					}
					else
					{
						switch (v233)
						{
						case 0x8E666FD0:
							v232 = 0x43E34AD9254F86i64 * ((v232 >> 59) ^ v232);
							v234 = 130194287;
							break;
						case 0x6619AB9Du:
							v229 = (v232 ^ (v232 >> 31)) & 4;
							v234 = -264934408;
							break;
						case 0x80655FF5:
							v228 += 0x4094654AD02988i64;
							v232 = v228;
							v234 = -1474496813;
							break;
						case 0x829644F3:
							v229 = (v232 ^ (v232 >> 41)) & 0x3B;
							v234 = -373727399;
							break;
						}
					}
				}
				else
				{
					switch (v233)
					{
					case 0x577A48B8u:
						v228 += 0x6F96648D6C42416Ai64;
						v232 = v228;
						v234 = 76428394;
						break;
					case 0x1D72F90u:
						v232 = 0x94D049BB133111EBui64 * ((v232 >> 30) ^ v232);
						v234 = 1203209933;
						break;
					case 0x97B4E1Cu:
						v232 = 0xCC915AF87FDDCF7Bui64 * ((v232 >> 55) ^ v232);
						v234 = 90819164;
						break;
					case 0xD69BC1Fu:
						v228 -= 0x40A7B892E31B1A47i64;
						v232 = v228;
						v234 = 2052520792;
						break;
					case 0x536A5551u:
						*v227 = RotateRight8(*v227, v229);
						v234 = -2028621401;
						break;
					}
				}
				v233 ^= v234;
			} while (v233 != 1404940911);
		} while (*v227);
		goto LABEL_1403;
	case 0xA2:
		*tmp = -97;
		v122 = 39;
		v123 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v124 = tmp + 2;
		do
		{
			v122 -= v123;
			v125 = RotateLeft8(*v124, v122);
			*v124 = v125;
			if (v125 != (BYTE)(39 * v122))
				*v124 = v125 ^ (BYTE)(39 * v122);
			++v123;
			++v124;
		} while (v123 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xA3:
		*tmp = -97;
		v126 = 1126761733;
		v127 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v128 = tmp + 2;
		do
		{
			v126 += encryptiontable[314 * (v126 % 0xC) + v127 % 0xC1u];
			v129 = RotateRight8(*v128, v126);
			*v128 = v129;
			if (v129 != (BYTE)(5 - (BYTE)v126))
				*v128 = v129 ^ (BYTE)(5 - v126);
			++v127;
			++v128;
		} while (v127 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xA4:
		*tmp = -97;
		v96 = 680949523;
		v97 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v98 = tmp + 2;
		do
		{
			v96 *= encryptiontable[314 * (v96 % 0xC) + v97 % 0x34u];
			v99 = RotateLeft8(*v98, v96);
			*v98 = v99;
			if (v99 != (BYTE)v96 + 19)
				*v98 = (v96 + 19) ^ v99;
			++v97;
			++v98;
		} while (v97 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xA5:
		*tmp = -123;
		v243 = tmp + 1;
		v244 = 0i64;
		v245 = 0i64;
		v246 = 0;
		v247 = 244609970;
		v248 = -1527150112;
		do
		{
			if (v247 > 0xA0D58D2C)
			{
				switch (v247)
				{
				case 0xB8E276C8:
					v244 = 0x2EEC8BF26B6D2881i64;
					v248 = -1667324732;
					break;
				case 0xBF13E826:
					v244 = 0x3633D18F04A1E905i64;
					v248 = 434021279;
					break;
				case 0xD18218A0:
					v244 = 0x262BAD44F3370129i64;
					v248 = 41562356;
					break;
				case 0xF24CC1D9:
					v244 = 0xCA754B78760AD27Eui64;
					v248 = 104041869;
					break;
				}
			}
			else
			{
				switch (v247)
				{
				case 0xA0D58D2C:
					v244 = 0xF90C414DBF30ABDCui64;
					v248 = -918272627;
					break;
				case 0x2566773u:
					v244 = 0xC806AE235161FD18ui64;
					v248 = -1803521187;
					break;
				case 0xC0B0DECu:
					v244 = 0x2658E6B18073EC1Ai64;
					v248 = -1625505362;
					break;
				case 0xE9473B2u:
					v244 = 0x51B5D60B9871AEABi64;
					v248 = 1486878833;
					break;
				case 0x76D7ED21u:
					v244 = 0x21E4BF248A99E2Ci64;
					v248 = 1624030541;
					break;
				case 0x8DB2502A:
					v244 = 0x6D8AF63FAA002429i64;
					v248 = -1359254067;
					break;
				}
			}
			v247 ^= v248;
		} while (v247 != 1443597251);
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v243)
			goto LABEL_1404;
		do
		{
			v249 = 2109905773;
			v250 = -1159267414;
			do
			{
				if (v249 > 0x510BF4D7)
				{
					if (v249 > 0xAFB7DB14)
					{
						switch (v249)
						{
						case 0xBAA4A94B:
							v245 = 0xEF755C586AB0030i64 * ((v245 >> 30) ^ v245);
							v250 = -612259680;
							break;
						case 0xDD47C920:
							*v243 = RotateLeft8(*v243, v246);
							v250 = 230282104;
							break;
						case 0xF1615F1F:
							v246 = (v245 ^ (v245 >> 61)) & 0x16;
							v250 = 2089278355;
							break;
						case 0xF3A3CB69:
							v244 += 0x209A33346FDDD92Fi64;
							v245 = v244;
							v250 = -1487457977;
							break;
						}
					}
					else
					{
						switch (v249)
						{
						case 0xAFB7DB14:
							v245 = 0x67C55E3D570D837i64 * ((v245 >> 44) ^ v245);
							v250 = 1255355205;
							break;
						case 0x7DC29B6Du:
							v244 -= 0x61C8864680B583EBi64;
							v245 = v244;
							v250 = 751398842;
							break;
						case 0x8EA8831B:
							v245 = 0xC4FF24D7B3B227Bi64 * ((v245 >> 27) ^ v245);
							v250 = 146175928;
							break;
						case 0x96F5C4AB:
							v245 = 0x94D049BB133111EBui64 * ((v245 >> 30) ^ v245);
							v250 = 160712545;
							break;
						case 0x9C1BE1AC:
							--v243;
							v250 = 1265934551;
							break;
						case 0x9DD1B298:
							v244 += 0xBD914752E76A2B4i64;
							v245 = v244;
							v250 = 1838787864;
							break;
						}
					}
				}
				else if (v249 == 1359738071)
				{
					v245 = 0xBF58476D1CE4E5B9ui64 * ((v245 >> 30) ^ v245);
					v250 = 1441031675;
				}
				else if (v249 > 0xE74E653)
				{
					switch (v249)
					{
					case 0x11C358B7u:
						v244 -= 0x40A7B892E31B1A47i64;
						v245 = v244;
						v250 = -1586025635;
						break;
					case 0x1511ECF9u:
						v245 = 0x9A3F79CBCC88AF7i64 * ((v245 >> 33) ^ v245);
						v250 = -1620873623;
						break;
					case 0x1C6893C0u:
						v246 = (v245 ^ (v245 >> 31)) & 0x3E;
						v250 = 37951343;
						break;
					case 0x1F4A202Fu:
						++v243;
						v250 = 1302818876;
						break;
					}
				}
				else
				{
					switch (v249)
					{
					case 0xE74E653u:
						*v243 = RotateRight8(*v243, v246);
						v250 = 289326716;
						break;
					case 0x42A627Au:
						v246 = v245 ^ (v245 >> 31);
						v250 = 173966377;
						break;
					case 0x4D44BE3u:
						v246 = v245 ^ (v245 >> 31);
						v250 = -1859986056;
						break;
					case 0x4EF912Cu:
						v245 = 0x94D049BB133111EBui64 * ((v245 >> 27) ^ v245);
						v250 = 12972886;
						break;
					case 0x9F91771u:
						v245 = 0x9E3779B97F4A7C15ui64 * ((v245 >> 27) ^ v245);
						v250 = 84992208;
						break;
					}
				}
				v249 ^= v250;
			} while (v249 != 1391284243);
		} while (*v243);
		goto LABEL_1403;
	case 0xA6:
		*tmp = -123;
		v195 = tmp + 1;
		v196 = 0i64;
		v197 = 0;
		v198 = -1301405856;
		v199 = -353338040;
		do
		{
			if (v198 > 0x8FA378FF)
			{
				switch (v198)
				{
				case 0xA077F8DE:
					v196 = 0xCF86DE22B8A9240Eui64;
					v199 = 176127798;
					break;
				case 0xB02E336C:
					v196 = 0x2B81FE166FC0B0F4i64;
					v199 = -1180722892;
					break;
				case 0xB26E1F60:
					v196 = 0x7C097652E5B709DEi64;
					v199 = 410607607;
					break;
				case 0xF29B9941:
					v196 = 0x63D4A41832F8A788i64;
					v199 = 14195115;
					break;
				}
			}
			else
			{
				switch (v198)
				{
				case 0x8FA378FF:
					v196 = 0xF5F61A63BD0C1EEEui64;
					v199 = -235692807;
					break;
				case 0xAD9A8DCu:
					v196 = 0x552C7F0FBB894F58i64;
					v199 = 1892584504;
					break;
				case 0xC170C58u:
					v196 = 0xC6C2F09220942C03ui64;
					v199 = -1564174449;
					break;
				case 0xCEFCDC1u:
					v196 = 0xC2622B735F5756A7ui64;
					v199 = -977645385;
					break;
				case 0xDBA03A5u:
					v196 = 0x96A7463DFF259BE7ui64;
					v199 = -875067178;
					break;
				case 0x10D86EFCu:
					v196 = 0x47A6CACC2C4A5C51i64;
					v199 = 5606560;
					break;
				}
			}
			v198 ^= v199;
		} while (v198 != -1441316713);
		v200 = 0i64;
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v195)
			goto LABEL_1404;
		do
		{
			v201 = 2056470978;
			v202 = 1989035724;
			do
			{
				if (v201 > 0x72FCD287)
				{
					if (v201 > 0xA0E87AF7)
					{
						switch (v201)
						{
						case 0xA2CED297:
							v200 = 0x55A87B647770187i64 * (HIWORD(v200) ^ v200);
							v202 = -1735660707;
							break;
						case 0xAEB16D1C:
							v200 = 0xBF58476D1CE4E5B9ui64 * ((v200 >> 30) ^ v200);
							v202 = 1001984661;
							break;
						case 0xBBBE4B31:
							v196 += 0x7B5718F853BEC33Ci64;
							v200 = v196;
							v202 = 63345498;
							break;
						case 0xD422647C:
							--v195;
							v202 = -1897148688;
							break;
						case 0xFDDA4259:
							*v195 = RotateRight8(*v195, v197);
							v202 = -702475041;
							break;
						}
					}
					else
					{
						switch (v201)
						{
						case 0xA0E87AF7:
							v200 = 0xA55CF5A268C99875ui64 * ((v200 >> 30) ^ v200);
							v202 = 1923107436;
							break;
						case 0x7A9341C2u:
							v196 -= 0x61C8864680B583EBi64;
							v200 = v196;
							v202 = -735957794;
							break;
						case 0x82AB3DB3:
							v197 = (v200 ^ (v200 >> 31)) & 0x33;
							v202 = 695852583;
							break;
						case 0x8B423B4A:
							v196 -= 0x40A7B892E31B1A47i64;
							v200 = v196;
							v202 = -1638245725;
							break;
						case 0x95087F89:
							v200 = 0x94D049BB133111EBui64 * ((v200 >> 27) ^ v200);
							v202 = -1863139856;
							break;
						case 0x981F5295:
							v200 = 0x938D5FB06EA12D7i64 * ((v200 >> 53) ^ v200);
							v202 = 816092241;
							break;
						}
					}
				}
				else if (v201 == 1929171591)
				{
					v197 = 0;
					v202 = -534710682;
				}
				else if (v201 > 0x2BFB5686)
				{
					switch (v201)
					{
					case 0x30994E78u:
						v200 = 0x94D049BB133111EBui64 * ((v200 >> 30) ^ v200);
						v202 = -215418588;
						break;
					case 0x51BD4028u:
						v196 += 0x3C38A6F2CE62673i64;
						v200 = v196;
						v202 = 1781501491;
						break;
					case 0x59DF9B39u:
						*v195 = RotateLeft8(*v195, v197);
						v202 = -1645329321;
						break;
					}
				}
				else
				{
					switch (v201)
					{
					case 0x2BFB5686u:
						++v195;
						v202 = -579548096;
						break;
					case 0x5FAC279u:
						v197 = v200 ^ (v200 >> 31);
						v202 = -132087776;
						break;
					case 0xAD2D6CEu:
						v200 = 0x97E2C5C482C06EE5ui64 * ((v200 >> 27) ^ v200);
						v202 = -1579908508;
						break;
					case 0xBB544A1u:
						v200 = 0x9E3779B97F4A7C15ui64 * ((v200 >> 27) ^ v200);
						v202 = 1384390490;
						break;
					case 0xEE82936u:
						v197 = v200 ^ (v200 >> 31);
						v202 = 1125561944;
						break;
					}
				}
				v201 ^= v202;
			} while (v201 != -158360890);
		} while (*v195);
		goto LABEL_1403;
	case 0xA7:
		*tmp = -97;
		v32 = 830817865;
		v33 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v34 = tmp + 2;
		do
		{
			v32 += encryptiontable[314 * (v33 % 6u) + v32 % 0xCE];
			if (*v34 != ((unsigned __int8)v32 ^ 0x49))
				*v34 ^= (unsigned __int8)v32 ^ 0x49;
			++v33;
			++v34;
		} while (v33 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xA8:
		*tmp = -97;
		v148 = -2107492510;
		v149 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v150 = tmp + 2;
		do
		{
			v148 ^= encryptiontable[314 * (v149 % 0xBu) + (v148 & 0x1F)];
			v151 = RotateRight8(*v150, v148);
			*v150 = v151;
			if (v151 != ((unsigned __int8)v148 ^ 0x62))
				*v150 = v148 ^ v151 ^ 0x62;
			++v149;
			++v150;
		} while (v149 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xA9:
		*tmp = -97;
		v145 = 912361108;
		v146 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v147 = tmp + 2;
		do
		{
			v145 *= encryptiontable[314 * (v145 % 3) + (v146 & 1)];
			if (*v147 != -108 * (BYTE)v145)
				*v147 ^= -108 * (BYTE)v145;
			++v146;
			++v147;
		} while (v146 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xAA:
		*tmp = -123;
		v155 = tmp + 1;
		v156 = 0i64;
		v157 = 0i64;
		v158 = 0;
		v159 = 1280948321;
		v160 = -2008885307;
		do
		{
			if (v159 > 0x24F62752)
			{
				switch (v159)
				{
				case 0x4C59B861u:
					v156 = 0xE336CFFA4D690CD6ui64;
					v160 = -664053264;
					break;
				case 0x853CB094:
					v156 = 0xC2EB759B77C8E904ui64;
					v160 = 837908637;
					break;
				case 0xABFBEE6D:
					v156 = 0x4A4A3560ACD26F7i64;
					v160 = 1289251838;
					break;
				case 0xF7838E44:
					v156 = 0xBD21FD109B2E5D4i64;
					v160 = -2001754445;
					break;
				}
			}
			else
			{
				switch (v159)
				{
				case 0x24F62752u:
					v156 = 0x9B63D7B97F73B41i64;
					v160 = -559784891;
					break;
				case 0x34C21E9u:
					v156 = 0xF594CC85E448C5C6ui64;
					v160 = 2070043847;
					break;
				case 0x7CCE97Fu:
					v156 = 0xF2281E403F799B3Dui64;
					v160 = -202355115;
					break;
				case 0xD76251Cu:
					v156 = 0x88407529C7027A5i64;
					v160 = -67793208;
					break;
				case 0xDB39F52u:
					v156 = 0xB538D22846CBA46Eui64;
					v160 = 1484188291;
					break;
				case 0x1438E625u:
					v156 = 0x45B885AE78C3C25i64;
					v160 = -1408125318;
					break;
				}
			}
			v159 ^= v160;
		} while (v159 != -1808604783);
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v155)
			goto LABEL_1404;
		do
		{
			v161 = 282285162;
			v162 = -596810523;
			do
			{
				if (v161 > 0x5F54A4C8)
				{
					if (v161 > 0xBE7204A2)
					{
						if (v161 > 0xD271C4D3)
						{
							if (v161 == -732703139)
							{
								--v155;
								v162 = 1698291315;
							}
							else if (v161 == -470517871)
							{
								v157 = 0x9E3779B97F4A7C15ui64 * ((v157 >> 27) ^ v157);
								v162 = -1403328969;
							}
						}
						else
						{
							switch (v161)
							{
							case 0xD271C4D3:
								v156 -= 0x763AEDDC90C6A9Bi64;
								v157 = v156;
								v162 = -2073764410;
								break;
							case 0xBEFCC4E0:
								v158 = v157 ^ (v157 >> 31);
								v162 = 9355330;
								break;
							case 0xC05BED94:
								v156 -= 0x40A7B892E31B1A47i64;
								v157 = v156;
								v162 = 1341399355;
								break;
							case 0xC43FE2AB:
								v157 = 0x122FAFDF4A1EF36i64 * ((v157 >> 57) ^ v157);
								v162 = 199111913;
								break;
							}
						}
					}
					else if (v161 == -1099823966)
					{
						*v155 = RotateRight8(*v155, v158);
						v162 = 408266973;
					}
					else if (v161 > 0xA627AC7F)
					{
						switch (v161)
						{
						case 0xB004BCF4:
							v157 = 0x94D049BB133111EBui64 * ((v157 >> 27) ^ v157);
							v162 = 251164692;
							break;
						case 0xB0B96BBF:
							v157 = 0x29D0451F56CB3EBi64 * ((v157 >> 30) ^ v157);
							v162 = 56583039;
							break;
						case 0xB3E61BA6:
							v157 = 0xBF58476D1CE4E5B9ui64 * ((v157 >> 30) ^ v157);
							v162 = 65185618;
							break;
						}
					}
					else
					{
						switch (v161)
						{
						case 0xA627AC7F:
							++v155;
							v162 = 521321453;
							break;
						case 0x70D42E65u:
							v158 = v157 ^ (v157 >> 31);
							v162 = -2076219974;
							break;
						case 0x92B25BCD:
							*v155 = RotateLeft8(*v155, v158);
							v162 = -1827663647;
							break;
						case 0xA45D42A2:
							v156 += 0xC75983A3F8E3939i64;
							v157 = v156;
							v162 = 97185321;
							break;
						}
					}
				}
				else
				{
					switch (v161)
					{
					case 0x5F54A4C8u:
						v158 = (v157 ^ (v157 >> 31)) & 0x14;
						v162 = -1689339860;
						break;
					case 0x171FDE4u:
						v158 = v157 & 0xE;
						v162 = -755976997;
						break;
					case 0x84E8BB6u:
						v157 = 0xB6A50D699AD8765i64 * ((v157 >> 37) ^ v157);
						v162 = 77564140;
						break;
					case 0x10D3546Au:
						v156 -= 0x61C8864680B583EBi64;
						v157 = v156;
						v162 = -1556787252;
						break;
					case 0x25301AEBu:
						v157 = 0x94D049BB133111EBui64 * ((v157 >> 30) ^ v157);
						v162 = -1669711451;
						break;
					case 0x57ABF83Bu:
						v157 = 0x14DF2C63D36E618i64 * ((v157 >> 27) ^ v157);
						v162 = 318291896;
						break;
					}
				}
				v161 ^= v162;
			} while (v161 != -1187702894);
		} while (*v155);
		goto LABEL_1403;
	case 0xAB:
		*tmp = -97;
		v118 = 1614283080;
		v119 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v120 = tmp + 2;
		do
		{
			v118 ^= encryptiontable[314 * (v118 % 6) + v119 % 0x5Fu];
			v121 = RotateLeft8(*v120, v118);
			*v120 = v121;
			if (v121 != (BYTE)(72 * (BYTE)v118))
				*v120 = (BYTE)(72 * v118) ^ v121;
			++v119;
			++v120;
		} while (v119 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xAC:
		*tmp = -97;
		v130 = 310931476;
		v131 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v132 = tmp + 2;
		do
		{
			v130 += encryptiontable[314 * (v131 % 7u) + v130 % 0xB8];
			v133 = RotateLeft8(*v132, v130);
			*v132 = v133;
			if (v133 != (BYTE)(20 * (BYTE)v130))
				*v132 = v133 ^ (BYTE)(20 * v130);
			++v131;
			++v132;
		} while (v131 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xAD:
		*tmp = -123;
		v219 = tmp + 1;
		v220 = 0i64;
		v221 = 0i64;
		v222 = 0;
		v223 = 562845345;
		v224 = -1741190679;
		do
		{
			if (v223 > 0x513B2141)
			{
				switch (v223)
				{
				case 0x7AF2C9EBu:
					v220 = 0x69CDCFD980CBB318i64;
					v224 = 14475806;
					break;
				case 0x94139E29:
					v220 = 0x205BCB75BCA3A212i64;
					v224 = -962994146;
					break;
				case 0xCF35A13A:
					v220 = 0x98C836A0EFC9918Fui64;
					v224 = -828943430;
					break;
				case 0xCF42FF58:
					v220 = 0x10CBD0DE5D18CA04i64;
					v224 = 186364219;
					break;
				}
			}
			else
			{
				switch (v223)
				{
				case 0x513B2141u:
					v220 = 0xB34434D2F864F574ui64;
					v224 = -1701666418;
					break;
				case 0xD04E0u:
					v220 = 0xBF7E9D2F292FF207ui64;
					v224 = -2101439603;
					break;
				case 0x211722F1u:
					v220 = 0xC06B0DD61582AB8Bui64;
					v224 = 237166035;
					break;
				case 0x218C56A1u:
					v220 = 0x403E3CB3345EE751i64;
					v224 = 72269691;
					break;
				case 0x404CC84Eu:
					v220 = 0x895DF0980AACE1F6ui64;
					v224 = -965699035;
					break;
				case 0x42929BE6u:
					v220 = 0xCFA56835F191FC8Cui64;
					v224 = 356604624;
					break;
				}
			}
			v223 ^= v224;
		} while (v223 != 633530842);
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v219)
			goto LABEL_1404;
		do
		{
			v225 = 443763558;
			v226 = 497825948;
			do
			{
				if (v225 > 0x3C368838)
				{
					if (v225 > 0x91FA377C)
					{
						switch (v225)
						{
						case 0x9617509E:
							++v219;
							v226 = -830178619;
							break;
						case 0xC5E5EF70:
							v222 = (v221 ^ (v221 >> 31)) & 0x1D;
							v226 = -207622030;
							break;
						case 0xE86D3A1C:
							v220 += 0x6156386B12E4BCB1i64;
							v221 = v220;
							v226 = 451165;
							break;
						case 0xEDA0FD12:
							v221 = 0x9E3779B97F4A7C15ui64 * ((v221 >> 27) ^ v221);
							v226 = 1655253394;
							break;
						}
					}
					else
					{
						switch (v225)
						{
						case 0x91FA377C:
							--v219;
							v226 = -698354954;
							break;
						case 0x423E7B3Cu:
							v221 = 0x94D049BB133111EBui64 * ((v221 >> 30) ^ v221);
							v226 = -572612646;
							break;
						case 0x5D3DAFA3u:
							*v219 = RotateLeft8(*v219, v222);
							v226 = 434119339;
							break;
						case 0x6D1337FEu:
							v221 = 0x94D049BB133111EBui64 * ((v221 >> 27) ^ v221);
							v226 = 1123758104;
							break;
						case 0x7B442B38u:
							v220 -= 0x40A7B892E31B1A47i64;
							v221 = v220;
							v226 = -1456540517;
							break;
						}
					}
				}
				else if (v225 == 1010206776)
				{
					v221 = 0xC4C7CF5C9DD1FC6i64 * ((v221 >> 30) ^ v221);
					v226 = -85508437;
				}
				else if (v225 > 0x1A734B66)
				{
					switch (v225)
					{
					case 0x2801A853u:
						*v219 = RotateRight8(*v219, v222);
						v226 = -1105790771;
						break;
					case 0x299590A7u:
						v220 += 0x17E635FB30467D36i64;
						v221 = v220;
						v226 = -1201621444;
						break;
					case 0x2EC09BBCu:
						v222 = (v221 ^ (v221 >> 11)) & 0x13;
						v226 = -507983626;
						break;
					case 0x2FE807E6u:
						v222 = v221 ^ (v221 >> 31);
						v226 = 132755381;
						break;
					}
				}
				else
				{
					switch (v225)
					{
					case 0x1A734B66u:
						v220 -= 0x61C8864680B583EBi64;
						v221 = v220;
						v226 = 58127095;
						break;
					case 0x1E6A4Cu:
						v221 = 0x88B67DFC339AC68i64 * ((v221 >> 51) ^ v221);
						v226 = -2009958170;
						break;
					case 0x336C6F6u:
						v221 = 0xFA2CD373DE84A7DFui64 * ((v221 >> 27) ^ v221);
						v226 = 111074362;
						break;
					case 0xA53E85Cu:
						v222 = v221 ^ (v221 >> 31);
						v226 = 1361002055;
						break;
					case 0xFAB516Fu:
						v221 = 0xAE5136DD1E3F7F5i64 * ((v221 >> 51) ^ v221);
						v226 = 847583961;
						break;
					case 0x1905B991u:
						v221 = 0xBF58476D1CE4E5B9ui64 * ((v221 >> 30) ^ v221);
						v226 = 1947635311;
						break;
					}
				}
				v225 ^= v226;
			} while (v225 != 1486039643);
		} while (*v219);
		goto LABEL_1403;
	case 0xAE:
		*tmp = -97;
		v64 = 1752254548;
		v65 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v66 = tmp + 2;
		do
		{
			v64 *= encryptiontable[314 * (v65 % 7u) + v64 % 0xF0];
			if (*v66 != 84 - (BYTE)v64)
				*v66 ^= 84 - (BYTE)v64;
			++v65;
			++v66;
		} while (v65 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xAF:
		*tmp = -97;
		v57 = -124;
		v58 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v59 = tmp + 2;
		do
		{
			v57 ^= v58;
			v60 = RotateLeft8(*v59, v57);
			*v59 = v60;
			if (v60 != -124 - v57)
				*v59 = (-124 - v57) ^ v60;
			++v58;
			++v59;
		} while (v58 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xB1:
		*tmp = -97;
		v71 = 339174210;
		v72 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v73 = tmp + 2;
		do
		{
			v71 *= encryptiontable[v71 % 0x10C];
			if (*v73 != (BYTE)v71 + 66)
				*v73 ^= (BYTE)v71 + 66;
			++v72;
			++v73;
		} while (v72 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xB2:
		*tmp = -97;
		v47 = 924357779;
		v48 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v49 = tmp + 2;
		do
		{
			v47 += encryptiontable[314 * (v47 % 0xB) + v48 % 0x10Bu];
			v50 = RotateRight8(*v49, v47);
			*v49 = v50;
			if (v50 != (BYTE)v47 - 109)
				*v49 = (v47 - 109) ^ v50;
			++v48;
			++v49;
		} while (v48 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xB3:
		*tmp = -97;
		v29 = -2122213293;
		v30 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v31 = tmp + 2;
		do
		{
			v29 += encryptiontable[314 * (v29 % 0xC) + v30 % 0x25u];
			if (*v31 != ((unsigned __int8)v29 ^ 0x53))
				*v31 ^= (unsigned __int8)v29 ^ 0x53;
			++v30;
			++v31;
		} while (v30 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xB4:
		*tmp = -97;
		v23 = -2095609803;
		v24 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v25 = tmp + 2;
		do
		{
			v23 ^= encryptiontable[314 * (v23 % 6) + (v24 & 0x1F)];
			if (*v25 != (BYTE)(53 * (BYTE)v23))
				*v25 ^= (BYTE)(53 * (BYTE)v23);
			++v24;
			++v25;
		} while (v24 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xB5:
		*tmp = -97;
		v20 = 97;
		v21 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v22 = tmp + 2;
		do
		{
			v20 += v21;
			if (*v22 != ((unsigned __int8)v20 ^ 0x61))
				*v22 ^= v20 ^ 0x61;
			++v21;
			++v22;
		} while (v21 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xB6:
		*tmp = -97;
		v85 = 428896339;
		v86 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v87 = tmp + 2;
		do
		{
			v85 *= encryptiontable[314 * (v85 % 9) + v86 % 0x41u];
			v88 = RotateRight8(*v87, v85);
			*v87 = v88;
			if (v88 != (BYTE)(v85 + 83))
				*v87 = (BYTE)(v85 + 83) ^ v88;
			++v86;
			++v87;
		} while (v86 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xB7:
		*tmp = -97;
		v39 = 57;
		v40 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v41 = tmp + 2;
		do
		{
			v39 += v40;
			v42 = RotateLeft8(*v41, v39);
			*v41 = v42;
			if (v42 != (BYTE)(57 * v39))
				*v41 = (BYTE)(57 * v39) ^ v42;
			++v40;
			++v41;
		} while (v40 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xB8:
		*tmp = -97;
		v54 = 113;
		v55 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v56 = tmp + 2;
		do
		{
			v54 += v55;
			if (*v56 != 113 - v54)
				*v56 ^= 113 - v54;
			++v55;
			++v56;
		} while (v55 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xB9:
		*tmp = -97;
		v104 = 32;
		v105 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v106 = tmp + 2;
		do
		{
			v104 *= (BYTE)v105;
			if (*v106 != v104 + 32)
				*v106 ^= v104 + 32;
			++v105;
			++v106;
		} while (v105 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xBA:
		*tmp = -97;
		v67 = 88110114;
		v68 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v69 = tmp + 2;
		do
		{
			v67 -= encryptiontable[314 * (v67 % 6) + v68 % 0x10Fu];
			v70 = RotateLeft8(*v69, v67);
			*v69 = v70;
			if (v70 != ((unsigned __int8)v67 ^ 0x22))
				*v69 = v67 ^ v70 ^ 0x22;
			++v68;
			++v69;
		} while (v68 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xBB:
		*tmp = -97;
		v35 = 908137505;
		v36 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v37 = tmp + 2;
		do
		{
			v35 += encryptiontable[314 * (v35 % 0xA) + v36 % 0x32u];
			v38 = RotateRight8(*v37, v35);
			*v37 = v38;
			if (v38 != (BYTE)(33 * (BYTE)v35))
				*v37 = v38 ^ (BYTE)(33 * v35);
			++v36;
			++v37;
		} while (v36 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xBC:
		*tmp = -97;
		v7 = 1115976849;
		v8 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v9 = tmp + 2;
		do
		{
			v7 += encryptiontable[314 * (v8 & 3) + v7 % 0x45];
			if (*v9 != ((unsigned __int8)v7 ^ 0x91))
				*v9 ^= (unsigned __int8)v7 ^ 0x91;
			++v8;
			++v9;
		} while (v8 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xBD:
		*tmp = -97;
		v61 = 2004443495;
		v62 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
			goto LABEL_260;
		v63 = tmp + 2;
		do
		{
			v61 *= encryptiontable[314 * (v61 % 0xB) + v62 % 0xDCu];
			if (*v63 != (BYTE)(103 * (BYTE)v61))
				*v63 ^= (BYTE)(103 * (BYTE)v61);
			++v62;
			++v63;
		} while (v62 < (unsigned __int8)tmp[1] - 1);
		return reinterpret_cast<char*>(tmp + 2);
	case 0xBE:
		*tmp = -123;
		v171 = tmp + 1;
		v172 = 0i64;
		v173 = 0;
		v174 = 2056317816;
		v175 = -1773003657;
		do
		{
			if (v174 > 0x76707255)
			{
				switch (v174)
				{
				case 0x7A90EB78u:
					v172 = 0x71F24E234B4AE5C1i64;
					v175 = 702187466;
					break;
				case 0xC1896941:
					v172 = 0x251F38073536C085i64;
					v175 = 8278887;
					break;
				case 0xDE225C4F:
					v172 = 0xA624F3352DCD72CAui64;
					v175 = 84337;
					break;
				case 0xF0A46D2A:
					v172 = 0x22B514FE71CAEBD9i64;
					v175 = -311254597;
					break;
				}
			}
			else
			{
				switch (v174)
				{
				case 0x76707255u:
					v172 = 0xE501406246D82B43ui64;
					v175 = 1645671278;
					break;
				case 0x37E988Bu:
					v172 = 0x6BA4982A5D7C79ABi64;
					v175 = 8354443;
					break;
				case 0x9381C27u:
					v172 = 0x7585FAB57DCCD6DCi64;
					v175 = 1291095920;
					break;
				case 0xA8D3574u:
					v172 = 0x9CB5496504BDDFi64;
					v175 = 172415966;
					break;
				case 0x1258847Bu:
					v172 = 0xE018DF4A41572380ui64;
					v175 = 1223816281;
					break;
				case 0x756052D6u:
					v172 = 0x9F0CA40933AF122Dui64;
					v175 = -399699634;
					break;
				}
			}
			v174 ^= v175;
		} while (v174 != 1397386418);
		v176 = 0i64;
		tmp = reinterpret_cast<UINT8*>(str);
		if (!*v171)
			goto LABEL_1404;
		do
		{
			v177 = 891146330;
			v178 = 1633942127;
			do
			{
				if (v177 > 0x662E468D)
				{
					if (v177 > 0xBEE43095)
					{
						switch (v177)
						{
						case 0xC0B49924:
							v176 = 0x6832BB906C9777BEi64 * ((v176 >> 30) ^ v176);
							v178 = 767239709;
							break;
						case 0xCB482AEB:
							v176 = 0x94D049BB133111EBui64 * ((v176 >> 27) ^ v176);
							v178 = -1417216353;
							break;
						case 0xD9854041:
							v176 = 0xBF58476D1CE4E5B9ui64 * ((v176 >> 30) ^ v176);
							v178 = 315452074;
							break;
						case 0xFB828500:
							*v171 = RotateRight8(*v171, v173);
							v178 = -1649622131;
							break;
						}
					}
					else
					{
						switch (v177)
						{
						case 0xBEE43095:
							v173 = (v176 ^ (v176 >> 31)) & 0x14;
							v178 = 256664788;
							break;
						case 0x7DB5BAE5u:
							v172 -= 0x40A7B892E31B1A47i64;
							v176 = v172;
							v178 = 391993062;
							break;
						case 0x8972867D:
							v176 = 0xC3E4467A199E86i64 * ((v176 >> 37) ^ v176);
							v178 = 101729931;
							break;
						case 0x9314E0CF:
							v173 = (v176 ^ (v176 >> 37)) & 7;
							v178 = 129232837;
							break;
						case 0x998C996A:
							v176 = 0x96B44ED4D56057C1ui64 * ((v176 >> 39) ^ v176);
							v178 = -1188791561;
							break;
						}
					}
				}
				else if (v177 == 1714308749)
				{
					++v171;
					v178 = -1011562342;
				}
				else if (v177 > 0x2C3274B5)
				{
					switch (v177)
					{
					case 0x351DD05Au:
						v172 -= 0x61C8864680B583EBi64;
						v176 = v172;
						v178 = -325545957;
						break;
					case 0x36FB9150u:
						*v171 = RotateLeft8(*v171, v173);
						v178 = 515984963;
						break;
					case 0x4AA34519u:
						v176 = 0x94D049BB133111EBui64 * ((v176 >> 30) ^ v176);
						v178 = 70740026;
						break;
					case 0x60CED474u:
						v173 = v176 ^ (v176 >> 31);
						v178 = -1689497228;
						break;
					}
				}
				else
				{
					switch (v177)
					{
					case 0x2C3274B5u:
						v176 = 0x9E3779B97F4A7C15ui64 * ((v176 >> 27) ^ v176);
						v178 = -567964591;
						break;
					case 0x649676u:
						v172 -= 0x4D71408B95487609i64;
						v176 = v172;
						v178 = 1939017846;
						break;
					case 0x77469FBu:
						v176 = 0x2E19D754783B718i64 * ((v176 >> 27) ^ v176);
						v178 = -465362479;
						break;
					case 0xA3483C1u:
						--v171;
						v178 = -1734903691;
						break;
					case 0x126DF3ADu:
						v172 += 0x90A6352A6D1E1E0i64;
						v176 = v172;
						v178 = -1555267626;
						break;
					case 0x26DF2D43u:
						v173 = v176 ^ (v176 >> 31);
						v178 = -995284238;
						break;
					}
				}
				v177 ^= v178;
			} while (v177 != -1516597737);
		} while (*v171);
		goto LABEL_1403;
	case 0xBF:
		*tmp = -97;
		v16 = -105;
		v17 = 0;
		if ((unsigned __int8)tmp[1] - 1 <= 0)
		{
		LABEL_260:
			tmp += 2;
		}
		else
		{
			v18 = tmp + 2;
			do
			{
				v16 += v17;
				v19 = RotateRight8(*v18, v16);
				*v18 = v19;
				if (v19 != ((unsigned __int8)v16 ^ 0x97))
					*v18 = v19 ^ v16 ^ 0x97;
				++v17;
				++v18;
			} while (v17 < (unsigned __int8)tmp[1] - 1);
			tmp += 2;
		}
		return reinterpret_cast<char*>(tmp);
	default:
		return reinterpret_cast<char*>(tmp);
	}
LABEL_713:
	v209 = -1121864545;
	v210 = 988208467;
	while (v209 <= 0x6B4EBB18)
	{
		if (v209 == 1800321816)
		{
			v204 -= 0x21B40FDDBDB79525i64;
			v210 = -977583469;
		LABEL_757:
			v205 = v204;
			goto LABEL_758;
		}
		if (v209 > 0x3E102AED)
		{
			switch (v209)
			{
			case 0x4CCAFC98u:
				v205 = 0x9E3779B97F4A7C15ui64 * ((v205 >> 27) ^ v205);
				v210 = 1307294906;
				break;
			case 0x5B9BE9AAu:
				v206 = v205 ^ (v205 >> 31);
				v210 = 121447212;
				break;
			case 0x645437F5u:
				v205 = 0x8575474D1E63127i64 * ((v205 >> 18) ^ v205);
				v210 = -1289082440;
				break;
			}
			goto LABEL_758;
		}
		if (v209 == 1041246957)
		{
			*v203 = RotateLeft8(*v203, v206);
			v210 = 429552485;
		}
		else if (v209 == 97297828)
		{
			v205 = 0x94D049BB133111EBui64 * ((v205 >> 30) ^ v205);
			v210 = -431065953;
		}
		else
		{
			if (v209 != 219428346)
			{
				if (v209 != 294481706)
				{
					if (v209 == 609496466)
					{
						v205 = 0x94D049BB133111EBui64 * ((v205 >> 27) ^ v205);
						v210 = -622350060;
					}
					goto LABEL_758;
				}
				v204 -= 0x563A9487BB9A5611i64;
				v210 = 289245914;
				goto LABEL_757;
			}
			v205 = 0x4AE5F15CEEE14C61i64 * ((v205 >> 30) ^ v205);
			v210 = -2107224375;
		}
	LABEL_758:
		v209 ^= v210;
		if (v209 == 1124299885)
		{
			if (!*v203)
				return reinterpret_cast<char*>(tmp);
			goto LABEL_713;
		}
	}
	if (v209 > 0xBD21B49F)
	{
		if (v209 != -1053912678)
		{
			switch (v209)
			{
			case 0xC963B6A4:
				++v203;
				v210 = -1973370167;
				break;
			case 0xDA3235A8:
				--v203;
				v210 = 792851059;
				break;
			case 0xEDAE5609:
				*v203 = RotateRight8(*v203, v206);
				v210 = 617472173;
				break;
			case 0xFEB39C86:
				v206 = v205 ^ (v205 >> 31);
				v210 = 320719503;
				break;
			}
			goto LABEL_758;
		}
		v204 -= 0x40A7B892E31B1A47i64;
		v210 = 572545278;
	}
	else
	{
		if (v209 != -1121864545)
		{
			switch (v209)
			{
			case 0x6F0B3AE8u:
				v205 = 0xBF58476D1CE4E5B9ui64 * ((v205 >> 30) ^ v205);
				v210 = 1264523130;
				break;
			case 0x8338E9F9:
				v206 = (v205 ^ (v205 >> 30)) & 0x11;
				v210 = 86572333;
				break;
			case 0x9D8231DC:
				v206 = (v205 ^ (v205 >> 31)) & 0x12;
				v210 = 1542930880;
				break;
			case 0xB1455BD4:
				v205 = 0xEF9E9F3AD4F4CB3i64 * ((v205 >> 15) ^ v205);
				v210 = 133032943;
				break;
			case 0xBB9BE147:
				v205 = 0x816123461622F71i64 * ((v205 >> 27) ^ v205);
				v210 = 292777674;
				break;
			}
			goto LABEL_758;
		}
		v204 -= 0x61C8864680B583EBi64;
		v210 = -768962953;
	}
	goto LABEL_757;
}

#pragma warning(pop)