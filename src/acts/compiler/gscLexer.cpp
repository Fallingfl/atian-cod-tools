
// Generated from .\grammar\gsc.g4 by ANTLR 4.13.0


#include "gscLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct GscLexerStaticData final {
  GscLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GscLexerStaticData(const GscLexerStaticData&) = delete;
  GscLexerStaticData(GscLexerStaticData&&) = delete;
  GscLexerStaticData& operator=(const GscLexerStaticData&) = delete;
  GscLexerStaticData& operator=(GscLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gsclexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
GscLexerStaticData *gsclexerLexerStaticData = nullptr;

void gsclexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gsclexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(gsclexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GscLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", 
      "T__57", "T__58", "T__59", "T__60", "T__61", "T__62", "T__63", "T__64", 
      "T__65", "T__66", "T__67", "T__68", "T__69", "T__70", "NEWLINE", "WHITESPACE", 
      "INTEGER10", "INTEGER16", "INTEGER8", "INTEGER2", "FLOATVAL", "BUILTIN", 
      "BOOL_VALUE", "UNDEFINED_VALUE", "IDENTIFIER", "STRUCT_IDENTIFIER", 
      "PATH", "STRING", "HASHSTRING"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'#include'", "'#using'", "';'", "'#namespace'", "'function'", 
      "'private'", "'autoexec'", "'('", "')'", "'event_handler'", "'['", 
      "']'", "','", "'*'", "'&'", "'='", "'...'", "'{'", "'}'", "':'", "'for'", 
      "'while'", "'do'", "'foreach'", "'in'", "'if'", "'else'", "'switch'", 
      "'case'", "'default'", "'thread'", "'childthread'", "'nop'", "'::'", 
      "'->'", "'\\u003F'", "'+='", "'-='", "'/='", "'*='", "'%='", "'&='", 
      "'|='", "'^='", "'<<='", "'>>='", "'~='", "'||'", "'&&'", "'|'", "'^'", 
      "'!='", "'=='", "'!=='", "'==='", "'<'", "'<='", "'>'", "'>='", "'<<'", 
      "'>>'", "'+'", "'-'", "'/'", "'%'", "'!'", "'~'", "'++'", "'--'", 
      "'.'", "'@'", "", "", "", "", "", "", "", "", "", "'undefined'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "NEWLINE", "WHITESPACE", "INTEGER10", "INTEGER16", 
      "INTEGER8", "INTEGER2", "FLOATVAL", "BUILTIN", "BOOL_VALUE", "UNDEFINED_VALUE", 
      "IDENTIFIER", "STRUCT_IDENTIFIER", "PATH", "STRING", "HASHSTRING"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,86,636,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
  	1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
  	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
  	6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
  	1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,
  	14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
  	20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,
  	26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
  	28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
  	30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
  	31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,
  	36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,
  	41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,
  	45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,
  	50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,
  	54,1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,
  	59,1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,
  	66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,71,3,71,450,
  	8,71,1,71,1,71,3,71,454,8,71,1,71,1,71,1,72,1,72,1,72,1,72,1,73,3,73,
  	463,8,73,1,73,1,73,5,73,467,8,73,10,73,12,73,470,9,73,1,74,3,74,473,8,
  	74,1,74,1,74,1,74,1,74,4,74,479,8,74,11,74,12,74,480,1,75,3,75,484,8,
  	75,1,75,1,75,5,75,488,8,75,10,75,12,75,491,9,75,1,76,3,76,494,8,76,1,
  	76,1,76,1,76,1,76,5,76,500,8,76,10,76,12,76,503,9,76,1,77,3,77,506,8,
  	77,1,77,5,77,509,8,77,10,77,12,77,512,9,77,1,77,1,77,4,77,516,8,77,11,
  	77,12,77,517,1,77,4,77,521,8,77,11,77,12,77,522,1,77,1,77,5,77,527,8,
  	77,10,77,12,77,530,9,77,3,77,532,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,
  	78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
  	78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
  	78,1,78,3,78,570,8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,
  	79,581,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,81,1,
  	81,5,81,595,8,81,10,81,12,81,598,9,81,1,82,1,82,1,82,5,82,603,8,82,10,
  	82,12,82,606,9,82,1,83,4,83,609,8,83,11,83,12,83,610,1,83,1,83,1,83,1,
  	83,1,83,1,83,1,83,1,83,3,83,621,8,83,1,84,1,84,1,84,1,84,5,84,627,8,84,
  	10,84,12,84,630,9,84,1,84,1,84,1,85,1,85,1,85,0,0,86,1,1,3,2,5,3,7,4,
  	9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
  	17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
  	57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
  	40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
  	103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,
  	123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,
  	143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,
  	163,82,165,83,167,84,169,85,171,86,1,0,11,2,0,9,9,32,32,1,0,49,57,1,0,
  	48,57,2,0,48,57,97,102,1,0,48,55,1,0,48,49,3,0,65,90,95,95,97,122,4,0,
  	48,57,65,90,95,95,97,122,5,0,47,57,65,90,92,92,95,95,97,122,2,0,34,34,
  	92,92,1,0,35,35,664,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
  	9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
  	0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
  	0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
  	41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
  	0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
  	0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
  	73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
  	0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
  	0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
  	0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,
  	0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
  	0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,
  	0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,
  	0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,
  	0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,
  	0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,1,173,1,0,0,0,
  	3,182,1,0,0,0,5,189,1,0,0,0,7,191,1,0,0,0,9,202,1,0,0,0,11,211,1,0,0,
  	0,13,219,1,0,0,0,15,228,1,0,0,0,17,230,1,0,0,0,19,232,1,0,0,0,21,246,
  	1,0,0,0,23,248,1,0,0,0,25,250,1,0,0,0,27,252,1,0,0,0,29,254,1,0,0,0,31,
  	256,1,0,0,0,33,258,1,0,0,0,35,262,1,0,0,0,37,264,1,0,0,0,39,266,1,0,0,
  	0,41,268,1,0,0,0,43,272,1,0,0,0,45,278,1,0,0,0,47,281,1,0,0,0,49,289,
  	1,0,0,0,51,292,1,0,0,0,53,295,1,0,0,0,55,300,1,0,0,0,57,307,1,0,0,0,59,
  	312,1,0,0,0,61,320,1,0,0,0,63,327,1,0,0,0,65,339,1,0,0,0,67,343,1,0,0,
  	0,69,346,1,0,0,0,71,349,1,0,0,0,73,351,1,0,0,0,75,354,1,0,0,0,77,357,
  	1,0,0,0,79,360,1,0,0,0,81,363,1,0,0,0,83,366,1,0,0,0,85,369,1,0,0,0,87,
  	372,1,0,0,0,89,375,1,0,0,0,91,379,1,0,0,0,93,383,1,0,0,0,95,386,1,0,0,
  	0,97,389,1,0,0,0,99,392,1,0,0,0,101,394,1,0,0,0,103,396,1,0,0,0,105,399,
  	1,0,0,0,107,402,1,0,0,0,109,406,1,0,0,0,111,410,1,0,0,0,113,412,1,0,0,
  	0,115,415,1,0,0,0,117,417,1,0,0,0,119,420,1,0,0,0,121,423,1,0,0,0,123,
  	426,1,0,0,0,125,428,1,0,0,0,127,430,1,0,0,0,129,432,1,0,0,0,131,434,1,
  	0,0,0,133,436,1,0,0,0,135,438,1,0,0,0,137,441,1,0,0,0,139,444,1,0,0,0,
  	141,446,1,0,0,0,143,453,1,0,0,0,145,457,1,0,0,0,147,462,1,0,0,0,149,472,
  	1,0,0,0,151,483,1,0,0,0,153,493,1,0,0,0,155,505,1,0,0,0,157,569,1,0,0,
  	0,159,580,1,0,0,0,161,582,1,0,0,0,163,592,1,0,0,0,165,599,1,0,0,0,167,
  	608,1,0,0,0,169,622,1,0,0,0,171,633,1,0,0,0,173,174,5,35,0,0,174,175,
  	5,105,0,0,175,176,5,110,0,0,176,177,5,99,0,0,177,178,5,108,0,0,178,179,
  	5,117,0,0,179,180,5,100,0,0,180,181,5,101,0,0,181,2,1,0,0,0,182,183,5,
  	35,0,0,183,184,5,117,0,0,184,185,5,115,0,0,185,186,5,105,0,0,186,187,
  	5,110,0,0,187,188,5,103,0,0,188,4,1,0,0,0,189,190,5,59,0,0,190,6,1,0,
  	0,0,191,192,5,35,0,0,192,193,5,110,0,0,193,194,5,97,0,0,194,195,5,109,
  	0,0,195,196,5,101,0,0,196,197,5,115,0,0,197,198,5,112,0,0,198,199,5,97,
  	0,0,199,200,5,99,0,0,200,201,5,101,0,0,201,8,1,0,0,0,202,203,5,102,0,
  	0,203,204,5,117,0,0,204,205,5,110,0,0,205,206,5,99,0,0,206,207,5,116,
  	0,0,207,208,5,105,0,0,208,209,5,111,0,0,209,210,5,110,0,0,210,10,1,0,
  	0,0,211,212,5,112,0,0,212,213,5,114,0,0,213,214,5,105,0,0,214,215,5,118,
  	0,0,215,216,5,97,0,0,216,217,5,116,0,0,217,218,5,101,0,0,218,12,1,0,0,
  	0,219,220,5,97,0,0,220,221,5,117,0,0,221,222,5,116,0,0,222,223,5,111,
  	0,0,223,224,5,101,0,0,224,225,5,120,0,0,225,226,5,101,0,0,226,227,5,99,
  	0,0,227,14,1,0,0,0,228,229,5,40,0,0,229,16,1,0,0,0,230,231,5,41,0,0,231,
  	18,1,0,0,0,232,233,5,101,0,0,233,234,5,118,0,0,234,235,5,101,0,0,235,
  	236,5,110,0,0,236,237,5,116,0,0,237,238,5,95,0,0,238,239,5,104,0,0,239,
  	240,5,97,0,0,240,241,5,110,0,0,241,242,5,100,0,0,242,243,5,108,0,0,243,
  	244,5,101,0,0,244,245,5,114,0,0,245,20,1,0,0,0,246,247,5,91,0,0,247,22,
  	1,0,0,0,248,249,5,93,0,0,249,24,1,0,0,0,250,251,5,44,0,0,251,26,1,0,0,
  	0,252,253,5,42,0,0,253,28,1,0,0,0,254,255,5,38,0,0,255,30,1,0,0,0,256,
  	257,5,61,0,0,257,32,1,0,0,0,258,259,5,46,0,0,259,260,5,46,0,0,260,261,
  	5,46,0,0,261,34,1,0,0,0,262,263,5,123,0,0,263,36,1,0,0,0,264,265,5,125,
  	0,0,265,38,1,0,0,0,266,267,5,58,0,0,267,40,1,0,0,0,268,269,5,102,0,0,
  	269,270,5,111,0,0,270,271,5,114,0,0,271,42,1,0,0,0,272,273,5,119,0,0,
  	273,274,5,104,0,0,274,275,5,105,0,0,275,276,5,108,0,0,276,277,5,101,0,
  	0,277,44,1,0,0,0,278,279,5,100,0,0,279,280,5,111,0,0,280,46,1,0,0,0,281,
  	282,5,102,0,0,282,283,5,111,0,0,283,284,5,114,0,0,284,285,5,101,0,0,285,
  	286,5,97,0,0,286,287,5,99,0,0,287,288,5,104,0,0,288,48,1,0,0,0,289,290,
  	5,105,0,0,290,291,5,110,0,0,291,50,1,0,0,0,292,293,5,105,0,0,293,294,
  	5,102,0,0,294,52,1,0,0,0,295,296,5,101,0,0,296,297,5,108,0,0,297,298,
  	5,115,0,0,298,299,5,101,0,0,299,54,1,0,0,0,300,301,5,115,0,0,301,302,
  	5,119,0,0,302,303,5,105,0,0,303,304,5,116,0,0,304,305,5,99,0,0,305,306,
  	5,104,0,0,306,56,1,0,0,0,307,308,5,99,0,0,308,309,5,97,0,0,309,310,5,
  	115,0,0,310,311,5,101,0,0,311,58,1,0,0,0,312,313,5,100,0,0,313,314,5,
  	101,0,0,314,315,5,102,0,0,315,316,5,97,0,0,316,317,5,117,0,0,317,318,
  	5,108,0,0,318,319,5,116,0,0,319,60,1,0,0,0,320,321,5,116,0,0,321,322,
  	5,104,0,0,322,323,5,114,0,0,323,324,5,101,0,0,324,325,5,97,0,0,325,326,
  	5,100,0,0,326,62,1,0,0,0,327,328,5,99,0,0,328,329,5,104,0,0,329,330,5,
  	105,0,0,330,331,5,108,0,0,331,332,5,100,0,0,332,333,5,116,0,0,333,334,
  	5,104,0,0,334,335,5,114,0,0,335,336,5,101,0,0,336,337,5,97,0,0,337,338,
  	5,100,0,0,338,64,1,0,0,0,339,340,5,110,0,0,340,341,5,111,0,0,341,342,
  	5,112,0,0,342,66,1,0,0,0,343,344,5,58,0,0,344,345,5,58,0,0,345,68,1,0,
  	0,0,346,347,5,45,0,0,347,348,5,62,0,0,348,70,1,0,0,0,349,350,5,63,0,0,
  	350,72,1,0,0,0,351,352,5,43,0,0,352,353,5,61,0,0,353,74,1,0,0,0,354,355,
  	5,45,0,0,355,356,5,61,0,0,356,76,1,0,0,0,357,358,5,47,0,0,358,359,5,61,
  	0,0,359,78,1,0,0,0,360,361,5,42,0,0,361,362,5,61,0,0,362,80,1,0,0,0,363,
  	364,5,37,0,0,364,365,5,61,0,0,365,82,1,0,0,0,366,367,5,38,0,0,367,368,
  	5,61,0,0,368,84,1,0,0,0,369,370,5,124,0,0,370,371,5,61,0,0,371,86,1,0,
  	0,0,372,373,5,94,0,0,373,374,5,61,0,0,374,88,1,0,0,0,375,376,5,60,0,0,
  	376,377,5,60,0,0,377,378,5,61,0,0,378,90,1,0,0,0,379,380,5,62,0,0,380,
  	381,5,62,0,0,381,382,5,61,0,0,382,92,1,0,0,0,383,384,5,126,0,0,384,385,
  	5,61,0,0,385,94,1,0,0,0,386,387,5,124,0,0,387,388,5,124,0,0,388,96,1,
  	0,0,0,389,390,5,38,0,0,390,391,5,38,0,0,391,98,1,0,0,0,392,393,5,124,
  	0,0,393,100,1,0,0,0,394,395,5,94,0,0,395,102,1,0,0,0,396,397,5,33,0,0,
  	397,398,5,61,0,0,398,104,1,0,0,0,399,400,5,61,0,0,400,401,5,61,0,0,401,
  	106,1,0,0,0,402,403,5,33,0,0,403,404,5,61,0,0,404,405,5,61,0,0,405,108,
  	1,0,0,0,406,407,5,61,0,0,407,408,5,61,0,0,408,409,5,61,0,0,409,110,1,
  	0,0,0,410,411,5,60,0,0,411,112,1,0,0,0,412,413,5,60,0,0,413,414,5,61,
  	0,0,414,114,1,0,0,0,415,416,5,62,0,0,416,116,1,0,0,0,417,418,5,62,0,0,
  	418,419,5,61,0,0,419,118,1,0,0,0,420,421,5,60,0,0,421,422,5,60,0,0,422,
  	120,1,0,0,0,423,424,5,62,0,0,424,425,5,62,0,0,425,122,1,0,0,0,426,427,
  	5,43,0,0,427,124,1,0,0,0,428,429,5,45,0,0,429,126,1,0,0,0,430,431,5,47,
  	0,0,431,128,1,0,0,0,432,433,5,37,0,0,433,130,1,0,0,0,434,435,5,33,0,0,
  	435,132,1,0,0,0,436,437,5,126,0,0,437,134,1,0,0,0,438,439,5,43,0,0,439,
  	440,5,43,0,0,440,136,1,0,0,0,441,442,5,45,0,0,442,443,5,45,0,0,443,138,
  	1,0,0,0,444,445,5,46,0,0,445,140,1,0,0,0,446,447,5,64,0,0,447,142,1,0,
  	0,0,448,450,5,13,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,
  	451,454,5,10,0,0,452,454,5,13,0,0,453,449,1,0,0,0,453,452,1,0,0,0,454,
  	455,1,0,0,0,455,456,6,71,0,0,456,144,1,0,0,0,457,458,7,0,0,0,458,459,
  	1,0,0,0,459,460,6,72,0,0,460,146,1,0,0,0,461,463,5,45,0,0,462,461,1,0,
  	0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,468,7,1,0,0,465,467,7,2,0,0,466,
  	465,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,148,1,
  	0,0,0,470,468,1,0,0,0,471,473,5,45,0,0,472,471,1,0,0,0,472,473,1,0,0,
  	0,473,474,1,0,0,0,474,475,5,48,0,0,475,476,5,120,0,0,476,478,1,0,0,0,
  	477,479,7,3,0,0,478,477,1,0,0,0,479,480,1,0,0,0,480,478,1,0,0,0,480,481,
  	1,0,0,0,481,150,1,0,0,0,482,484,5,45,0,0,483,482,1,0,0,0,483,484,1,0,
  	0,0,484,485,1,0,0,0,485,489,5,48,0,0,486,488,7,4,0,0,487,486,1,0,0,0,
  	488,491,1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,152,1,0,0,0,491,489,
  	1,0,0,0,492,494,5,45,0,0,493,492,1,0,0,0,493,494,1,0,0,0,494,495,1,0,
  	0,0,495,496,5,48,0,0,496,497,5,98,0,0,497,501,1,0,0,0,498,500,7,5,0,0,
  	499,498,1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,154,
  	1,0,0,0,503,501,1,0,0,0,504,506,5,45,0,0,505,504,1,0,0,0,505,506,1,0,
  	0,0,506,531,1,0,0,0,507,509,7,2,0,0,508,507,1,0,0,0,509,512,1,0,0,0,510,
  	508,1,0,0,0,510,511,1,0,0,0,511,513,1,0,0,0,512,510,1,0,0,0,513,515,5,
  	46,0,0,514,516,7,2,0,0,515,514,1,0,0,0,516,517,1,0,0,0,517,515,1,0,0,
  	0,517,518,1,0,0,0,518,532,1,0,0,0,519,521,7,2,0,0,520,519,1,0,0,0,521,
  	522,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,524,528,5,
  	46,0,0,525,527,7,2,0,0,526,525,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,
  	0,528,529,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,531,510,1,0,0,0,531,
  	520,1,0,0,0,532,156,1,0,0,0,533,534,5,98,0,0,534,535,5,114,0,0,535,536,
  	5,101,0,0,536,537,5,97,0,0,537,570,5,107,0,0,538,539,5,99,0,0,539,540,
  	5,111,0,0,540,541,5,110,0,0,541,542,5,116,0,0,542,543,5,105,0,0,543,544,
  	5,110,0,0,544,545,5,117,0,0,545,570,5,101,0,0,546,547,5,103,0,0,547,548,
  	5,111,0,0,548,549,5,116,0,0,549,570,5,111,0,0,550,551,5,114,0,0,551,552,
  	5,101,0,0,552,553,5,116,0,0,553,554,5,117,0,0,554,555,5,114,0,0,555,570,
  	5,110,0,0,556,557,5,119,0,0,557,558,5,97,0,0,558,559,5,105,0,0,559,570,
  	5,116,0,0,560,561,5,119,0,0,561,562,5,97,0,0,562,563,5,105,0,0,563,564,
  	5,116,0,0,564,565,5,102,0,0,565,566,5,114,0,0,566,567,5,97,0,0,567,568,
  	5,109,0,0,568,570,5,101,0,0,569,533,1,0,0,0,569,538,1,0,0,0,569,546,1,
  	0,0,0,569,550,1,0,0,0,569,556,1,0,0,0,569,560,1,0,0,0,570,158,1,0,0,0,
  	571,572,5,116,0,0,572,573,5,114,0,0,573,574,5,117,0,0,574,581,5,101,0,
  	0,575,576,5,102,0,0,576,577,5,97,0,0,577,578,5,108,0,0,578,579,5,115,
  	0,0,579,581,5,101,0,0,580,571,1,0,0,0,580,575,1,0,0,0,581,160,1,0,0,0,
  	582,583,5,117,0,0,583,584,5,110,0,0,584,585,5,100,0,0,585,586,5,101,0,
  	0,586,587,5,102,0,0,587,588,5,105,0,0,588,589,5,110,0,0,589,590,5,101,
  	0,0,590,591,5,100,0,0,591,162,1,0,0,0,592,596,7,6,0,0,593,595,7,7,0,0,
  	594,593,1,0,0,0,595,598,1,0,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,164,
  	1,0,0,0,598,596,1,0,0,0,599,600,5,35,0,0,600,604,7,6,0,0,601,603,7,7,
  	0,0,602,601,1,0,0,0,603,606,1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,
  	166,1,0,0,0,606,604,1,0,0,0,607,609,7,8,0,0,608,607,1,0,0,0,609,610,1,
  	0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,620,1,0,0,0,612,613,5,46,0,
  	0,613,614,5,103,0,0,614,615,5,115,0,0,615,621,5,99,0,0,616,617,5,46,0,
  	0,617,618,5,99,0,0,618,619,5,115,0,0,619,621,5,99,0,0,620,612,1,0,0,0,
  	620,616,1,0,0,0,620,621,1,0,0,0,621,168,1,0,0,0,622,628,5,34,0,0,623,
  	627,8,9,0,0,624,625,5,92,0,0,625,627,9,0,0,0,626,623,1,0,0,0,626,624,
  	1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,
  	0,630,628,1,0,0,0,631,632,5,34,0,0,632,170,1,0,0,0,633,634,7,10,0,0,634,
  	635,3,169,84,0,635,172,1,0,0,0,25,0,449,453,462,468,472,480,483,489,493,
  	501,505,510,517,522,528,531,569,580,596,604,610,620,626,628,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gsclexerLexerStaticData = staticData.release();
}

}

gscLexer::gscLexer(CharStream *input) : Lexer(input) {
  gscLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *gsclexerLexerStaticData->atn, gsclexerLexerStaticData->decisionToDFA, gsclexerLexerStaticData->sharedContextCache);
}

gscLexer::~gscLexer() {
  delete _interpreter;
}

std::string gscLexer::getGrammarFileName() const {
  return "gsc.g4";
}

const std::vector<std::string>& gscLexer::getRuleNames() const {
  return gsclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& gscLexer::getChannelNames() const {
  return gsclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& gscLexer::getModeNames() const {
  return gsclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& gscLexer::getVocabulary() const {
  return gsclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView gscLexer::getSerializedATN() const {
  return gsclexerLexerStaticData->serializedATN;
}

const atn::ATN& gscLexer::getATN() const {
  return *gsclexerLexerStaticData->atn;
}




void gscLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gsclexerLexerInitialize();
#else
  ::antlr4::internal::call_once(gsclexerLexerOnceFlag, gsclexerLexerInitialize);
#endif
}
