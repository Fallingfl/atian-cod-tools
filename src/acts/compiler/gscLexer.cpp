
// Generated from .\grammar\gsc.g4 by ANTLR 4.13.0


#include "gscLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct GscLexerStaticData final {
  GscLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GscLexerStaticData(const GscLexerStaticData&) = delete;
  GscLexerStaticData(GscLexerStaticData&&) = delete;
  GscLexerStaticData& operator=(const GscLexerStaticData&) = delete;
  GscLexerStaticData& operator=(GscLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gsclexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
GscLexerStaticData *gsclexerLexerStaticData = nullptr;

void gsclexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gsclexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(gsclexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GscLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", 
      "T__57", "T__58", "T__59", "T__60", "T__61", "T__62", "T__63", "T__64", 
      "T__65", "T__66", "T__67", "T__68", "T__69", "T__70", "T__71", "T__72", 
      "T__73", "T__74", "T__75", "T__76", "T__77", "T__78", "T__79", "T__80", 
      "T__81", "T__82", "T__83", "NEWLINE", "WHITESPACE", "INTEGER10", "INTEGER16", 
      "INTEGER8", "INTEGER2", "FLOATVAL", "BUILTIN", "BOOL_VALUE", "UNDEFINED_VALUE", 
      "IDENTIFIER", "STRUCT_IDENTIFIER", "PATH", "STRING", "HASHSTRING"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'/#'", "'#/'", "'#include'", "'#using'", "';'", "'#namespace'", 
      "'#file'", "'#constexpr'", "'#define'", "'='", "'function'", "'private'", 
      "'autoexec'", "'('", "')'", "'event_handler'", "'['", "']'", "'=>'", 
      "'detour'", "'<'", "'>'", "'::'", "','", "'*'", "'&'", "'...'", "'{'", 
      "'}'", "':'", "'for'", "'while'", "'do'", "'foreach'", "'in'", "'if'", 
      "'else'", "'switch'", "'case'", "'default'", "'nop'", "'Nop'", "'DevOp'", 
      "'devop'", "'Devop'", "'->'", "'\\u003F'", "'+='", "'-='", "'/='", 
      "'*='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'~='", 
      "'||'", "'&&'", "'|'", "'^'", "'!='", "'=='", "'!=='", "'==='", "'<='", 
      "'>='", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'!'", "'~'", 
      "'++'", "'--'", "'thread'", "'childthread'", "'threadendon'", "'builtin'", 
      "'.'", "'@'", "", "", "", "", "", "", "", "", "", "'undefined'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "NEWLINE", "WHITESPACE", "INTEGER10", "INTEGER16", "INTEGER8", "INTEGER2", 
      "FLOATVAL", "BUILTIN", "BOOL_VALUE", "UNDEFINED_VALUE", "IDENTIFIER", 
      "STRUCT_IDENTIFIER", "PATH", "STRING", "HASHSTRING"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,99,741,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,
  	1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,
  	1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,
  	1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,
  	1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
  	1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,
  	1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,
  	1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,
  	1,58,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,
  	1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,
  	1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,
  	1,74,1,74,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,78,
  	1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
  	1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,81,
  	1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,83,1,83,1,84,3,84,559,
  	8,84,1,84,1,84,3,84,563,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,86,3,86,
  	572,8,86,1,86,1,86,5,86,576,8,86,10,86,12,86,579,9,86,1,87,3,87,582,8,
  	87,1,87,1,87,1,87,4,87,587,8,87,11,87,12,87,588,1,88,3,88,592,8,88,1,
  	88,1,88,5,88,596,8,88,10,88,12,88,599,9,88,1,89,3,89,602,8,89,1,89,1,
  	89,1,89,5,89,607,8,89,10,89,12,89,610,9,89,1,90,3,90,613,8,90,1,90,5,
  	90,616,8,90,10,90,12,90,619,9,90,1,90,1,90,4,90,623,8,90,11,90,12,90,
  	624,1,90,4,90,628,8,90,11,90,12,90,629,1,90,1,90,5,90,634,8,90,10,90,
  	12,90,637,9,90,3,90,639,8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
  	1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
  	1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,675,
  	8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,686,8,92,1,93,
  	1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,94,1,94,5,94,700,8,94,
  	10,94,12,94,703,9,94,1,95,1,95,1,95,5,95,708,8,95,10,95,12,95,711,9,95,
  	1,96,4,96,714,8,96,11,96,12,96,715,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
  	1,96,3,96,726,8,96,1,97,1,97,1,97,1,97,5,97,732,8,97,10,97,12,97,735,
  	9,97,1,97,1,97,1,98,1,98,1,98,0,0,99,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
  	8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
  	20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
  	63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
  	43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
  	54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,
  	64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,
  	74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,83,167,
  	84,169,85,171,86,173,87,175,88,177,89,179,90,181,91,183,92,185,93,187,
  	94,189,95,191,96,193,97,195,98,197,99,1,0,13,2,0,9,9,32,32,1,0,49,57,
  	1,0,48,57,2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,0,48,55,2,0,66,66,
  	98,98,1,0,48,49,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,5,
  	0,47,57,65,90,92,92,95,95,97,122,2,0,34,34,92,92,4,0,35,35,37,37,64,64,
  	116,116,769,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
  	0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
  	21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
  	0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
  	0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
  	53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
  	0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
  	0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
  	85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
  	0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
  	0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,
  	0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,
  	0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,
  	0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,
  	0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,
  	0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,
  	0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,
  	0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,
  	0,0,0,187,1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,
  	0,0,0,197,1,0,0,0,1,199,1,0,0,0,3,202,1,0,0,0,5,205,1,0,0,0,7,214,1,0,
  	0,0,9,221,1,0,0,0,11,223,1,0,0,0,13,234,1,0,0,0,15,240,1,0,0,0,17,251,
  	1,0,0,0,19,259,1,0,0,0,21,261,1,0,0,0,23,270,1,0,0,0,25,278,1,0,0,0,27,
  	287,1,0,0,0,29,289,1,0,0,0,31,291,1,0,0,0,33,305,1,0,0,0,35,307,1,0,0,
  	0,37,309,1,0,0,0,39,312,1,0,0,0,41,319,1,0,0,0,43,321,1,0,0,0,45,323,
  	1,0,0,0,47,326,1,0,0,0,49,328,1,0,0,0,51,330,1,0,0,0,53,332,1,0,0,0,55,
  	336,1,0,0,0,57,338,1,0,0,0,59,340,1,0,0,0,61,342,1,0,0,0,63,346,1,0,0,
  	0,65,352,1,0,0,0,67,355,1,0,0,0,69,363,1,0,0,0,71,366,1,0,0,0,73,369,
  	1,0,0,0,75,374,1,0,0,0,77,381,1,0,0,0,79,386,1,0,0,0,81,394,1,0,0,0,83,
  	398,1,0,0,0,85,402,1,0,0,0,87,408,1,0,0,0,89,414,1,0,0,0,91,420,1,0,0,
  	0,93,423,1,0,0,0,95,425,1,0,0,0,97,428,1,0,0,0,99,431,1,0,0,0,101,434,
  	1,0,0,0,103,437,1,0,0,0,105,440,1,0,0,0,107,443,1,0,0,0,109,446,1,0,0,
  	0,111,449,1,0,0,0,113,453,1,0,0,0,115,457,1,0,0,0,117,460,1,0,0,0,119,
  	463,1,0,0,0,121,466,1,0,0,0,123,468,1,0,0,0,125,470,1,0,0,0,127,473,1,
  	0,0,0,129,476,1,0,0,0,131,480,1,0,0,0,133,484,1,0,0,0,135,487,1,0,0,0,
  	137,490,1,0,0,0,139,493,1,0,0,0,141,496,1,0,0,0,143,498,1,0,0,0,145,500,
  	1,0,0,0,147,502,1,0,0,0,149,504,1,0,0,0,151,506,1,0,0,0,153,508,1,0,0,
  	0,155,511,1,0,0,0,157,514,1,0,0,0,159,521,1,0,0,0,161,533,1,0,0,0,163,
  	545,1,0,0,0,165,553,1,0,0,0,167,555,1,0,0,0,169,562,1,0,0,0,171,566,1,
  	0,0,0,173,571,1,0,0,0,175,581,1,0,0,0,177,591,1,0,0,0,179,601,1,0,0,0,
  	181,612,1,0,0,0,183,674,1,0,0,0,185,685,1,0,0,0,187,687,1,0,0,0,189,697,
  	1,0,0,0,191,704,1,0,0,0,193,713,1,0,0,0,195,727,1,0,0,0,197,738,1,0,0,
  	0,199,200,5,47,0,0,200,201,5,35,0,0,201,2,1,0,0,0,202,203,5,35,0,0,203,
  	204,5,47,0,0,204,4,1,0,0,0,205,206,5,35,0,0,206,207,5,105,0,0,207,208,
  	5,110,0,0,208,209,5,99,0,0,209,210,5,108,0,0,210,211,5,117,0,0,211,212,
  	5,100,0,0,212,213,5,101,0,0,213,6,1,0,0,0,214,215,5,35,0,0,215,216,5,
  	117,0,0,216,217,5,115,0,0,217,218,5,105,0,0,218,219,5,110,0,0,219,220,
  	5,103,0,0,220,8,1,0,0,0,221,222,5,59,0,0,222,10,1,0,0,0,223,224,5,35,
  	0,0,224,225,5,110,0,0,225,226,5,97,0,0,226,227,5,109,0,0,227,228,5,101,
  	0,0,228,229,5,115,0,0,229,230,5,112,0,0,230,231,5,97,0,0,231,232,5,99,
  	0,0,232,233,5,101,0,0,233,12,1,0,0,0,234,235,5,35,0,0,235,236,5,102,0,
  	0,236,237,5,105,0,0,237,238,5,108,0,0,238,239,5,101,0,0,239,14,1,0,0,
  	0,240,241,5,35,0,0,241,242,5,99,0,0,242,243,5,111,0,0,243,244,5,110,0,
  	0,244,245,5,115,0,0,245,246,5,116,0,0,246,247,5,101,0,0,247,248,5,120,
  	0,0,248,249,5,112,0,0,249,250,5,114,0,0,250,16,1,0,0,0,251,252,5,35,0,
  	0,252,253,5,100,0,0,253,254,5,101,0,0,254,255,5,102,0,0,255,256,5,105,
  	0,0,256,257,5,110,0,0,257,258,5,101,0,0,258,18,1,0,0,0,259,260,5,61,0,
  	0,260,20,1,0,0,0,261,262,5,102,0,0,262,263,5,117,0,0,263,264,5,110,0,
  	0,264,265,5,99,0,0,265,266,5,116,0,0,266,267,5,105,0,0,267,268,5,111,
  	0,0,268,269,5,110,0,0,269,22,1,0,0,0,270,271,5,112,0,0,271,272,5,114,
  	0,0,272,273,5,105,0,0,273,274,5,118,0,0,274,275,5,97,0,0,275,276,5,116,
  	0,0,276,277,5,101,0,0,277,24,1,0,0,0,278,279,5,97,0,0,279,280,5,117,0,
  	0,280,281,5,116,0,0,281,282,5,111,0,0,282,283,5,101,0,0,283,284,5,120,
  	0,0,284,285,5,101,0,0,285,286,5,99,0,0,286,26,1,0,0,0,287,288,5,40,0,
  	0,288,28,1,0,0,0,289,290,5,41,0,0,290,30,1,0,0,0,291,292,5,101,0,0,292,
  	293,5,118,0,0,293,294,5,101,0,0,294,295,5,110,0,0,295,296,5,116,0,0,296,
  	297,5,95,0,0,297,298,5,104,0,0,298,299,5,97,0,0,299,300,5,110,0,0,300,
  	301,5,100,0,0,301,302,5,108,0,0,302,303,5,101,0,0,303,304,5,114,0,0,304,
  	32,1,0,0,0,305,306,5,91,0,0,306,34,1,0,0,0,307,308,5,93,0,0,308,36,1,
  	0,0,0,309,310,5,61,0,0,310,311,5,62,0,0,311,38,1,0,0,0,312,313,5,100,
  	0,0,313,314,5,101,0,0,314,315,5,116,0,0,315,316,5,111,0,0,316,317,5,117,
  	0,0,317,318,5,114,0,0,318,40,1,0,0,0,319,320,5,60,0,0,320,42,1,0,0,0,
  	321,322,5,62,0,0,322,44,1,0,0,0,323,324,5,58,0,0,324,325,5,58,0,0,325,
  	46,1,0,0,0,326,327,5,44,0,0,327,48,1,0,0,0,328,329,5,42,0,0,329,50,1,
  	0,0,0,330,331,5,38,0,0,331,52,1,0,0,0,332,333,5,46,0,0,333,334,5,46,0,
  	0,334,335,5,46,0,0,335,54,1,0,0,0,336,337,5,123,0,0,337,56,1,0,0,0,338,
  	339,5,125,0,0,339,58,1,0,0,0,340,341,5,58,0,0,341,60,1,0,0,0,342,343,
  	5,102,0,0,343,344,5,111,0,0,344,345,5,114,0,0,345,62,1,0,0,0,346,347,
  	5,119,0,0,347,348,5,104,0,0,348,349,5,105,0,0,349,350,5,108,0,0,350,351,
  	5,101,0,0,351,64,1,0,0,0,352,353,5,100,0,0,353,354,5,111,0,0,354,66,1,
  	0,0,0,355,356,5,102,0,0,356,357,5,111,0,0,357,358,5,114,0,0,358,359,5,
  	101,0,0,359,360,5,97,0,0,360,361,5,99,0,0,361,362,5,104,0,0,362,68,1,
  	0,0,0,363,364,5,105,0,0,364,365,5,110,0,0,365,70,1,0,0,0,366,367,5,105,
  	0,0,367,368,5,102,0,0,368,72,1,0,0,0,369,370,5,101,0,0,370,371,5,108,
  	0,0,371,372,5,115,0,0,372,373,5,101,0,0,373,74,1,0,0,0,374,375,5,115,
  	0,0,375,376,5,119,0,0,376,377,5,105,0,0,377,378,5,116,0,0,378,379,5,99,
  	0,0,379,380,5,104,0,0,380,76,1,0,0,0,381,382,5,99,0,0,382,383,5,97,0,
  	0,383,384,5,115,0,0,384,385,5,101,0,0,385,78,1,0,0,0,386,387,5,100,0,
  	0,387,388,5,101,0,0,388,389,5,102,0,0,389,390,5,97,0,0,390,391,5,117,
  	0,0,391,392,5,108,0,0,392,393,5,116,0,0,393,80,1,0,0,0,394,395,5,110,
  	0,0,395,396,5,111,0,0,396,397,5,112,0,0,397,82,1,0,0,0,398,399,5,78,0,
  	0,399,400,5,111,0,0,400,401,5,112,0,0,401,84,1,0,0,0,402,403,5,68,0,0,
  	403,404,5,101,0,0,404,405,5,118,0,0,405,406,5,79,0,0,406,407,5,112,0,
  	0,407,86,1,0,0,0,408,409,5,100,0,0,409,410,5,101,0,0,410,411,5,118,0,
  	0,411,412,5,111,0,0,412,413,5,112,0,0,413,88,1,0,0,0,414,415,5,68,0,0,
  	415,416,5,101,0,0,416,417,5,118,0,0,417,418,5,111,0,0,418,419,5,112,0,
  	0,419,90,1,0,0,0,420,421,5,45,0,0,421,422,5,62,0,0,422,92,1,0,0,0,423,
  	424,5,63,0,0,424,94,1,0,0,0,425,426,5,43,0,0,426,427,5,61,0,0,427,96,
  	1,0,0,0,428,429,5,45,0,0,429,430,5,61,0,0,430,98,1,0,0,0,431,432,5,47,
  	0,0,432,433,5,61,0,0,433,100,1,0,0,0,434,435,5,42,0,0,435,436,5,61,0,
  	0,436,102,1,0,0,0,437,438,5,37,0,0,438,439,5,61,0,0,439,104,1,0,0,0,440,
  	441,5,38,0,0,441,442,5,61,0,0,442,106,1,0,0,0,443,444,5,124,0,0,444,445,
  	5,61,0,0,445,108,1,0,0,0,446,447,5,94,0,0,447,448,5,61,0,0,448,110,1,
  	0,0,0,449,450,5,60,0,0,450,451,5,60,0,0,451,452,5,61,0,0,452,112,1,0,
  	0,0,453,454,5,62,0,0,454,455,5,62,0,0,455,456,5,61,0,0,456,114,1,0,0,
  	0,457,458,5,126,0,0,458,459,5,61,0,0,459,116,1,0,0,0,460,461,5,124,0,
  	0,461,462,5,124,0,0,462,118,1,0,0,0,463,464,5,38,0,0,464,465,5,38,0,0,
  	465,120,1,0,0,0,466,467,5,124,0,0,467,122,1,0,0,0,468,469,5,94,0,0,469,
  	124,1,0,0,0,470,471,5,33,0,0,471,472,5,61,0,0,472,126,1,0,0,0,473,474,
  	5,61,0,0,474,475,5,61,0,0,475,128,1,0,0,0,476,477,5,33,0,0,477,478,5,
  	61,0,0,478,479,5,61,0,0,479,130,1,0,0,0,480,481,5,61,0,0,481,482,5,61,
  	0,0,482,483,5,61,0,0,483,132,1,0,0,0,484,485,5,60,0,0,485,486,5,61,0,
  	0,486,134,1,0,0,0,487,488,5,62,0,0,488,489,5,61,0,0,489,136,1,0,0,0,490,
  	491,5,60,0,0,491,492,5,60,0,0,492,138,1,0,0,0,493,494,5,62,0,0,494,495,
  	5,62,0,0,495,140,1,0,0,0,496,497,5,43,0,0,497,142,1,0,0,0,498,499,5,45,
  	0,0,499,144,1,0,0,0,500,501,5,47,0,0,501,146,1,0,0,0,502,503,5,37,0,0,
  	503,148,1,0,0,0,504,505,5,33,0,0,505,150,1,0,0,0,506,507,5,126,0,0,507,
  	152,1,0,0,0,508,509,5,43,0,0,509,510,5,43,0,0,510,154,1,0,0,0,511,512,
  	5,45,0,0,512,513,5,45,0,0,513,156,1,0,0,0,514,515,5,116,0,0,515,516,5,
  	104,0,0,516,517,5,114,0,0,517,518,5,101,0,0,518,519,5,97,0,0,519,520,
  	5,100,0,0,520,158,1,0,0,0,521,522,5,99,0,0,522,523,5,104,0,0,523,524,
  	5,105,0,0,524,525,5,108,0,0,525,526,5,100,0,0,526,527,5,116,0,0,527,528,
  	5,104,0,0,528,529,5,114,0,0,529,530,5,101,0,0,530,531,5,97,0,0,531,532,
  	5,100,0,0,532,160,1,0,0,0,533,534,5,116,0,0,534,535,5,104,0,0,535,536,
  	5,114,0,0,536,537,5,101,0,0,537,538,5,97,0,0,538,539,5,100,0,0,539,540,
  	5,101,0,0,540,541,5,110,0,0,541,542,5,100,0,0,542,543,5,111,0,0,543,544,
  	5,110,0,0,544,162,1,0,0,0,545,546,5,98,0,0,546,547,5,117,0,0,547,548,
  	5,105,0,0,548,549,5,108,0,0,549,550,5,116,0,0,550,551,5,105,0,0,551,552,
  	5,110,0,0,552,164,1,0,0,0,553,554,5,46,0,0,554,166,1,0,0,0,555,556,5,
  	64,0,0,556,168,1,0,0,0,557,559,5,13,0,0,558,557,1,0,0,0,558,559,1,0,0,
  	0,559,560,1,0,0,0,560,563,5,10,0,0,561,563,5,13,0,0,562,558,1,0,0,0,562,
  	561,1,0,0,0,563,564,1,0,0,0,564,565,6,84,0,0,565,170,1,0,0,0,566,567,
  	7,0,0,0,567,568,1,0,0,0,568,569,6,85,0,0,569,172,1,0,0,0,570,572,5,45,
  	0,0,571,570,1,0,0,0,571,572,1,0,0,0,572,573,1,0,0,0,573,577,7,1,0,0,574,
  	576,7,2,0,0,575,574,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,577,578,1,
  	0,0,0,578,174,1,0,0,0,579,577,1,0,0,0,580,582,5,45,0,0,581,580,1,0,0,
  	0,581,582,1,0,0,0,582,583,1,0,0,0,583,584,5,48,0,0,584,586,7,3,0,0,585,
  	587,7,4,0,0,586,585,1,0,0,0,587,588,1,0,0,0,588,586,1,0,0,0,588,589,1,
  	0,0,0,589,176,1,0,0,0,590,592,5,45,0,0,591,590,1,0,0,0,591,592,1,0,0,
  	0,592,593,1,0,0,0,593,597,5,48,0,0,594,596,7,5,0,0,595,594,1,0,0,0,596,
  	599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,178,1,0,0,0,599,597,1,
  	0,0,0,600,602,5,45,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,
  	0,603,604,5,48,0,0,604,608,7,6,0,0,605,607,7,7,0,0,606,605,1,0,0,0,607,
  	610,1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,180,1,0,0,0,610,608,1,
  	0,0,0,611,613,5,45,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,638,1,0,0,
  	0,614,616,7,2,0,0,615,614,1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,617,
  	618,1,0,0,0,618,620,1,0,0,0,619,617,1,0,0,0,620,622,5,46,0,0,621,623,
  	7,2,0,0,622,621,1,0,0,0,623,624,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,
  	0,625,639,1,0,0,0,626,628,7,2,0,0,627,626,1,0,0,0,628,629,1,0,0,0,629,
  	627,1,0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,635,5,46,0,0,632,634,
  	7,2,0,0,633,632,1,0,0,0,634,637,1,0,0,0,635,633,1,0,0,0,635,636,1,0,0,
  	0,636,639,1,0,0,0,637,635,1,0,0,0,638,617,1,0,0,0,638,627,1,0,0,0,639,
  	182,1,0,0,0,640,641,5,98,0,0,641,642,5,114,0,0,642,643,5,101,0,0,643,
  	644,5,97,0,0,644,675,5,107,0,0,645,646,5,99,0,0,646,647,5,111,0,0,647,
  	648,5,110,0,0,648,649,5,116,0,0,649,650,5,105,0,0,650,651,5,110,0,0,651,
  	652,5,117,0,0,652,675,5,101,0,0,653,654,5,103,0,0,654,655,5,111,0,0,655,
  	656,5,116,0,0,656,675,5,111,0,0,657,658,5,114,0,0,658,659,5,101,0,0,659,
  	660,5,116,0,0,660,661,5,117,0,0,661,662,5,114,0,0,662,675,5,110,0,0,663,
  	664,5,119,0,0,664,665,5,97,0,0,665,666,5,105,0,0,666,675,5,116,0,0,667,
  	668,5,106,0,0,668,669,5,117,0,0,669,670,5,109,0,0,670,671,5,112,0,0,671,
  	672,5,100,0,0,672,673,5,101,0,0,673,675,5,118,0,0,674,640,1,0,0,0,674,
  	645,1,0,0,0,674,653,1,0,0,0,674,657,1,0,0,0,674,663,1,0,0,0,674,667,1,
  	0,0,0,675,184,1,0,0,0,676,677,5,116,0,0,677,678,5,114,0,0,678,679,5,117,
  	0,0,679,686,5,101,0,0,680,681,5,102,0,0,681,682,5,97,0,0,682,683,5,108,
  	0,0,683,684,5,115,0,0,684,686,5,101,0,0,685,676,1,0,0,0,685,680,1,0,0,
  	0,686,186,1,0,0,0,687,688,5,117,0,0,688,689,5,110,0,0,689,690,5,100,0,
  	0,690,691,5,101,0,0,691,692,5,102,0,0,692,693,5,105,0,0,693,694,5,110,
  	0,0,694,695,5,101,0,0,695,696,5,100,0,0,696,188,1,0,0,0,697,701,7,8,0,
  	0,698,700,7,9,0,0,699,698,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,701,
  	702,1,0,0,0,702,190,1,0,0,0,703,701,1,0,0,0,704,705,5,35,0,0,705,709,
  	7,8,0,0,706,708,7,9,0,0,707,706,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,
  	0,709,710,1,0,0,0,710,192,1,0,0,0,711,709,1,0,0,0,712,714,7,10,0,0,713,
  	712,1,0,0,0,714,715,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,725,1,
  	0,0,0,717,718,5,46,0,0,718,719,5,103,0,0,719,720,5,115,0,0,720,726,5,
  	99,0,0,721,722,5,46,0,0,722,723,5,99,0,0,723,724,5,115,0,0,724,726,5,
  	99,0,0,725,717,1,0,0,0,725,721,1,0,0,0,725,726,1,0,0,0,726,194,1,0,0,
  	0,727,733,5,34,0,0,728,732,8,11,0,0,729,730,5,92,0,0,730,732,9,0,0,0,
  	731,728,1,0,0,0,731,729,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,
  	1,0,0,0,734,736,1,0,0,0,735,733,1,0,0,0,736,737,5,34,0,0,737,196,1,0,
  	0,0,738,739,7,12,0,0,739,740,3,195,97,0,740,198,1,0,0,0,25,0,558,562,
  	571,577,581,588,591,597,601,608,612,617,624,629,635,638,674,685,701,709,
  	715,725,731,733,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gsclexerLexerStaticData = staticData.release();
}

}

gscLexer::gscLexer(CharStream *input) : Lexer(input) {
  gscLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *gsclexerLexerStaticData->atn, gsclexerLexerStaticData->decisionToDFA, gsclexerLexerStaticData->sharedContextCache);
}

gscLexer::~gscLexer() {
  delete _interpreter;
}

std::string gscLexer::getGrammarFileName() const {
  return "gsc.g4";
}

const std::vector<std::string>& gscLexer::getRuleNames() const {
  return gsclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& gscLexer::getChannelNames() const {
  return gsclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& gscLexer::getModeNames() const {
  return gsclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& gscLexer::getVocabulary() const {
  return gsclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView gscLexer::getSerializedATN() const {
  return gsclexerLexerStaticData->serializedATN;
}

const atn::ATN& gscLexer::getATN() const {
  return *gsclexerLexerStaticData->atn;
}




void gscLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gsclexerLexerInitialize();
#else
  ::antlr4::internal::call_once(gsclexerLexerOnceFlag, gsclexerLexerInitialize);
#endif
}
