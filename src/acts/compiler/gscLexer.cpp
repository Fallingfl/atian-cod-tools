
// Generated from .\grammar\gsc.g4 by ANTLR 4.13.0


#include "gscLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct GscLexerStaticData final {
  GscLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GscLexerStaticData(const GscLexerStaticData&) = delete;
  GscLexerStaticData(GscLexerStaticData&&) = delete;
  GscLexerStaticData& operator=(const GscLexerStaticData&) = delete;
  GscLexerStaticData& operator=(GscLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gsclexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
GscLexerStaticData *gsclexerLexerStaticData = nullptr;

void gsclexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gsclexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(gsclexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GscLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", 
      "T__57", "T__58", "T__59", "T__60", "T__61", "T__62", "T__63", "T__64", 
      "T__65", "T__66", "T__67", "T__68", "T__69", "T__70", "T__71", "T__72", 
      "T__73", "T__74", "T__75", "T__76", "T__77", "T__78", "T__79", "T__80", 
      "T__81", "T__82", "T__83", "T__84", "T__85", "T__86", "T__87", "T__88", 
      "T__89", "NEWLINE", "WHITESPACE", "INTEGER10", "INTEGER16", "INTEGER8", 
      "INTEGER2", "FLOATVAL", "BUILTIN", "BOOL_VALUE", "UNDEFINED_VALUE", 
      "IDENTIFIER", "STRUCT_IDENTIFIER", "PATH", "STRING", "HASHSTRING"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'/#'", "'#/'", "'#include'", "'#using'", "';'", "'#namespace'", 
      "'#file'", "'#constexpr'", "'#define'", "'='", "'function'", "'private'", 
      "'autoexec'", "'('", "')'", "'event_handler'", "'['", "']'", "'=>'", 
      "'detour'", "'<'", "'>'", "'::'", "','", "'*'", "'&'", "'...'", "'{'", 
      "'}'", "':'", "'for'", "'while'", "'do'", "'foreach'", "'in'", "'if'", 
      "'else'", "'switch'", "'case'", "'default'", "'nop'", "'Nop'", "'DevOp'", 
      "'devop'", "'Devop'", "'->'", "'\\u003F'", "'+='", "'-='", "'/='", 
      "'*='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'~='", 
      "'\\u003F\\u003F'", "'||'", "'&&'", "'|'", "'^'", "'!='", "'=='", 
      "'!=='", "'==='", "'<='", "'>='", "'<=='", "'>=='", "'<<'", "'>>'", 
      "'+'", "'-'", "'/'", "'%'", "'!'", "'~'", "'++'", "'--'", "'is'", 
      "'not'", "'thread'", "'childthread'", "'threadendon'", "'builtin'", 
      "'.'", "'\\u003F.'", "'@'", "", "", "", "", "", "", "", "", "", "'undefined'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "NEWLINE", "WHITESPACE", "INTEGER10", "INTEGER16", 
      "INTEGER8", "INTEGER2", "FLOATVAL", "BUILTIN", "BOOL_VALUE", "UNDEFINED_VALUE", 
      "IDENTIFIER", "STRUCT_IDENTIFIER", "PATH", "STRING", "HASHSTRING"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,105,774,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
  	7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,
  	14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,
  	21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,
  	28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,
  	35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,
  	42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
  	49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
  	56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,
  	63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,
  	70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,
  	77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,
  	84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
  	91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
  	98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,
  	1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,
  	1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,
  	1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,
  	1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
  	1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,
  	1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,
  	1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,
  	1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,63,
  	1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,
  	1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,
  	1,72,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,
  	1,78,1,79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,1,82,
  	1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
  	1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
  	1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,88,
  	1,88,1,88,1,89,1,89,1,90,3,90,592,8,90,1,90,1,90,3,90,596,8,90,1,90,1,
  	90,1,91,1,91,1,91,1,91,1,92,3,92,605,8,92,1,92,1,92,5,92,609,8,92,10,
  	92,12,92,612,9,92,1,93,3,93,615,8,93,1,93,1,93,1,93,4,93,620,8,93,11,
  	93,12,93,621,1,94,3,94,625,8,94,1,94,1,94,5,94,629,8,94,10,94,12,94,632,
  	9,94,1,95,3,95,635,8,95,1,95,1,95,1,95,5,95,640,8,95,10,95,12,95,643,
  	9,95,1,96,3,96,646,8,96,1,96,5,96,649,8,96,10,96,12,96,652,9,96,1,96,
  	1,96,4,96,656,8,96,11,96,12,96,657,1,96,4,96,661,8,96,11,96,12,96,662,
  	1,96,1,96,5,96,667,8,96,10,96,12,96,670,9,96,3,96,672,8,96,1,97,1,97,
  	1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
  	1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
  	1,97,1,97,1,97,1,97,3,97,708,8,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
  	1,98,1,98,3,98,719,8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
  	1,99,1,100,1,100,5,100,733,8,100,10,100,12,100,736,9,100,1,101,1,101,
  	1,101,5,101,741,8,101,10,101,12,101,744,9,101,1,102,4,102,747,8,102,11,
  	102,12,102,748,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,
  	759,8,102,1,103,1,103,1,103,1,103,5,103,765,8,103,10,103,12,103,768,9,
  	103,1,103,1,103,1,104,1,104,1,104,0,0,105,1,1,3,2,5,3,7,4,9,5,11,6,13,
  	7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
  	19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
  	61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
  	42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
  	53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
  	63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,
  	73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,
  	83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,181,91,183,92,185,
  	93,187,94,189,95,191,96,193,97,195,98,197,99,199,100,201,101,203,102,
  	205,103,207,104,209,105,1,0,13,2,0,9,9,32,32,1,0,49,57,1,0,48,57,2,0,
  	88,88,120,120,3,0,48,57,65,70,97,102,1,0,48,55,2,0,66,66,98,98,1,0,48,
  	49,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,5,0,47,57,65,90,
  	92,92,95,95,97,122,2,0,34,34,92,92,4,0,35,35,37,37,64,64,116,116,802,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
  	0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
  	0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
  	1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
  	0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
  	0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
  	1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
  	1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
  	1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,
  	1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,
  	1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,
  	1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,
  	1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,
  	1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,
  	1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,
  	1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,
  	1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,0,205,1,0,0,0,0,207,
  	1,0,0,0,0,209,1,0,0,0,1,211,1,0,0,0,3,214,1,0,0,0,5,217,1,0,0,0,7,226,
  	1,0,0,0,9,233,1,0,0,0,11,235,1,0,0,0,13,246,1,0,0,0,15,252,1,0,0,0,17,
  	263,1,0,0,0,19,271,1,0,0,0,21,273,1,0,0,0,23,282,1,0,0,0,25,290,1,0,0,
  	0,27,299,1,0,0,0,29,301,1,0,0,0,31,303,1,0,0,0,33,317,1,0,0,0,35,319,
  	1,0,0,0,37,321,1,0,0,0,39,324,1,0,0,0,41,331,1,0,0,0,43,333,1,0,0,0,45,
  	335,1,0,0,0,47,338,1,0,0,0,49,340,1,0,0,0,51,342,1,0,0,0,53,344,1,0,0,
  	0,55,348,1,0,0,0,57,350,1,0,0,0,59,352,1,0,0,0,61,354,1,0,0,0,63,358,
  	1,0,0,0,65,364,1,0,0,0,67,367,1,0,0,0,69,375,1,0,0,0,71,378,1,0,0,0,73,
  	381,1,0,0,0,75,386,1,0,0,0,77,393,1,0,0,0,79,398,1,0,0,0,81,406,1,0,0,
  	0,83,410,1,0,0,0,85,414,1,0,0,0,87,420,1,0,0,0,89,426,1,0,0,0,91,432,
  	1,0,0,0,93,435,1,0,0,0,95,437,1,0,0,0,97,440,1,0,0,0,99,443,1,0,0,0,101,
  	446,1,0,0,0,103,449,1,0,0,0,105,452,1,0,0,0,107,455,1,0,0,0,109,458,1,
  	0,0,0,111,461,1,0,0,0,113,465,1,0,0,0,115,469,1,0,0,0,117,472,1,0,0,0,
  	119,475,1,0,0,0,121,478,1,0,0,0,123,481,1,0,0,0,125,483,1,0,0,0,127,485,
  	1,0,0,0,129,488,1,0,0,0,131,491,1,0,0,0,133,495,1,0,0,0,135,499,1,0,0,
  	0,137,502,1,0,0,0,139,505,1,0,0,0,141,509,1,0,0,0,143,513,1,0,0,0,145,
  	516,1,0,0,0,147,519,1,0,0,0,149,521,1,0,0,0,151,523,1,0,0,0,153,525,1,
  	0,0,0,155,527,1,0,0,0,157,529,1,0,0,0,159,531,1,0,0,0,161,534,1,0,0,0,
  	163,537,1,0,0,0,165,540,1,0,0,0,167,544,1,0,0,0,169,551,1,0,0,0,171,563,
  	1,0,0,0,173,575,1,0,0,0,175,583,1,0,0,0,177,585,1,0,0,0,179,588,1,0,0,
  	0,181,595,1,0,0,0,183,599,1,0,0,0,185,604,1,0,0,0,187,614,1,0,0,0,189,
  	624,1,0,0,0,191,634,1,0,0,0,193,645,1,0,0,0,195,707,1,0,0,0,197,718,1,
  	0,0,0,199,720,1,0,0,0,201,730,1,0,0,0,203,737,1,0,0,0,205,746,1,0,0,0,
  	207,760,1,0,0,0,209,771,1,0,0,0,211,212,5,47,0,0,212,213,5,35,0,0,213,
  	2,1,0,0,0,214,215,5,35,0,0,215,216,5,47,0,0,216,4,1,0,0,0,217,218,5,35,
  	0,0,218,219,5,105,0,0,219,220,5,110,0,0,220,221,5,99,0,0,221,222,5,108,
  	0,0,222,223,5,117,0,0,223,224,5,100,0,0,224,225,5,101,0,0,225,6,1,0,0,
  	0,226,227,5,35,0,0,227,228,5,117,0,0,228,229,5,115,0,0,229,230,5,105,
  	0,0,230,231,5,110,0,0,231,232,5,103,0,0,232,8,1,0,0,0,233,234,5,59,0,
  	0,234,10,1,0,0,0,235,236,5,35,0,0,236,237,5,110,0,0,237,238,5,97,0,0,
  	238,239,5,109,0,0,239,240,5,101,0,0,240,241,5,115,0,0,241,242,5,112,0,
  	0,242,243,5,97,0,0,243,244,5,99,0,0,244,245,5,101,0,0,245,12,1,0,0,0,
  	246,247,5,35,0,0,247,248,5,102,0,0,248,249,5,105,0,0,249,250,5,108,0,
  	0,250,251,5,101,0,0,251,14,1,0,0,0,252,253,5,35,0,0,253,254,5,99,0,0,
  	254,255,5,111,0,0,255,256,5,110,0,0,256,257,5,115,0,0,257,258,5,116,0,
  	0,258,259,5,101,0,0,259,260,5,120,0,0,260,261,5,112,0,0,261,262,5,114,
  	0,0,262,16,1,0,0,0,263,264,5,35,0,0,264,265,5,100,0,0,265,266,5,101,0,
  	0,266,267,5,102,0,0,267,268,5,105,0,0,268,269,5,110,0,0,269,270,5,101,
  	0,0,270,18,1,0,0,0,271,272,5,61,0,0,272,20,1,0,0,0,273,274,5,102,0,0,
  	274,275,5,117,0,0,275,276,5,110,0,0,276,277,5,99,0,0,277,278,5,116,0,
  	0,278,279,5,105,0,0,279,280,5,111,0,0,280,281,5,110,0,0,281,22,1,0,0,
  	0,282,283,5,112,0,0,283,284,5,114,0,0,284,285,5,105,0,0,285,286,5,118,
  	0,0,286,287,5,97,0,0,287,288,5,116,0,0,288,289,5,101,0,0,289,24,1,0,0,
  	0,290,291,5,97,0,0,291,292,5,117,0,0,292,293,5,116,0,0,293,294,5,111,
  	0,0,294,295,5,101,0,0,295,296,5,120,0,0,296,297,5,101,0,0,297,298,5,99,
  	0,0,298,26,1,0,0,0,299,300,5,40,0,0,300,28,1,0,0,0,301,302,5,41,0,0,302,
  	30,1,0,0,0,303,304,5,101,0,0,304,305,5,118,0,0,305,306,5,101,0,0,306,
  	307,5,110,0,0,307,308,5,116,0,0,308,309,5,95,0,0,309,310,5,104,0,0,310,
  	311,5,97,0,0,311,312,5,110,0,0,312,313,5,100,0,0,313,314,5,108,0,0,314,
  	315,5,101,0,0,315,316,5,114,0,0,316,32,1,0,0,0,317,318,5,91,0,0,318,34,
  	1,0,0,0,319,320,5,93,0,0,320,36,1,0,0,0,321,322,5,61,0,0,322,323,5,62,
  	0,0,323,38,1,0,0,0,324,325,5,100,0,0,325,326,5,101,0,0,326,327,5,116,
  	0,0,327,328,5,111,0,0,328,329,5,117,0,0,329,330,5,114,0,0,330,40,1,0,
  	0,0,331,332,5,60,0,0,332,42,1,0,0,0,333,334,5,62,0,0,334,44,1,0,0,0,335,
  	336,5,58,0,0,336,337,5,58,0,0,337,46,1,0,0,0,338,339,5,44,0,0,339,48,
  	1,0,0,0,340,341,5,42,0,0,341,50,1,0,0,0,342,343,5,38,0,0,343,52,1,0,0,
  	0,344,345,5,46,0,0,345,346,5,46,0,0,346,347,5,46,0,0,347,54,1,0,0,0,348,
  	349,5,123,0,0,349,56,1,0,0,0,350,351,5,125,0,0,351,58,1,0,0,0,352,353,
  	5,58,0,0,353,60,1,0,0,0,354,355,5,102,0,0,355,356,5,111,0,0,356,357,5,
  	114,0,0,357,62,1,0,0,0,358,359,5,119,0,0,359,360,5,104,0,0,360,361,5,
  	105,0,0,361,362,5,108,0,0,362,363,5,101,0,0,363,64,1,0,0,0,364,365,5,
  	100,0,0,365,366,5,111,0,0,366,66,1,0,0,0,367,368,5,102,0,0,368,369,5,
  	111,0,0,369,370,5,114,0,0,370,371,5,101,0,0,371,372,5,97,0,0,372,373,
  	5,99,0,0,373,374,5,104,0,0,374,68,1,0,0,0,375,376,5,105,0,0,376,377,5,
  	110,0,0,377,70,1,0,0,0,378,379,5,105,0,0,379,380,5,102,0,0,380,72,1,0,
  	0,0,381,382,5,101,0,0,382,383,5,108,0,0,383,384,5,115,0,0,384,385,5,101,
  	0,0,385,74,1,0,0,0,386,387,5,115,0,0,387,388,5,119,0,0,388,389,5,105,
  	0,0,389,390,5,116,0,0,390,391,5,99,0,0,391,392,5,104,0,0,392,76,1,0,0,
  	0,393,394,5,99,0,0,394,395,5,97,0,0,395,396,5,115,0,0,396,397,5,101,0,
  	0,397,78,1,0,0,0,398,399,5,100,0,0,399,400,5,101,0,0,400,401,5,102,0,
  	0,401,402,5,97,0,0,402,403,5,117,0,0,403,404,5,108,0,0,404,405,5,116,
  	0,0,405,80,1,0,0,0,406,407,5,110,0,0,407,408,5,111,0,0,408,409,5,112,
  	0,0,409,82,1,0,0,0,410,411,5,78,0,0,411,412,5,111,0,0,412,413,5,112,0,
  	0,413,84,1,0,0,0,414,415,5,68,0,0,415,416,5,101,0,0,416,417,5,118,0,0,
  	417,418,5,79,0,0,418,419,5,112,0,0,419,86,1,0,0,0,420,421,5,100,0,0,421,
  	422,5,101,0,0,422,423,5,118,0,0,423,424,5,111,0,0,424,425,5,112,0,0,425,
  	88,1,0,0,0,426,427,5,68,0,0,427,428,5,101,0,0,428,429,5,118,0,0,429,430,
  	5,111,0,0,430,431,5,112,0,0,431,90,1,0,0,0,432,433,5,45,0,0,433,434,5,
  	62,0,0,434,92,1,0,0,0,435,436,5,63,0,0,436,94,1,0,0,0,437,438,5,43,0,
  	0,438,439,5,61,0,0,439,96,1,0,0,0,440,441,5,45,0,0,441,442,5,61,0,0,442,
  	98,1,0,0,0,443,444,5,47,0,0,444,445,5,61,0,0,445,100,1,0,0,0,446,447,
  	5,42,0,0,447,448,5,61,0,0,448,102,1,0,0,0,449,450,5,37,0,0,450,451,5,
  	61,0,0,451,104,1,0,0,0,452,453,5,38,0,0,453,454,5,61,0,0,454,106,1,0,
  	0,0,455,456,5,124,0,0,456,457,5,61,0,0,457,108,1,0,0,0,458,459,5,94,0,
  	0,459,460,5,61,0,0,460,110,1,0,0,0,461,462,5,60,0,0,462,463,5,60,0,0,
  	463,464,5,61,0,0,464,112,1,0,0,0,465,466,5,62,0,0,466,467,5,62,0,0,467,
  	468,5,61,0,0,468,114,1,0,0,0,469,470,5,126,0,0,470,471,5,61,0,0,471,116,
  	1,0,0,0,472,473,5,63,0,0,473,474,5,63,0,0,474,118,1,0,0,0,475,476,5,124,
  	0,0,476,477,5,124,0,0,477,120,1,0,0,0,478,479,5,38,0,0,479,480,5,38,0,
  	0,480,122,1,0,0,0,481,482,5,124,0,0,482,124,1,0,0,0,483,484,5,94,0,0,
  	484,126,1,0,0,0,485,486,5,33,0,0,486,487,5,61,0,0,487,128,1,0,0,0,488,
  	489,5,61,0,0,489,490,5,61,0,0,490,130,1,0,0,0,491,492,5,33,0,0,492,493,
  	5,61,0,0,493,494,5,61,0,0,494,132,1,0,0,0,495,496,5,61,0,0,496,497,5,
  	61,0,0,497,498,5,61,0,0,498,134,1,0,0,0,499,500,5,60,0,0,500,501,5,61,
  	0,0,501,136,1,0,0,0,502,503,5,62,0,0,503,504,5,61,0,0,504,138,1,0,0,0,
  	505,506,5,60,0,0,506,507,5,61,0,0,507,508,5,61,0,0,508,140,1,0,0,0,509,
  	510,5,62,0,0,510,511,5,61,0,0,511,512,5,61,0,0,512,142,1,0,0,0,513,514,
  	5,60,0,0,514,515,5,60,0,0,515,144,1,0,0,0,516,517,5,62,0,0,517,518,5,
  	62,0,0,518,146,1,0,0,0,519,520,5,43,0,0,520,148,1,0,0,0,521,522,5,45,
  	0,0,522,150,1,0,0,0,523,524,5,47,0,0,524,152,1,0,0,0,525,526,5,37,0,0,
  	526,154,1,0,0,0,527,528,5,33,0,0,528,156,1,0,0,0,529,530,5,126,0,0,530,
  	158,1,0,0,0,531,532,5,43,0,0,532,533,5,43,0,0,533,160,1,0,0,0,534,535,
  	5,45,0,0,535,536,5,45,0,0,536,162,1,0,0,0,537,538,5,105,0,0,538,539,5,
  	115,0,0,539,164,1,0,0,0,540,541,5,110,0,0,541,542,5,111,0,0,542,543,5,
  	116,0,0,543,166,1,0,0,0,544,545,5,116,0,0,545,546,5,104,0,0,546,547,5,
  	114,0,0,547,548,5,101,0,0,548,549,5,97,0,0,549,550,5,100,0,0,550,168,
  	1,0,0,0,551,552,5,99,0,0,552,553,5,104,0,0,553,554,5,105,0,0,554,555,
  	5,108,0,0,555,556,5,100,0,0,556,557,5,116,0,0,557,558,5,104,0,0,558,559,
  	5,114,0,0,559,560,5,101,0,0,560,561,5,97,0,0,561,562,5,100,0,0,562,170,
  	1,0,0,0,563,564,5,116,0,0,564,565,5,104,0,0,565,566,5,114,0,0,566,567,
  	5,101,0,0,567,568,5,97,0,0,568,569,5,100,0,0,569,570,5,101,0,0,570,571,
  	5,110,0,0,571,572,5,100,0,0,572,573,5,111,0,0,573,574,5,110,0,0,574,172,
  	1,0,0,0,575,576,5,98,0,0,576,577,5,117,0,0,577,578,5,105,0,0,578,579,
  	5,108,0,0,579,580,5,116,0,0,580,581,5,105,0,0,581,582,5,110,0,0,582,174,
  	1,0,0,0,583,584,5,46,0,0,584,176,1,0,0,0,585,586,5,63,0,0,586,587,5,46,
  	0,0,587,178,1,0,0,0,588,589,5,64,0,0,589,180,1,0,0,0,590,592,5,13,0,0,
  	591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,596,5,10,0,0,594,
  	596,5,13,0,0,595,591,1,0,0,0,595,594,1,0,0,0,596,597,1,0,0,0,597,598,
  	6,90,0,0,598,182,1,0,0,0,599,600,7,0,0,0,600,601,1,0,0,0,601,602,6,91,
  	0,0,602,184,1,0,0,0,603,605,5,45,0,0,604,603,1,0,0,0,604,605,1,0,0,0,
  	605,606,1,0,0,0,606,610,7,1,0,0,607,609,7,2,0,0,608,607,1,0,0,0,609,612,
  	1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,186,1,0,0,0,612,610,1,0,0,
  	0,613,615,5,45,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,1,0,0,0,616,
  	617,5,48,0,0,617,619,7,3,0,0,618,620,7,4,0,0,619,618,1,0,0,0,620,621,
  	1,0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,188,1,0,0,0,623,625,5,45,
  	0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,626,1,0,0,0,626,630,5,48,0,0,
  	627,629,7,5,0,0,628,627,1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,630,631,
  	1,0,0,0,631,190,1,0,0,0,632,630,1,0,0,0,633,635,5,45,0,0,634,633,1,0,
  	0,0,634,635,1,0,0,0,635,636,1,0,0,0,636,637,5,48,0,0,637,641,7,6,0,0,
  	638,640,7,7,0,0,639,638,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,
  	1,0,0,0,642,192,1,0,0,0,643,641,1,0,0,0,644,646,5,45,0,0,645,644,1,0,
  	0,0,645,646,1,0,0,0,646,671,1,0,0,0,647,649,7,2,0,0,648,647,1,0,0,0,649,
  	652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,650,1,
  	0,0,0,653,655,5,46,0,0,654,656,7,2,0,0,655,654,1,0,0,0,656,657,1,0,0,
  	0,657,655,1,0,0,0,657,658,1,0,0,0,658,672,1,0,0,0,659,661,7,2,0,0,660,
  	659,1,0,0,0,661,662,1,0,0,0,662,660,1,0,0,0,662,663,1,0,0,0,663,664,1,
  	0,0,0,664,668,5,46,0,0,665,667,7,2,0,0,666,665,1,0,0,0,667,670,1,0,0,
  	0,668,666,1,0,0,0,668,669,1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,671,
  	650,1,0,0,0,671,660,1,0,0,0,672,194,1,0,0,0,673,674,5,98,0,0,674,675,
  	5,114,0,0,675,676,5,101,0,0,676,677,5,97,0,0,677,708,5,107,0,0,678,679,
  	5,99,0,0,679,680,5,111,0,0,680,681,5,110,0,0,681,682,5,116,0,0,682,683,
  	5,105,0,0,683,684,5,110,0,0,684,685,5,117,0,0,685,708,5,101,0,0,686,687,
  	5,103,0,0,687,688,5,111,0,0,688,689,5,116,0,0,689,708,5,111,0,0,690,691,
  	5,114,0,0,691,692,5,101,0,0,692,693,5,116,0,0,693,694,5,117,0,0,694,695,
  	5,114,0,0,695,708,5,110,0,0,696,697,5,119,0,0,697,698,5,97,0,0,698,699,
  	5,105,0,0,699,708,5,116,0,0,700,701,5,106,0,0,701,702,5,117,0,0,702,703,
  	5,109,0,0,703,704,5,112,0,0,704,705,5,100,0,0,705,706,5,101,0,0,706,708,
  	5,118,0,0,707,673,1,0,0,0,707,678,1,0,0,0,707,686,1,0,0,0,707,690,1,0,
  	0,0,707,696,1,0,0,0,707,700,1,0,0,0,708,196,1,0,0,0,709,710,5,116,0,0,
  	710,711,5,114,0,0,711,712,5,117,0,0,712,719,5,101,0,0,713,714,5,102,0,
  	0,714,715,5,97,0,0,715,716,5,108,0,0,716,717,5,115,0,0,717,719,5,101,
  	0,0,718,709,1,0,0,0,718,713,1,0,0,0,719,198,1,0,0,0,720,721,5,117,0,0,
  	721,722,5,110,0,0,722,723,5,100,0,0,723,724,5,101,0,0,724,725,5,102,0,
  	0,725,726,5,105,0,0,726,727,5,110,0,0,727,728,5,101,0,0,728,729,5,100,
  	0,0,729,200,1,0,0,0,730,734,7,8,0,0,731,733,7,9,0,0,732,731,1,0,0,0,733,
  	736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,202,1,0,0,0,736,734,1,
  	0,0,0,737,738,5,35,0,0,738,742,7,8,0,0,739,741,7,9,0,0,740,739,1,0,0,
  	0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,204,1,0,0,0,744,
  	742,1,0,0,0,745,747,7,10,0,0,746,745,1,0,0,0,747,748,1,0,0,0,748,746,
  	1,0,0,0,748,749,1,0,0,0,749,758,1,0,0,0,750,751,5,46,0,0,751,752,5,103,
  	0,0,752,753,5,115,0,0,753,759,5,99,0,0,754,755,5,46,0,0,755,756,5,99,
  	0,0,756,757,5,115,0,0,757,759,5,99,0,0,758,750,1,0,0,0,758,754,1,0,0,
  	0,758,759,1,0,0,0,759,206,1,0,0,0,760,766,5,34,0,0,761,765,8,11,0,0,762,
  	763,5,92,0,0,763,765,9,0,0,0,764,761,1,0,0,0,764,762,1,0,0,0,765,768,
  	1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,766,1,0,0,
  	0,769,770,5,34,0,0,770,208,1,0,0,0,771,772,7,12,0,0,772,773,3,207,103,
  	0,773,210,1,0,0,0,25,0,591,595,604,610,614,621,624,630,634,641,645,650,
  	657,662,668,671,707,718,734,742,748,758,764,766,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gsclexerLexerStaticData = staticData.release();
}

}

gscLexer::gscLexer(CharStream *input) : Lexer(input) {
  gscLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *gsclexerLexerStaticData->atn, gsclexerLexerStaticData->decisionToDFA, gsclexerLexerStaticData->sharedContextCache);
}

gscLexer::~gscLexer() {
  delete _interpreter;
}

std::string gscLexer::getGrammarFileName() const {
  return "gsc.g4";
}

const std::vector<std::string>& gscLexer::getRuleNames() const {
  return gsclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& gscLexer::getChannelNames() const {
  return gsclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& gscLexer::getModeNames() const {
  return gsclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& gscLexer::getVocabulary() const {
  return gsclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView gscLexer::getSerializedATN() const {
  return gsclexerLexerStaticData->serializedATN;
}

const atn::ATN& gscLexer::getATN() const {
  return *gsclexerLexerStaticData->atn;
}




void gscLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gsclexerLexerInitialize();
#else
  ::antlr4::internal::call_once(gsclexerLexerOnceFlag, gsclexerLexerInitialize);
#endif
}
