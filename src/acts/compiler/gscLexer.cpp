
// Generated from .\grammar\gsc.g4 by ANTLR 4.13.0


#include "gscLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct GscLexerStaticData final {
  GscLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GscLexerStaticData(const GscLexerStaticData&) = delete;
  GscLexerStaticData(GscLexerStaticData&&) = delete;
  GscLexerStaticData& operator=(const GscLexerStaticData&) = delete;
  GscLexerStaticData& operator=(GscLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gsclexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
GscLexerStaticData *gsclexerLexerStaticData = nullptr;

void gsclexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gsclexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(gsclexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GscLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", 
      "T__57", "T__58", "T__59", "T__60", "T__61", "T__62", "T__63", "T__64", 
      "T__65", "T__66", "T__67", "T__68", "T__69", "T__70", "T__71", "T__72", 
      "T__73", "T__74", "T__75", "T__76", "T__77", "T__78", "T__79", "T__80", 
      "T__81", "T__82", "T__83", "T__84", "T__85", "T__86", "T__87", "NEWLINE", 
      "WHITESPACE", "INTEGER10", "INTEGER16", "INTEGER8", "INTEGER2", "FLOATVAL", 
      "BUILTIN", "BOOL_VALUE", "UNDEFINED_VALUE", "IDENTIFIER", "STRUCT_IDENTIFIER", 
      "PATH", "STRING", "HASHSTRING"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'/#'", "'#/'", "'#include'", "'#using'", "';'", "'#namespace'", 
      "'#file'", "'#constexpr'", "'#define'", "'='", "'function'", "'private'", 
      "'autoexec'", "'('", "')'", "'event_handler'", "'['", "']'", "'=>'", 
      "'detour'", "'<'", "'>'", "'::'", "','", "'*'", "'&'", "'...'", "'{'", 
      "'}'", "':'", "'for'", "'while'", "'do'", "'foreach'", "'in'", "'if'", 
      "'else'", "'switch'", "'case'", "'default'", "'nop'", "'Nop'", "'DevOp'", 
      "'devop'", "'Devop'", "'->'", "'\\u003F'", "'+='", "'-='", "'/='", 
      "'*='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'~='", 
      "'\\u003F\\u003F'", "'||'", "'&&'", "'|'", "'^'", "'!='", "'=='", 
      "'!=='", "'==='", "'<='", "'>='", "'<<'", "'>>'", "'+'", "'-'", "'/'", 
      "'%'", "'!'", "'~'", "'++'", "'--'", "'is'", "'not'", "'thread'", 
      "'childthread'", "'threadendon'", "'builtin'", "'.'", "'\\u003F.'", 
      "'@'", "", "", "", "", "", "", "", "", "", "'undefined'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "NEWLINE", "WHITESPACE", "INTEGER10", "INTEGER16", 
      "INTEGER8", "INTEGER2", "FLOATVAL", "BUILTIN", "BOOL_VALUE", "UNDEFINED_VALUE", 
      "IDENTIFIER", "STRUCT_IDENTIFIER", "PATH", "STRING", "HASHSTRING"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,103,762,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
  	7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,
  	14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,
  	21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,
  	28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,
  	35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,
  	42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
  	49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
  	56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,
  	63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,
  	70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,
  	77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,
  	84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
  	91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
  	98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,1,0,1,0,1,0,1,1,
  	1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
  	3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
  	1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
  	11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
  	12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,
  	19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,
  	23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,
  	29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,
  	32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,
  	35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,
  	38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,
  	40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,
  	43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,
  	46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,
  	51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,
  	55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,
  	60,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,
  	65,1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,
  	69,1,69,1,70,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,
  	75,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,
  	80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,
  	82,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
  	83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,
  	85,1,86,1,86,1,86,1,87,1,87,1,88,3,88,580,8,88,1,88,1,88,3,88,584,8,88,
  	1,88,1,88,1,89,1,89,1,89,1,89,1,90,3,90,593,8,90,1,90,1,90,5,90,597,8,
  	90,10,90,12,90,600,9,90,1,91,3,91,603,8,91,1,91,1,91,1,91,4,91,608,8,
  	91,11,91,12,91,609,1,92,3,92,613,8,92,1,92,1,92,5,92,617,8,92,10,92,12,
  	92,620,9,92,1,93,3,93,623,8,93,1,93,1,93,1,93,5,93,628,8,93,10,93,12,
  	93,631,9,93,1,94,3,94,634,8,94,1,94,5,94,637,8,94,10,94,12,94,640,9,94,
  	1,94,1,94,4,94,644,8,94,11,94,12,94,645,1,94,4,94,649,8,94,11,94,12,94,
  	650,1,94,1,94,5,94,655,8,94,10,94,12,94,658,9,94,3,94,660,8,94,1,95,1,
  	95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
  	95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
  	95,1,95,1,95,1,95,1,95,3,95,696,8,95,1,96,1,96,1,96,1,96,1,96,1,96,1,
  	96,1,96,1,96,3,96,707,8,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
  	97,1,97,1,98,1,98,5,98,721,8,98,10,98,12,98,724,9,98,1,99,1,99,1,99,5,
  	99,729,8,99,10,99,12,99,732,9,99,1,100,4,100,735,8,100,11,100,12,100,
  	736,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,747,8,100,1,
  	101,1,101,1,101,1,101,5,101,753,8,101,10,101,12,101,756,9,101,1,101,1,
  	101,1,102,1,102,1,102,0,0,103,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
  	19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
  	21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
  	65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
  	44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
  	55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,
  	65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,149,
  	75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,83,167,84,169,
  	85,171,86,173,87,175,88,177,89,179,90,181,91,183,92,185,93,187,94,189,
  	95,191,96,193,97,195,98,197,99,199,100,201,101,203,102,205,103,1,0,13,
  	2,0,9,9,32,32,1,0,49,57,1,0,48,57,2,0,88,88,120,120,3,0,48,57,65,70,97,
  	102,1,0,48,55,2,0,66,66,98,98,1,0,48,49,3,0,65,90,95,95,97,122,4,0,48,
  	57,65,90,95,95,97,122,5,0,47,57,65,90,92,92,95,95,97,122,2,0,34,34,92,
  	92,4,0,35,35,37,37,64,64,116,116,790,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
  	0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
  	17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
  	0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
  	0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
  	49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
  	0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
  	0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,
  	81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
  	0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
  	0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,
  	0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,
  	0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,
  	0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,
  	0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,
  	0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,
  	0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,
  	0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,
  	0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,
  	0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,
  	0,0,203,1,0,0,0,0,205,1,0,0,0,1,207,1,0,0,0,3,210,1,0,0,0,5,213,1,0,0,
  	0,7,222,1,0,0,0,9,229,1,0,0,0,11,231,1,0,0,0,13,242,1,0,0,0,15,248,1,
  	0,0,0,17,259,1,0,0,0,19,267,1,0,0,0,21,269,1,0,0,0,23,278,1,0,0,0,25,
  	286,1,0,0,0,27,295,1,0,0,0,29,297,1,0,0,0,31,299,1,0,0,0,33,313,1,0,0,
  	0,35,315,1,0,0,0,37,317,1,0,0,0,39,320,1,0,0,0,41,327,1,0,0,0,43,329,
  	1,0,0,0,45,331,1,0,0,0,47,334,1,0,0,0,49,336,1,0,0,0,51,338,1,0,0,0,53,
  	340,1,0,0,0,55,344,1,0,0,0,57,346,1,0,0,0,59,348,1,0,0,0,61,350,1,0,0,
  	0,63,354,1,0,0,0,65,360,1,0,0,0,67,363,1,0,0,0,69,371,1,0,0,0,71,374,
  	1,0,0,0,73,377,1,0,0,0,75,382,1,0,0,0,77,389,1,0,0,0,79,394,1,0,0,0,81,
  	402,1,0,0,0,83,406,1,0,0,0,85,410,1,0,0,0,87,416,1,0,0,0,89,422,1,0,0,
  	0,91,428,1,0,0,0,93,431,1,0,0,0,95,433,1,0,0,0,97,436,1,0,0,0,99,439,
  	1,0,0,0,101,442,1,0,0,0,103,445,1,0,0,0,105,448,1,0,0,0,107,451,1,0,0,
  	0,109,454,1,0,0,0,111,457,1,0,0,0,113,461,1,0,0,0,115,465,1,0,0,0,117,
  	468,1,0,0,0,119,471,1,0,0,0,121,474,1,0,0,0,123,477,1,0,0,0,125,479,1,
  	0,0,0,127,481,1,0,0,0,129,484,1,0,0,0,131,487,1,0,0,0,133,491,1,0,0,0,
  	135,495,1,0,0,0,137,498,1,0,0,0,139,501,1,0,0,0,141,504,1,0,0,0,143,507,
  	1,0,0,0,145,509,1,0,0,0,147,511,1,0,0,0,149,513,1,0,0,0,151,515,1,0,0,
  	0,153,517,1,0,0,0,155,519,1,0,0,0,157,522,1,0,0,0,159,525,1,0,0,0,161,
  	528,1,0,0,0,163,532,1,0,0,0,165,539,1,0,0,0,167,551,1,0,0,0,169,563,1,
  	0,0,0,171,571,1,0,0,0,173,573,1,0,0,0,175,576,1,0,0,0,177,583,1,0,0,0,
  	179,587,1,0,0,0,181,592,1,0,0,0,183,602,1,0,0,0,185,612,1,0,0,0,187,622,
  	1,0,0,0,189,633,1,0,0,0,191,695,1,0,0,0,193,706,1,0,0,0,195,708,1,0,0,
  	0,197,718,1,0,0,0,199,725,1,0,0,0,201,734,1,0,0,0,203,748,1,0,0,0,205,
  	759,1,0,0,0,207,208,5,47,0,0,208,209,5,35,0,0,209,2,1,0,0,0,210,211,5,
  	35,0,0,211,212,5,47,0,0,212,4,1,0,0,0,213,214,5,35,0,0,214,215,5,105,
  	0,0,215,216,5,110,0,0,216,217,5,99,0,0,217,218,5,108,0,0,218,219,5,117,
  	0,0,219,220,5,100,0,0,220,221,5,101,0,0,221,6,1,0,0,0,222,223,5,35,0,
  	0,223,224,5,117,0,0,224,225,5,115,0,0,225,226,5,105,0,0,226,227,5,110,
  	0,0,227,228,5,103,0,0,228,8,1,0,0,0,229,230,5,59,0,0,230,10,1,0,0,0,231,
  	232,5,35,0,0,232,233,5,110,0,0,233,234,5,97,0,0,234,235,5,109,0,0,235,
  	236,5,101,0,0,236,237,5,115,0,0,237,238,5,112,0,0,238,239,5,97,0,0,239,
  	240,5,99,0,0,240,241,5,101,0,0,241,12,1,0,0,0,242,243,5,35,0,0,243,244,
  	5,102,0,0,244,245,5,105,0,0,245,246,5,108,0,0,246,247,5,101,0,0,247,14,
  	1,0,0,0,248,249,5,35,0,0,249,250,5,99,0,0,250,251,5,111,0,0,251,252,5,
  	110,0,0,252,253,5,115,0,0,253,254,5,116,0,0,254,255,5,101,0,0,255,256,
  	5,120,0,0,256,257,5,112,0,0,257,258,5,114,0,0,258,16,1,0,0,0,259,260,
  	5,35,0,0,260,261,5,100,0,0,261,262,5,101,0,0,262,263,5,102,0,0,263,264,
  	5,105,0,0,264,265,5,110,0,0,265,266,5,101,0,0,266,18,1,0,0,0,267,268,
  	5,61,0,0,268,20,1,0,0,0,269,270,5,102,0,0,270,271,5,117,0,0,271,272,5,
  	110,0,0,272,273,5,99,0,0,273,274,5,116,0,0,274,275,5,105,0,0,275,276,
  	5,111,0,0,276,277,5,110,0,0,277,22,1,0,0,0,278,279,5,112,0,0,279,280,
  	5,114,0,0,280,281,5,105,0,0,281,282,5,118,0,0,282,283,5,97,0,0,283,284,
  	5,116,0,0,284,285,5,101,0,0,285,24,1,0,0,0,286,287,5,97,0,0,287,288,5,
  	117,0,0,288,289,5,116,0,0,289,290,5,111,0,0,290,291,5,101,0,0,291,292,
  	5,120,0,0,292,293,5,101,0,0,293,294,5,99,0,0,294,26,1,0,0,0,295,296,5,
  	40,0,0,296,28,1,0,0,0,297,298,5,41,0,0,298,30,1,0,0,0,299,300,5,101,0,
  	0,300,301,5,118,0,0,301,302,5,101,0,0,302,303,5,110,0,0,303,304,5,116,
  	0,0,304,305,5,95,0,0,305,306,5,104,0,0,306,307,5,97,0,0,307,308,5,110,
  	0,0,308,309,5,100,0,0,309,310,5,108,0,0,310,311,5,101,0,0,311,312,5,114,
  	0,0,312,32,1,0,0,0,313,314,5,91,0,0,314,34,1,0,0,0,315,316,5,93,0,0,316,
  	36,1,0,0,0,317,318,5,61,0,0,318,319,5,62,0,0,319,38,1,0,0,0,320,321,5,
  	100,0,0,321,322,5,101,0,0,322,323,5,116,0,0,323,324,5,111,0,0,324,325,
  	5,117,0,0,325,326,5,114,0,0,326,40,1,0,0,0,327,328,5,60,0,0,328,42,1,
  	0,0,0,329,330,5,62,0,0,330,44,1,0,0,0,331,332,5,58,0,0,332,333,5,58,0,
  	0,333,46,1,0,0,0,334,335,5,44,0,0,335,48,1,0,0,0,336,337,5,42,0,0,337,
  	50,1,0,0,0,338,339,5,38,0,0,339,52,1,0,0,0,340,341,5,46,0,0,341,342,5,
  	46,0,0,342,343,5,46,0,0,343,54,1,0,0,0,344,345,5,123,0,0,345,56,1,0,0,
  	0,346,347,5,125,0,0,347,58,1,0,0,0,348,349,5,58,0,0,349,60,1,0,0,0,350,
  	351,5,102,0,0,351,352,5,111,0,0,352,353,5,114,0,0,353,62,1,0,0,0,354,
  	355,5,119,0,0,355,356,5,104,0,0,356,357,5,105,0,0,357,358,5,108,0,0,358,
  	359,5,101,0,0,359,64,1,0,0,0,360,361,5,100,0,0,361,362,5,111,0,0,362,
  	66,1,0,0,0,363,364,5,102,0,0,364,365,5,111,0,0,365,366,5,114,0,0,366,
  	367,5,101,0,0,367,368,5,97,0,0,368,369,5,99,0,0,369,370,5,104,0,0,370,
  	68,1,0,0,0,371,372,5,105,0,0,372,373,5,110,0,0,373,70,1,0,0,0,374,375,
  	5,105,0,0,375,376,5,102,0,0,376,72,1,0,0,0,377,378,5,101,0,0,378,379,
  	5,108,0,0,379,380,5,115,0,0,380,381,5,101,0,0,381,74,1,0,0,0,382,383,
  	5,115,0,0,383,384,5,119,0,0,384,385,5,105,0,0,385,386,5,116,0,0,386,387,
  	5,99,0,0,387,388,5,104,0,0,388,76,1,0,0,0,389,390,5,99,0,0,390,391,5,
  	97,0,0,391,392,5,115,0,0,392,393,5,101,0,0,393,78,1,0,0,0,394,395,5,100,
  	0,0,395,396,5,101,0,0,396,397,5,102,0,0,397,398,5,97,0,0,398,399,5,117,
  	0,0,399,400,5,108,0,0,400,401,5,116,0,0,401,80,1,0,0,0,402,403,5,110,
  	0,0,403,404,5,111,0,0,404,405,5,112,0,0,405,82,1,0,0,0,406,407,5,78,0,
  	0,407,408,5,111,0,0,408,409,5,112,0,0,409,84,1,0,0,0,410,411,5,68,0,0,
  	411,412,5,101,0,0,412,413,5,118,0,0,413,414,5,79,0,0,414,415,5,112,0,
  	0,415,86,1,0,0,0,416,417,5,100,0,0,417,418,5,101,0,0,418,419,5,118,0,
  	0,419,420,5,111,0,0,420,421,5,112,0,0,421,88,1,0,0,0,422,423,5,68,0,0,
  	423,424,5,101,0,0,424,425,5,118,0,0,425,426,5,111,0,0,426,427,5,112,0,
  	0,427,90,1,0,0,0,428,429,5,45,0,0,429,430,5,62,0,0,430,92,1,0,0,0,431,
  	432,5,63,0,0,432,94,1,0,0,0,433,434,5,43,0,0,434,435,5,61,0,0,435,96,
  	1,0,0,0,436,437,5,45,0,0,437,438,5,61,0,0,438,98,1,0,0,0,439,440,5,47,
  	0,0,440,441,5,61,0,0,441,100,1,0,0,0,442,443,5,42,0,0,443,444,5,61,0,
  	0,444,102,1,0,0,0,445,446,5,37,0,0,446,447,5,61,0,0,447,104,1,0,0,0,448,
  	449,5,38,0,0,449,450,5,61,0,0,450,106,1,0,0,0,451,452,5,124,0,0,452,453,
  	5,61,0,0,453,108,1,0,0,0,454,455,5,94,0,0,455,456,5,61,0,0,456,110,1,
  	0,0,0,457,458,5,60,0,0,458,459,5,60,0,0,459,460,5,61,0,0,460,112,1,0,
  	0,0,461,462,5,62,0,0,462,463,5,62,0,0,463,464,5,61,0,0,464,114,1,0,0,
  	0,465,466,5,126,0,0,466,467,5,61,0,0,467,116,1,0,0,0,468,469,5,63,0,0,
  	469,470,5,63,0,0,470,118,1,0,0,0,471,472,5,124,0,0,472,473,5,124,0,0,
  	473,120,1,0,0,0,474,475,5,38,0,0,475,476,5,38,0,0,476,122,1,0,0,0,477,
  	478,5,124,0,0,478,124,1,0,0,0,479,480,5,94,0,0,480,126,1,0,0,0,481,482,
  	5,33,0,0,482,483,5,61,0,0,483,128,1,0,0,0,484,485,5,61,0,0,485,486,5,
  	61,0,0,486,130,1,0,0,0,487,488,5,33,0,0,488,489,5,61,0,0,489,490,5,61,
  	0,0,490,132,1,0,0,0,491,492,5,61,0,0,492,493,5,61,0,0,493,494,5,61,0,
  	0,494,134,1,0,0,0,495,496,5,60,0,0,496,497,5,61,0,0,497,136,1,0,0,0,498,
  	499,5,62,0,0,499,500,5,61,0,0,500,138,1,0,0,0,501,502,5,60,0,0,502,503,
  	5,60,0,0,503,140,1,0,0,0,504,505,5,62,0,0,505,506,5,62,0,0,506,142,1,
  	0,0,0,507,508,5,43,0,0,508,144,1,0,0,0,509,510,5,45,0,0,510,146,1,0,0,
  	0,511,512,5,47,0,0,512,148,1,0,0,0,513,514,5,37,0,0,514,150,1,0,0,0,515,
  	516,5,33,0,0,516,152,1,0,0,0,517,518,5,126,0,0,518,154,1,0,0,0,519,520,
  	5,43,0,0,520,521,5,43,0,0,521,156,1,0,0,0,522,523,5,45,0,0,523,524,5,
  	45,0,0,524,158,1,0,0,0,525,526,5,105,0,0,526,527,5,115,0,0,527,160,1,
  	0,0,0,528,529,5,110,0,0,529,530,5,111,0,0,530,531,5,116,0,0,531,162,1,
  	0,0,0,532,533,5,116,0,0,533,534,5,104,0,0,534,535,5,114,0,0,535,536,5,
  	101,0,0,536,537,5,97,0,0,537,538,5,100,0,0,538,164,1,0,0,0,539,540,5,
  	99,0,0,540,541,5,104,0,0,541,542,5,105,0,0,542,543,5,108,0,0,543,544,
  	5,100,0,0,544,545,5,116,0,0,545,546,5,104,0,0,546,547,5,114,0,0,547,548,
  	5,101,0,0,548,549,5,97,0,0,549,550,5,100,0,0,550,166,1,0,0,0,551,552,
  	5,116,0,0,552,553,5,104,0,0,553,554,5,114,0,0,554,555,5,101,0,0,555,556,
  	5,97,0,0,556,557,5,100,0,0,557,558,5,101,0,0,558,559,5,110,0,0,559,560,
  	5,100,0,0,560,561,5,111,0,0,561,562,5,110,0,0,562,168,1,0,0,0,563,564,
  	5,98,0,0,564,565,5,117,0,0,565,566,5,105,0,0,566,567,5,108,0,0,567,568,
  	5,116,0,0,568,569,5,105,0,0,569,570,5,110,0,0,570,170,1,0,0,0,571,572,
  	5,46,0,0,572,172,1,0,0,0,573,574,5,63,0,0,574,575,5,46,0,0,575,174,1,
  	0,0,0,576,577,5,64,0,0,577,176,1,0,0,0,578,580,5,13,0,0,579,578,1,0,0,
  	0,579,580,1,0,0,0,580,581,1,0,0,0,581,584,5,10,0,0,582,584,5,13,0,0,583,
  	579,1,0,0,0,583,582,1,0,0,0,584,585,1,0,0,0,585,586,6,88,0,0,586,178,
  	1,0,0,0,587,588,7,0,0,0,588,589,1,0,0,0,589,590,6,89,0,0,590,180,1,0,
  	0,0,591,593,5,45,0,0,592,591,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,
  	594,598,7,1,0,0,595,597,7,2,0,0,596,595,1,0,0,0,597,600,1,0,0,0,598,596,
  	1,0,0,0,598,599,1,0,0,0,599,182,1,0,0,0,600,598,1,0,0,0,601,603,5,45,
  	0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,605,5,48,0,0,
  	605,607,7,3,0,0,606,608,7,4,0,0,607,606,1,0,0,0,608,609,1,0,0,0,609,607,
  	1,0,0,0,609,610,1,0,0,0,610,184,1,0,0,0,611,613,5,45,0,0,612,611,1,0,
  	0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,618,5,48,0,0,615,617,7,5,0,0,
  	616,615,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,186,
  	1,0,0,0,620,618,1,0,0,0,621,623,5,45,0,0,622,621,1,0,0,0,622,623,1,0,
  	0,0,623,624,1,0,0,0,624,625,5,48,0,0,625,629,7,6,0,0,626,628,7,7,0,0,
  	627,626,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,188,
  	1,0,0,0,631,629,1,0,0,0,632,634,5,45,0,0,633,632,1,0,0,0,633,634,1,0,
  	0,0,634,659,1,0,0,0,635,637,7,2,0,0,636,635,1,0,0,0,637,640,1,0,0,0,638,
  	636,1,0,0,0,638,639,1,0,0,0,639,641,1,0,0,0,640,638,1,0,0,0,641,643,5,
  	46,0,0,642,644,7,2,0,0,643,642,1,0,0,0,644,645,1,0,0,0,645,643,1,0,0,
  	0,645,646,1,0,0,0,646,660,1,0,0,0,647,649,7,2,0,0,648,647,1,0,0,0,649,
  	650,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,656,5,
  	46,0,0,653,655,7,2,0,0,654,653,1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,
  	0,656,657,1,0,0,0,657,660,1,0,0,0,658,656,1,0,0,0,659,638,1,0,0,0,659,
  	648,1,0,0,0,660,190,1,0,0,0,661,662,5,98,0,0,662,663,5,114,0,0,663,664,
  	5,101,0,0,664,665,5,97,0,0,665,696,5,107,0,0,666,667,5,99,0,0,667,668,
  	5,111,0,0,668,669,5,110,0,0,669,670,5,116,0,0,670,671,5,105,0,0,671,672,
  	5,110,0,0,672,673,5,117,0,0,673,696,5,101,0,0,674,675,5,103,0,0,675,676,
  	5,111,0,0,676,677,5,116,0,0,677,696,5,111,0,0,678,679,5,114,0,0,679,680,
  	5,101,0,0,680,681,5,116,0,0,681,682,5,117,0,0,682,683,5,114,0,0,683,696,
  	5,110,0,0,684,685,5,119,0,0,685,686,5,97,0,0,686,687,5,105,0,0,687,696,
  	5,116,0,0,688,689,5,106,0,0,689,690,5,117,0,0,690,691,5,109,0,0,691,692,
  	5,112,0,0,692,693,5,100,0,0,693,694,5,101,0,0,694,696,5,118,0,0,695,661,
  	1,0,0,0,695,666,1,0,0,0,695,674,1,0,0,0,695,678,1,0,0,0,695,684,1,0,0,
  	0,695,688,1,0,0,0,696,192,1,0,0,0,697,698,5,116,0,0,698,699,5,114,0,0,
  	699,700,5,117,0,0,700,707,5,101,0,0,701,702,5,102,0,0,702,703,5,97,0,
  	0,703,704,5,108,0,0,704,705,5,115,0,0,705,707,5,101,0,0,706,697,1,0,0,
  	0,706,701,1,0,0,0,707,194,1,0,0,0,708,709,5,117,0,0,709,710,5,110,0,0,
  	710,711,5,100,0,0,711,712,5,101,0,0,712,713,5,102,0,0,713,714,5,105,0,
  	0,714,715,5,110,0,0,715,716,5,101,0,0,716,717,5,100,0,0,717,196,1,0,0,
  	0,718,722,7,8,0,0,719,721,7,9,0,0,720,719,1,0,0,0,721,724,1,0,0,0,722,
  	720,1,0,0,0,722,723,1,0,0,0,723,198,1,0,0,0,724,722,1,0,0,0,725,726,5,
  	35,0,0,726,730,7,8,0,0,727,729,7,9,0,0,728,727,1,0,0,0,729,732,1,0,0,
  	0,730,728,1,0,0,0,730,731,1,0,0,0,731,200,1,0,0,0,732,730,1,0,0,0,733,
  	735,7,10,0,0,734,733,1,0,0,0,735,736,1,0,0,0,736,734,1,0,0,0,736,737,
  	1,0,0,0,737,746,1,0,0,0,738,739,5,46,0,0,739,740,5,103,0,0,740,741,5,
  	115,0,0,741,747,5,99,0,0,742,743,5,46,0,0,743,744,5,99,0,0,744,745,5,
  	115,0,0,745,747,5,99,0,0,746,738,1,0,0,0,746,742,1,0,0,0,746,747,1,0,
  	0,0,747,202,1,0,0,0,748,754,5,34,0,0,749,753,8,11,0,0,750,751,5,92,0,
  	0,751,753,9,0,0,0,752,749,1,0,0,0,752,750,1,0,0,0,753,756,1,0,0,0,754,
  	752,1,0,0,0,754,755,1,0,0,0,755,757,1,0,0,0,756,754,1,0,0,0,757,758,5,
  	34,0,0,758,204,1,0,0,0,759,760,7,12,0,0,760,761,3,203,101,0,761,206,1,
  	0,0,0,25,0,579,583,592,598,602,609,612,618,622,629,633,638,645,650,656,
  	659,695,706,722,730,736,746,752,754,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gsclexerLexerStaticData = staticData.release();
}

}

gscLexer::gscLexer(CharStream *input) : Lexer(input) {
  gscLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *gsclexerLexerStaticData->atn, gsclexerLexerStaticData->decisionToDFA, gsclexerLexerStaticData->sharedContextCache);
}

gscLexer::~gscLexer() {
  delete _interpreter;
}

std::string gscLexer::getGrammarFileName() const {
  return "gsc.g4";
}

const std::vector<std::string>& gscLexer::getRuleNames() const {
  return gsclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& gscLexer::getChannelNames() const {
  return gsclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& gscLexer::getModeNames() const {
  return gsclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& gscLexer::getVocabulary() const {
  return gsclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView gscLexer::getSerializedATN() const {
  return gsclexerLexerStaticData->serializedATN;
}

const atn::ATN& gscLexer::getATN() const {
  return *gsclexerLexerStaticData->atn;
}




void gscLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gsclexerLexerInitialize();
#else
  ::antlr4::internal::call_once(gsclexerLexerOnceFlag, gsclexerLexerInitialize);
#endif
}
