#include <includes.hpp>
#include <actscli.hpp>
#include "compatibility/scobalula_wni.hpp"
#include "compatibility/serious.hpp"
#include "tools/gsc_opcodes.hpp"
#include "tools/gsc_opcodes_load.hpp"

#if __has_include("tools/ps4/ps4_includes.hpp")

#include "tools/ps4/ps4_includes.hpp"

#endif

#if __has_include("tools/sp23/gsc23_opcodes_load.hpp")

#include "tools/sp23/gsc23_opcodes_load.hpp"

#endif

namespace tool::gsc::opcode {
	void RegisterOpCodesMap() {
		static std::once_flag f{};

		std::call_once(f, [] {

			// Register mapping

			// BLACK OPS 4 (VM 36)
			RegisterVM(VM_T8, "Call of Duty: Black ops 4", "t8", VmFlags::VMF_OPCODE_U16 | VmFlags::VMF_ALIGN | VmFlags::VMF_INV_ADD_TO_OBJECT | VmFlags::VMF_CLIENT_VM);
			RegisterVMPlatform(VM_T8, PLATFORM_PC);
			SetMaxOpCode(VM_T8, 0xFFF);
			RegisterVMGlobalVariable(VM_T8, "level");
			RegisterVMGlobalVariable(VM_T8, "game");
			RegisterVMGlobalVariable(VM_T8, "classes");
			RegisterVMGlobalVariable(VM_T8, "mission");
			RegisterVMGlobalVariable(VM_T8, "anim");
			RegisterVMGlobalVariable(VM_T8, "world");
			RegisterVMGlobalVariable(VM_T8, "sharedstructs");
			RegisterVMGlobalVariable(VM_T8, "memory");
			RegisterVMOperatorFunction(VM_T8, "profilestart", "profilestart()", OPCODE_ProfileStart, VPFD_NONE, 0, 0);
			RegisterVMOperatorFunction(VM_T8, "profilestop", "profilestop()", OPCODE_ProfileStop, VPFD_NONE, 0, 0);
			RegisterVMOperatorFunction(VM_T8, "isdefined", "isdefined(object) -> bool", OPCODE_IsDefined, VPFD_RETURN_VALUE, 1, 1);
			RegisterVMOperatorFunction(VM_T8, "notify", "<caller> notify(event, param*)", OPCODE_Notify, VPFD_SELF_PARAM | VPFD_USE_PRE_SCRIPT_CALL, 1);
			RegisterVMOperatorFunction(VM_T8, "endon", "<caller> endon(event+)", OPCODE_EndOn, VPFD_SELF_PARAM | VPFD_USE_COUNT, 1);
			RegisterVMOperatorFunction(VM_T8, "endoncallback", "<caller> endoncallback(func, event+)", OPCODE_EndOnCallback, VPFD_SELF_PARAM | VPFD_USE_COUNT, 2);
			RegisterVMOperatorFunction(VM_T8, "vectorscale", "vectorscale(vector, factor) -> vector", OPCODE_VectorScale, VPFD_RETURN_VALUE, 2, 2);
			RegisterVMOperatorFunction(VM_T8, "waittill", "<caller> waittill(event) -> struct", OPCODE_WaitTill, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 1);
			RegisterVMOperatorFunction(VM_T8, "waittillmatch", "<caller> waittillmatch(event, match) -> struct", OPCODE_WaitTillMatch, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 2);
			RegisterVMOperatorFunction(VM_T8, "waittillmatchtimeout", "<caller> waittillmatchtimeout(event, match, timeout) -> struct", OPCODE_WaitTillMatchTimeout, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 3);
			RegisterVMOperatorFunction(VM_T8, "waittilltimeout", "<caller> waittilltimeout(event, timeout) -> struct", OPCODE_WaittillTimeout, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 2);
			RegisterVMOperatorFunction(VM_T8, "wait", "wait(time)", OPCODE_Wait, VPFD_NONE, 1, 1);
			RegisterVMOperatorFunction(VM_T8, "waitframe", "waitframe(frames)", OPCODE_WaitFrame, VPFD_NONE, 1, 1);
			RegisterVMOperatorFunction(VM_T8, "waittillframeend", "waittillframeend()", OPCODE_WaitTillFrameEnd, VPFD_NONE, 0, 0);
			RegisterVMHashOPCode(VM_T8, '#', OPCODE_GetHash, 8, [](const char* str) { return hash::Hash64Pattern(str); });
			RegisterDevCall(VM_T8, "assert", "assertmsg", "errormsg", "throw", "println");

			
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown0, 0x0);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown1, 0x1);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown2, 0x2);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown3, 0x3);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown4, 0x4);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown5, 0x5);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown6, 0x6);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown7, 0x7);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknowna, 0xa);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknownb, 0xb);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0x12, 0x13, 0x14, 0x16, 0x18, 0x1a, 0x1e, 0x21, 0x23, 0x25, 0x27, 0x28, 0x2b, 0x2c, 0x2d, 0x2f, 0x30, 0x3d, 0x3e, 0x3f, 0x41, 0x43, 0x48, 0x4f, 0x50, 0x52, 0x53, 0x5b, 0x5e, 0x66, 0x67, 0x69, 0x6d, 0x73, 0x74, 0x75, 0x79, 0x7f, 0x80, 0x83, 0x84, 0x86, 0x87, 0x88, 0x90, 0x97, 0x99, 0x9c, 0xa3, 0xa5, 0xa8, 0xaa, 0xab, 0xac, 0xaf, 0xb2, 0xb3, 0xb6, 0xbd, 0xbf, 0xc3, 0xc6, 0xcb, 0xcd, 0xd1, 0xd2, 0xd5, 0xd6, 0xd8, 0xdb, 0xde, 0xdf, 0xe0, 0xe2, 0xe5, 0xe8, 0xec, 0xee);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0xef, 0xf1, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xff, 0x103, 0x108, 0x109, 0x10b, 0x111, 0x115, 0x11a, 0x121, 0x124, 0x127, 0x128, 0x12b, 0x12e, 0x12f, 0x131, 0x132, 0x135, 0x139, 0x13f, 0x140, 0x143, 0x148, 0x14a, 0x14d, 0x14f, 0x153, 0x156, 0x158, 0x159, 0x15b, 0x15c, 0x15d, 0x15e, 0x160, 0x161, 0x163, 0x166, 0x16b, 0x16c, 0x173, 0x174, 0x176, 0x17a, 0x17b, 0x185, 0x188, 0x18b, 0x18c, 0x18d, 0x18f, 0x191, 0x195, 0x19b, 0x19c, 0x19e, 0x19f, 0x1a0, 0x1a2, 0x1a4, 0x1a7, 0x1ad, 0x1ae, 0x1af, 0x1b3, 0x1b5, 0x1b7, 0x1b8, 0x1b9, 0x1bc, 0x1c3);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0x1c7, 0x1ca, 0x1cb, 0x1cc, 0x1d1, 0x1d5, 0x1dd, 0x1e0, 0x1e1, 0x1e5, 0x1e7, 0x1ea, 0x1ef, 0x1fa, 0x1fc, 0x1fd, 0x203, 0x20b, 0x20c, 0x20e, 0x214, 0x215, 0x216, 0x218, 0x221, 0x225, 0x226, 0x227, 0x229, 0x22c, 0x22e, 0x233, 0x234, 0x239, 0x23b, 0x23d, 0x240, 0x244, 0x245, 0x247, 0x24b, 0x24d, 0x254, 0x256, 0x258, 0x259, 0x25b, 0x25e, 0x25f, 0x263, 0x266, 0x267, 0x268, 0x26a, 0x26d, 0x271, 0x273, 0x277, 0x27a, 0x27b, 0x27f, 0x281, 0x282, 0x286, 0x289, 0x28a, 0x292, 0x297, 0x298, 0x299, 0x29b, 0x29e, 0x2a0, 0x2a1, 0x2a4, 0x2ac, 0x2ae, 0x2b0);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0x2b2, 0x2b5, 0x2b8, 0x2ba, 0x2bb, 0x2c4, 0x2c6, 0x2c7, 0x2c8, 0x2c9, 0x2cb, 0x2cc, 0x2cd, 0x2ce, 0x2d0, 0x2d1, 0x2d4, 0x2d5, 0x2d7, 0x2d8, 0x2da, 0x2e3, 0x2e4, 0x2e8, 0x2e9, 0x2ea, 0x2ec, 0x2f0, 0x2f5, 0x2f9, 0x2fa, 0x2fd, 0x301, 0x302, 0x305, 0x306, 0x308, 0x309, 0x30d, 0x310, 0x311, 0x313, 0x317, 0x318, 0x319, 0x31b, 0x31d, 0x31f, 0x322, 0x328, 0x329, 0x32a, 0x32c, 0x32d, 0x32e, 0x336, 0x339, 0x33c, 0x33f, 0x343, 0x346, 0x348, 0x34f, 0x351, 0x352, 0x353, 0x355, 0x362, 0x363, 0x367, 0x368, 0x369, 0x36a, 0x370, 0x373, 0x378, 0x37a, 0x37e);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0x37f, 0x382, 0x384, 0x387, 0x38b, 0x38d, 0x38e, 0x38f, 0x393, 0x398, 0x39a, 0x3a1, 0x3a3, 0x3a4, 0x3a5, 0x3a6, 0x3a8, 0x3a9, 0x3aa, 0x3ac, 0x3ad, 0x3af, 0x3b4, 0x3bc, 0x3bf, 0x3c2, 0x3c5, 0x3c7, 0x3ca, 0x3d0, 0x3d2, 0x3d5, 0x3d6, 0x3d7, 0x3d9, 0x3df, 0x3e1, 0x3e2, 0x3ea, 0x3ec, 0x3ef, 0x3f0, 0x3f3, 0x3f4, 0x3fe, 0x404, 0x407, 0x408, 0x411, 0x412, 0x413, 0x416, 0x419, 0x41a, 0x41c, 0x41d, 0x420, 0x421, 0x422, 0x423, 0x427, 0x429, 0x42b, 0x42c, 0x431, 0x437, 0x438, 0x439, 0x43a, 0x43c, 0x43f, 0x441, 0x443, 0x444, 0x445, 0x44a, 0x44d, 0x44f);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0x453, 0x456, 0x457, 0x458, 0x459, 0x45a, 0x460, 0x466, 0x46a, 0x46b, 0x46c, 0x46e, 0x474, 0x477, 0x47a, 0x47e, 0x47f, 0x480, 0x485, 0x488, 0x48c, 0x48e, 0x490, 0x493, 0x494, 0x495, 0x497, 0x498, 0x49b, 0x49f, 0x4ab, 0x4ac, 0x4ad, 0x4ae, 0x4b1, 0x4bc, 0x4bf, 0x4c3, 0x4c6, 0x4cb, 0x4cd, 0x4d4, 0x4d6, 0x4d9, 0x4dc, 0x4de, 0x4e2, 0x4e3, 0x4e5, 0x4e8, 0x4e9, 0x4ee, 0x4f4, 0x4f6, 0x4fa, 0x4fe, 0x4ff, 0x500, 0x501, 0x504, 0x506, 0x507, 0x508, 0x50f, 0x511, 0x515, 0x517, 0x518, 0x519, 0x51d, 0x51e, 0x521, 0x523, 0x52a, 0x52c, 0x52e, 0x532, 0x535);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0x538, 0x539, 0x53a, 0x540, 0x545, 0x546, 0x54a, 0x54b, 0x550, 0x553, 0x554, 0x555, 0x559, 0x55a, 0x55e, 0x55f, 0x562, 0x563, 0x569, 0x56b, 0x56c, 0x56f, 0x570, 0x575, 0x576, 0x577, 0x579, 0x57f, 0x580, 0x581, 0x587, 0x588, 0x58f, 0x592, 0x59f, 0x5a1, 0x5a2, 0x5a4, 0x5a7, 0x5ab, 0x5af, 0x5b0, 0x5b1, 0x5b5, 0x5b8, 0x5b9, 0x5bc, 0x5be, 0x5c1, 0x5c3, 0x5c5, 0x5c6, 0x5c7, 0x5cd, 0x5ce, 0x5cf, 0x5d3, 0x5d5, 0x5dc, 0x5df, 0x5e6, 0x5e7, 0x5e8, 0x5ee, 0x5ef, 0x5f0, 0x5f2, 0x5f3, 0x5f5, 0x5f6, 0x5f7, 0x5fa, 0x5fe, 0x5ff, 0x600, 0x603, 0x609, 0x60e);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0x611, 0x612, 0x613, 0x614, 0x615, 0x619, 0x61b, 0x61d, 0x61f, 0x620, 0x626, 0x62b, 0x62c, 0x632, 0x633, 0x634, 0x636, 0x639, 0x63b, 0x63c, 0x63e, 0x641, 0x648, 0x64a, 0x64c, 0x64e, 0x651, 0x658, 0x659, 0x65b, 0x65c, 0x660, 0x661, 0x664, 0x665, 0x666, 0x669, 0x66c, 0x66d, 0x66f, 0x671, 0x674, 0x676, 0x677, 0x678, 0x67a, 0x682, 0x685, 0x68e, 0x68f, 0x691, 0x695, 0x697, 0x698, 0x699, 0x69c, 0x69d, 0x6a4, 0x6a6, 0x6a7, 0x6aa, 0x6af, 0x6b0, 0x6b3, 0x6bc, 0x6bd, 0x6bf, 0x6c2, 0x6c3, 0x6c7, 0x6c9, 0x6ca, 0x6cb, 0x6cc, 0x6ce, 0x6d0, 0x6d6, 0x6d8);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0x6d9, 0x6db, 0x6dc, 0x6dd, 0x6de, 0x6e0, 0x6e1, 0x6e2, 0x6e3, 0x6e5, 0x6e7, 0x6f0, 0x6f3, 0x6f6, 0x6f8, 0x6f9, 0x6fb, 0x6fc, 0x701, 0x704, 0x706, 0x70d, 0x710, 0x711, 0x713, 0x71c, 0x71f, 0x724, 0x726, 0x728, 0x731, 0x733, 0x737, 0x738, 0x73b, 0x73c, 0x73d, 0x73e, 0x740, 0x742, 0x743, 0x748, 0x750, 0x751, 0x754, 0x758, 0x75b, 0x75e, 0x764, 0x76e, 0x76f, 0x772, 0x77b, 0x77e, 0x77f, 0x783, 0x784, 0x785, 0x795, 0x79a, 0x79b, 0x79e, 0x7a0, 0x7a4, 0x7a6, 0x7a8, 0x7ac, 0x7ae, 0x7af, 0x7b0, 0x7b1, 0x7b2, 0x7b4, 0x7b6, 0x7b8, 0x7ba, 0x7bc, 0x7bd);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0x7c0, 0x7c2, 0x7c5, 0x7c7, 0x7cb, 0x7cc, 0x7cd, 0x7ce, 0x7cf, 0x7d2, 0x7d4, 0x7d5, 0x7d7, 0x7d9, 0x7de, 0x7df, 0x7e3, 0x7e5, 0x7e7, 0x7e8, 0x7ec, 0x7ed, 0x7f3, 0x7f4, 0x7fc, 0x802, 0x806, 0x808, 0x812, 0x813, 0x817, 0x818, 0x819, 0x81c, 0x81e, 0x820, 0x821, 0x822, 0x823, 0x827, 0x833, 0x835, 0x836, 0x838, 0x83c, 0x83e, 0x83f, 0x840, 0x845, 0x847, 0x848, 0x849, 0x84b, 0x84d, 0x84e, 0x84f, 0x853, 0x854, 0x855, 0x857, 0x858, 0x85b, 0x85d, 0x85e, 0x860, 0x863, 0x864, 0x865, 0x867, 0x870, 0x876, 0x87a, 0x87b, 0x87d, 0x87f, 0x889, 0x88c, 0x88d);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0x88f, 0x890, 0x892, 0x894, 0x895, 0x896, 0x89d, 0x8a5, 0x8a7, 0x8aa, 0x8ae, 0x8ba, 0x8bc, 0x8c0, 0x8c2, 0x8c3, 0x8c4, 0x8c9, 0x8cb, 0x8d4, 0x8d7, 0x8d8, 0x8d9, 0x8dc, 0x8de, 0x8e3, 0x8e4, 0x8e7, 0x8e8, 0x8f0, 0x8f1, 0x8f2, 0x8f3, 0x8f4, 0x8f5, 0x8f7, 0x8fb, 0x8fc, 0x8fd, 0x8fe, 0x901, 0x903, 0x907, 0x909, 0x90b, 0x90e, 0x911, 0x912, 0x915, 0x916, 0x91a, 0x91e, 0x922, 0x925, 0x927, 0x928, 0x92a, 0x92c, 0x933, 0x938, 0x939, 0x93c, 0x93e, 0x941, 0x943, 0x944, 0x949, 0x94a, 0x94b, 0x94d, 0x94f, 0x950, 0x951, 0x952, 0x959, 0x95a, 0x95b, 0x961);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0x962, 0x967, 0x968, 0x969, 0x96e, 0x96f, 0x974, 0x978, 0x982, 0x98a, 0x98c, 0x98d, 0x98f, 0x992, 0x993, 0x995, 0x999, 0x99a, 0x9a6, 0x9a9, 0x9ae, 0x9b7, 0x9be, 0x9c0, 0x9c1, 0x9c3, 0x9c6, 0x9c7, 0x9d1, 0x9d4, 0x9d6, 0x9d8, 0x9da, 0x9e0, 0x9e2, 0x9e7, 0x9e8, 0x9ea, 0x9ef, 0x9f0, 0x9f2, 0x9f4, 0x9f5, 0x9fa, 0x9fc, 0x9fe, 0xa01, 0xa03, 0xa04, 0xa05, 0xa06, 0xa07, 0xa0f, 0xa10, 0xa13, 0xa14, 0xa17, 0xa18, 0xa1b, 0xa1c, 0xa1d, 0xa1e, 0xa20, 0xa22, 0xa27, 0xa2a, 0xa2e, 0xa2f, 0xa30, 0xa39, 0xa40, 0xa42, 0xa43, 0xa46, 0xa49, 0xa4a, 0xa52, 0xa57);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0xa5e, 0xa5f, 0xa61, 0xa65, 0xa68, 0xa6a, 0xa70, 0xa72, 0xa76, 0xa78, 0xa7a, 0xa80, 0xa82, 0xa84, 0xa85, 0xa87, 0xa89, 0xa8c, 0xa8d, 0xa90, 0xa91, 0xa93, 0xa94, 0xa98, 0xa9b, 0xa9c, 0xa9e, 0xa9f, 0xaa0, 0xaa6, 0xaab, 0xab0, 0xab1, 0xab2, 0xab4, 0xab7, 0xaba, 0xabd, 0xabe, 0xabf, 0xac0, 0xac3, 0xac4, 0xac5, 0xac9, 0xaca, 0xacd, 0xacf, 0xad1, 0xad2, 0xad3, 0xad7, 0xad8, 0xada, 0xade, 0xadf, 0xae1, 0xae7, 0xae8, 0xaf1, 0xaf2, 0xafc, 0xafe, 0xb00, 0xb01, 0xb02, 0xb08, 0xb09, 0xb0a, 0xb0d, 0xb15, 0xb1e, 0xb26, 0xb2b, 0xb2c, 0xb2e, 0xb32, 0xb33);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0xb39, 0xb3a, 0xb3c, 0xb3f, 0xb40, 0xb41, 0xb43, 0xb44, 0xb47, 0xb4b, 0xb4c, 0xb55, 0xb56, 0xb57, 0xb61, 0xb68, 0xb6a, 0xb6c, 0xb6e, 0xb70, 0xb71, 0xb75, 0xb77, 0xb7b, 0xb7c, 0xb7d, 0xb87, 0xb8b, 0xb8c, 0xb8d, 0xb96, 0xb99, 0xb9a, 0xb9e, 0xba0, 0xba3, 0xba5, 0xba9, 0xbab, 0xbae, 0xbb1, 0xbbb, 0xbc1, 0xbc5, 0xbc6, 0xbc8, 0xbcb, 0xbd5, 0xbda, 0xbdb, 0xbdc, 0xbde, 0xbe0, 0xbe1, 0xbe5, 0xbe7, 0xbeb, 0xbed, 0xbf1, 0xbf3, 0xbf4, 0xbfb, 0xbfe, 0xbff, 0xc00, 0xc03, 0xc05, 0xc0a, 0xc0c, 0xc0f, 0xc10, 0xc11, 0xc13, 0xc16, 0xc17, 0xc1c, 0xc1f, 0xc20);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0xc21, 0xc29, 0xc2b, 0xc2d, 0xc2f, 0xc35, 0xc38, 0xc3a, 0xc3d, 0xc3f, 0xc41, 0xc42, 0xc45, 0xc49, 0xc50, 0xc52, 0xc54, 0xc55, 0xc56, 0xc57, 0xc58, 0xc59, 0xc5a, 0xc61, 0xc63, 0xc67, 0xc71, 0xc72, 0xc74, 0xc76, 0xc78, 0xc7a, 0xc7f, 0xc81, 0xc84, 0xc86, 0xc8a, 0xc8c, 0xc92, 0xc97, 0xc9c, 0xca4, 0xca5, 0xca7, 0xca8, 0xca9, 0xcae, 0xcaf, 0xcb0, 0xcb4, 0xcb9, 0xcbf, 0xcc0, 0xcc1, 0xcce, 0xcd3, 0xcd4, 0xcd5, 0xcdc, 0xcdd, 0xcde, 0xcdf, 0xce2, 0xce3, 0xce5, 0xce9, 0xcea, 0xceb, 0xced, 0xcee, 0xcf0, 0xcf5, 0xcf6, 0xcf7, 0xcf8, 0xcfe, 0xd03, 0xd05);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0xd07, 0xd09, 0xd0f, 0xd10, 0xd11, 0xd12, 0xd19, 0xd1b, 0xd26, 0xd28, 0xd2a, 0xd2c, 0xd2f, 0xd36, 0xd39, 0xd3a, 0xd3b, 0xd3e, 0xd3f, 0xd43, 0xd44, 0xd45, 0xd46, 0xd4b, 0xd4d, 0xd4e, 0xd51, 0xd53, 0xd57, 0xd59, 0xd5c, 0xd5d, 0xd62, 0xd63, 0xd66, 0xd67, 0xd69, 0xd6c, 0xd6e, 0xd73, 0xd74, 0xd7b, 0xd83, 0xd84, 0xd85, 0xd86, 0xd8a, 0xd8e, 0xd92, 0xd95, 0xd99, 0xd9b, 0xd9c, 0xd9e, 0xd9f, 0xda1, 0xda2, 0xda5, 0xda9, 0xdac, 0xdad, 0xdb0, 0xdb2, 0xdb7, 0xdb9, 0xdbc, 0xdbd, 0xdbf, 0xdc2, 0xdc4, 0xdc6, 0xdc9, 0xdcd, 0xdce, 0xdd0, 0xdd4, 0xdd5, 0xdd9);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0xde0, 0xde1, 0xde2, 0xde3, 0xde5, 0xde7, 0xde9, 0xdf0, 0xdf1, 0xdf3, 0xdf8, 0xdf9, 0xdfb, 0xe01, 0xe02, 0xe05, 0xe07, 0xe09, 0xe0e, 0xe0f, 0xe12, 0xe13, 0xe14, 0xe19, 0xe1b, 0xe1d, 0xe21, 0xe25, 0xe26, 0xe28, 0xe2a, 0xe2b, 0xe2d, 0xe2e, 0xe30, 0xe36, 0xe38, 0xe3e, 0xe3f, 0xe40, 0xe43, 0xe44, 0xe48, 0xe49, 0xe4a, 0xe4b, 0xe4f, 0xe50, 0xe52, 0xe59, 0xe5f, 0xe63, 0xe64, 0xe68, 0xe6b, 0xe6c, 0xe70, 0xe71, 0xe7a, 0xe7e, 0xe82, 0xe84, 0xe85, 0xe86, 0xe8a, 0xe8b, 0xe8e, 0xe92, 0xe95, 0xe98, 0xe9f, 0xea0, 0xea1, 0xea2, 0xea4, 0xea7, 0xeaf, 0xeb1);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0xeb6, 0xeb7, 0xeb9, 0xebb, 0xebc, 0xec2, 0xec3, 0xec4, 0xec5, 0xec6, 0xec9, 0xecb, 0xecd, 0xece, 0xed3, 0xed5, 0xed7, 0xeda, 0xede, 0xee0, 0xee1, 0xee4, 0xee7, 0xeeb, 0xeee, 0xef0, 0xef7, 0xefa, 0xefc, 0xf01, 0xf02, 0xf03, 0xf04, 0xf07, 0xf0a, 0xf0b, 0xf0c, 0xf0e, 0xf0f, 0xf10, 0xf15, 0xf17, 0xf19, 0xf1a, 0xf1c, 0xf1d, 0xf1e, 0xf1f, 0xf20, 0xf24, 0xf27, 0xf28, 0xf29, 0xf2b, 0xf2c, 0xf2d, 0xf30, 0xf32, 0xf33, 0xf34, 0xf35, 0xf36, 0xf3c, 0xf43, 0xf46, 0xf48, 0xf4f, 0xf55, 0xf5e, 0xf69, 0xf6a, 0xf6c, 0xf6e, 0xf74, 0xf77, 0xf78, 0xf82, 0xf83);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Nop, 0xf84, 0xf85, 0xf87, 0xf8b, 0xf97, 0xf9a, 0xf9c, 0xf9e, 0xfa1, 0xfa2, 0xfa6, 0xfa9, 0xfad, 0xfaf, 0xfb2, 0xfb5, 0xfb6, 0xfbb, 0xfbc, 0xfbf, 0xfc2, 0xfce, 0xfcf, 0xfd4, 0xfd6, 0xfd7, 0xfd8, 0xfda, 0xfdb, 0xfe3, 0xfe5, 0xfe8, 0xfeb, 0xff8, 0xffc, 0xffd);

			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_AddToArray, 0x51, 0x119, 0x146, 0x180, 0x4e1, 0x510, 0x60a, 0x64f, 0x6d5, 0x777, 0x986, 0xa60, 0xaf4, 0xc7c, 0xe60, 0xfae);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_AddToStruct, 0x11f, 0x1db, 0x5ac, 0x71a, 0xad5, 0xc5d, 0xc9f, 0xcbb, 0xd2b, 0xd30);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Bit_And, 0xfd, 0x4fd, 0x684, 0x6b7, 0x6bb, 0x6d4, 0xc12, 0xc9a, 0xd54, 0xe24, 0xfe7);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Bit_Or, 0x44, 0x197, 0x23a, 0x2de, 0x350, 0x3a0, 0x43b, 0x56a, 0x595, 0x68a, 0x6e9, 0x761, 0x8d1, 0x940, 0xa6b, 0xdeb, 0xed0, 0xf4e);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Bit_Xor, 0x46, 0x213, 0x257, 0x33e, 0x36e, 0x4af, 0x8dd, 0x937, 0x956, 0x9c9, 0xaf7, 0xb76, 0xb79, 0xc5c, 0xc5e, 0xc75, 0xc83, 0xd41, 0xdc1);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_BoolComplement, 0x4d, 0x13a, 0x3b7, 0x42a, 0x514, 0x573, 0x5d0, 0x5f4, 0x668, 0x71b, 0x89e, 0x8b4, 0x9d7, 0xa88, 0xac7, 0xcf2, 0xe33, 0xe5d, 0xead);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_BoolNot, 0x9a, 0x13c, 0x19a, 0x1d8, 0x220, 0x566, 0x606, 0x6b2, 0x7d1, 0xaac, 0xc6c, 0xda0, 0xe73, 0xeab, 0xf39, 0xf3e, 0xf5c, 0xfd1, 0xff0, 0xffa);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_CallBuiltinFunction, 0xf);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_CallBuiltinMethod, 0x10);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_CastAndEvalFieldVariable, 0x71, 0x32b, 0x340, 0x512, 0x7a3, 0x80a, 0x8e1, 0xb4a, 0xb7e, 0xbaa, 0xbd7, 0xcd2, 0xe41, 0xedd, 0xf80);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_CastBool, 0x9b, 0xed, 0x11b, 0x152, 0x1c4, 0x364, 0x464, 0x49e, 0x537, 0x585, 0x681, 0x78b, 0x881, 0x90c, 0x9e1, 0xa32, 0xa4b, 0xa59, 0xa5b, 0xc3b, 0xcb8, 0xe3a, 0xeff);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_CastCanon, 0x7a, 0xd7, 0x15f, 0x265, 0x2b4, 0x2b6, 0x2f4, 0x39b, 0x5db, 0x722, 0x730, 0x7da, 0x8d0, 0x9a3, 0x9d3, 0xbe2, 0xc27);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_CastFieldObject, 0x18e, 0x193, 0x1f1, 0x39e, 0x3dd, 0x42f, 0x45c, 0x4aa, 0x5b6, 0x5e3, 0x607, 0x791, 0x7ff, 0x82b, 0x8b7, 0x97c, 0xb62, 0xc69, 0xc7b, 0xc98, 0xc99, 0xccb, 0xd40, 0xd42);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_CheckClearParams, 0xd);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ClassFunctionCall, 0x3b, 0x5d, 0x14b, 0x27e, 0x29a, 0x58e, 0x61a, 0x70a, 0x78d, 0x78f, 0x850, 0x8a0, 0x94c, 0xa8a, 0xb14, 0xba1, 0xbcc, 0xbf8, 0xcd9, 0xdca, 0xf23);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ClassFunctionThreadCall, 0xe3, 0x114, 0x1a1, 0x1d6, 0x3b5, 0x451, 0x50a, 0x53e, 0x5fd, 0x6b4, 0x709, 0x793, 0xa55, 0xa81, 0xaad, 0xb69, 0xbd0, 0xc46, 0xcbe, 0xd25, 0xd61, 0xd7f, 0xde8, 0xebf, 0xee8, 0xeed, 0xf6f);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ClassFunctionThreadCallEndOn, 0x120, 0x17f, 0x210, 0x401, 0x4b8, 0x530, 0x5ba, 0x66a, 0x690, 0x6b8, 0x82f, 0x8b9, 0x8be, 0x8d6, 0x8ee, 0x984, 0x9b2, 0xa25, 0xcab, 0xd21, 0xecc, 0xeea);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ClearArray, 0x1b, 0xbe, 0x1e8, 0x208, 0x3bb, 0x463, 0x516, 0x6c0, 0x762, 0x7b9, 0x7dd, 0x871, 0x8ac, 0x9a1, 0x9b4, 0x9f3, 0xa6f, 0xd49, 0xe23, 0xea3);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ClearFieldVariable, 0x14c, 0x27d, 0x4fb, 0x50d, 0x586, 0x5d4, 0x67f, 0x766, 0x852, 0x8bf, 0x97b, 0xb8f, 0xb97, 0xce6, 0xd3c, 0xd7d, 0xd96, 0xe06, 0xe2f, 0xf6b, 0xff3);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ClearFieldVariableOnStack, 0x19, 0x1e9, 0x212, 0x284, 0x290, 0x2f3, 0x2ff, 0x32f, 0x405, 0x42e, 0x49a, 0x543, 0x599, 0x5cc, 0x5e0, 0x74e, 0x74f, 0x7ca, 0x81a, 0x95c, 0x979, 0x97e, 0xbad, 0xbe6, 0xcd1, 0xd17, 0xdf5, 0xe2c, 0xf3a, 0xfd0);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ClearParams, 0xc);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_CreateArray, 0x62, 0x1fb, 0x255, 0x2fb, 0x39c, 0x461, 0x505, 0x58d, 0x6ba, 0x6ff, 0x75d, 0x832, 0x8e0, 0x9c8, 0x9cb, 0x9e3, 0xab6, 0xb5c, 0xb63, 0xb83, 0xbce, 0xc09, 0xd1c, 0xd58, 0xe37, 0xe5e, 0xf70, 0xf7c);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_CreateStruct, 0x78, 0x1eb, 0x201, 0x2bc, 0x3f9, 0x455, 0x52b, 0x65f, 0x679, 0x72c, 0x873, 0x8b5, 0xa66, 0xbc2, 0xd75, 0xdc7, 0xe00, 0xeb0);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Dec, 0xf5, 0x165, 0x1f6, 0x295, 0x31e, 0x3de, 0x41b, 0x4a7, 0x4d3, 0x645, 0x752, 0x779, 0x77a, 0x82c, 0x9df, 0xb04, 0xb5e, 0xb7a, 0xb85, 0xb95, 0xbec, 0xcba, 0xccd, 0xdaa, 0xe55, 0xe99, 0xec0, 0xf93);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_DecTop, 0x1f4, 0x53f, 0x561, 0x597, 0x732, 0x851, 0x8cf, 0x965, 0x99c, 0xdd3, 0xee2, 0xef6, 0xf3f, 0xf91);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_DevblockBegin, 0x31, 0x147, 0x157, 0x1a9, 0x1b6, 0x262, 0x279, 0x2c2, 0x3e5, 0x44b, 0x672, 0x6f4, 0x85f, 0x8d2, 0x92b, 0x987, 0x9ca, 0xa29, 0xa71, 0xadc, 0xb3d, 0xbb2, 0xd1d, 0xdee, 0xef1, 0xf00, 0xf41);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Divide, 0xc1, 0x2ca, 0x3c0, 0x469, 0x486, 0x826, 0x9e6, 0xc90, 0xe61, 0xea9, 0xfe4);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EmptyArray, 0x15, 0xbc, 0x1ab, 0x1c1, 0x449, 0x478, 0x479, 0x4b2, 0x582, 0x8c8, 0xb28, 0xb46, 0xbb9, 0xccf, 0xd0d, 0xfea);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_End, 0x11);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EndOn, 0x91, 0xb5, 0xe6, 0x10d, 0x237, 0x246, 0x272, 0x341, 0x40d, 0x45b, 0x45d, 0x4d2, 0x667, 0x6be, 0x6e6, 0x6ee, 0x734, 0x80c, 0x92f, 0x960, 0xa7d, 0xacb, 0xb89, 0xc1a, 0xd1a, 0xd23, 0xd9d, 0xe0d, 0xfa7);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EndOnCallback, 0x8c, 0xd4, 0x56e, 0x605, 0x908, 0x9c4, 0x9ce, 0xb9f, 0xbd1, 0xefd);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EndSwitch, 0xc2, 0x200, 0x23e, 0x2ef, 0x314, 0x386, 0x394, 0x40f, 0x41f, 0x43e, 0x462, 0x46d, 0x4b5, 0x574, 0x6d3, 0x792, 0x7a9, 0x7f8, 0x7fb, 0x81f, 0x86e, 0xad9, 0xb53, 0xc3e, 0xcc2, 0xe45, 0xf4b, 0xfef);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Equal, 0x9f, 0x11c, 0x21d, 0x24e, 0x2e5, 0x531, 0x5bb, 0x627, 0x717, 0x7db, 0x93f, 0x95e, 0xaa8, 0xb0c, 0xc8f, 0xddb, 0xea8, 0xf2e);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalArray, 0x8a, 0x12a, 0x1de, 0x278, 0x2df, 0x36c, 0x496, 0x4f8, 0x50e, 0x5ed, 0x65a, 0x6a2, 0x6eb, 0x9e4, 0x9ec, 0xa11, 0xae4, 0xaf9, 0xafd, 0xc24, 0xc2c, 0xdda, 0xdf2, 0xe11, 0xf09, 0xf6d);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalArrayRef, 0x3c1, 0x3da, 0x4a8, 0x4ce, 0x527, 0x5c9, 0x6a8, 0x782, 0x884, 0x887, 0x9a2, 0xa9d, 0xaae, 0xae6, 0xb06, 0xb35, 0xc85, 0xce4, 0xdea, 0xf05, 0xfe6);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalFieldObjectFromRef, 0x168, 0x171, 0x1b4, 0x2bf, 0x4d7, 0x509, 0x675, 0x6ab, 0x810, 0x87c, 0x8c6, 0x9e9, 0xa58, 0xb9b, 0xba8, 0xc22, 0xe3b);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalFieldVariable, 0x400, 0x4a9, 0x548, 0x551, 0x68b, 0x746, 0x7b3, 0x7c4, 0xd4f, 0xe1a, 0xed1);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalFieldVariableOnStack, 0x116, 0x118, 0x16f, 0x2dc, 0x3b3, 0x3fb, 0x4b4, 0x6df, 0x770, 0x7c3, 0x917, 0xa41, 0xca0, 0xee6);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalFieldVariableOnStackRef, 0x5f, 0x65, 0x93, 0x1d2, 0x219, 0x28c, 0x40e, 0x448, 0x450, 0x4d5, 0x6ac, 0x877, 0x970, 0x97a, 0x9b5, 0xb31, 0xbc7, 0xc4f, 0xdb4, 0xe15, 0xe8c, 0xe96, 0xf64);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalFieldVariableRef, 0x40, 0x7d, 0x1f0, 0x29c, 0x2b7, 0x487, 0x4ec, 0x4ed, 0x593, 0x5c0, 0x69e, 0x700, 0x72b, 0x786, 0x7ab, 0x80d, 0x8df, 0x9d5, 0xa50, 0xaf5, 0xb48, 0xb94, 0xbfc, 0xc06, 0xc1d, 0xe79, 0xe88, 0xef2, 0xf9f);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalGlobalObjectFieldVariable, 0x155, 0x1ba, 0x25c, 0x25d, 0x2f2, 0x436, 0x47d, 0x48f, 0x4c5, 0x50b, 0x5fb, 0x616, 0x729, 0x7f7, 0x891, 0x8b1, 0x90d, 0x98b, 0x9a5, 0xb45, 0xbb3, 0xd0a, 0xd2e, 0xd60, 0xf47);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalLocalVariableCached, 0x332, 0x3ae, 0x528, 0x5ca, 0x5d1, 0x689, 0x6b5, 0x741, 0x829, 0x8cc, 0x8e2, 0x919, 0xa31, 0xac2, 0xc3c, 0xc60, 0xc8d, 0xd32, 0xf8e);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalLocalVariableCachedDebug, 0x8);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalLocalVariableCachedSafe, 0xad, 0x10f, 0x12d, 0x141, 0x696, 0x77d, 0xa3c, 0xb2a, 0xbfd, 0xdcb, 0xfbd);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalLocalVariableDefined, 0x192, 0x1e3, 0x24f, 0x270, 0x2f7, 0x48a, 0x63d, 0x789, 0x7c1, 0x932, 0xab3, 0xb17, 0xbd8, 0xc68, 0xcef, 0xd0b, 0xd56, 0xd98);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalLocalVariableRefCached, 0x138, 0x236, 0x33d, 0x4a3, 0x53c, 0x589, 0x5a5, 0x5a8, 0x686, 0x6f5, 0x6fd, 0x957, 0xa21, 0xa3b, 0xa86, 0xadb, 0xb0e, 0xb49, 0xc65, 0xcf4, 0xd50, 0xe32, 0xe5b, 0xec7, 0xfde);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalLocalVariableRefCachedDebug, 0x9);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_EvalSelfFieldVariable, 0xd3, 0x134, 0x1f7, 0x46f, 0x59c, 0x657, 0x66b, 0x774, 0x88b, 0x8a3, 0x93b, 0xaaf, 0xbb7, 0xc2e, 0xcca, 0xce8, 0xd91);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_FirstArrayKey, 0x8d, 0x22d, 0x30e, 0x57c, 0x78a, 0x899, 0x964, 0xa23, 0xb8a, 0xd01, 0xdf6, 0xfc7);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_FirstArrayKeyCached, 0x123, 0x1d4, 0x1dc, 0x7f9, 0x866, 0xab8, 0xb5f, 0xbea, 0xc40, 0xd29, 0xdfa, 0xe7b, 0xed6);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetByte, 0x18a, 0x1ed, 0x476, 0x544, 0x5a6, 0x680, 0x692, 0x9c2, 0xa73, 0xc95, 0xd93, 0xed8, 0xf9b);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetFloat, 0x94, 0x100, 0x183, 0x1e2, 0x20a, 0x381, 0x3d8, 0x3e4, 0x598, 0x5ad, 0x630, 0x70f, 0x74a, 0x7a5, 0x7ea, 0x883, 0x8f9, 0xaa7, 0xb50, 0xb7f, 0xce1, 0xd3d, 0xe39, 0xf52, 0xfc9);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetFunction, 0x432, 0x5d8, 0x6a1, 0x718, 0xb64, 0xb9c, 0xc91, 0xcb1, 0xedb, 0xf16);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetGlobal, 0x12c, 0x4f9, 0x5ae, 0x6cd, 0x755, 0x7e4, 0x872, 0x980, 0x994, 0xaaa, 0xabc, 0xaef, 0xaf0, 0xb74, 0xbbc, 0xbf6, 0xc33, 0xdec, 0xe72, 0xf13, 0xfb9);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetGlobalObject, 0x187, 0x1bb, 0x250, 0x2db, 0x30a, 0x338, 0x39d, 0x470, 0x4bb, 0x4ea, 0x51c, 0x54c, 0x5da, 0x60d, 0x6a5, 0x6a9, 0x8f6, 0x8ff, 0x92e, 0x947, 0xb1b, 0xc4c, 0xd24, 0xe29, 0xeef, 0xefb, 0xf26);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetHash, 0x1f, 0x85, 0x107, 0x28f, 0x3b1, 0x4b0, 0x4ba, 0x4da, 0x5b3, 0x63f, 0x6d2, 0x7e0, 0x8a6, 0x8eb, 0x904, 0x96d, 0xa28, 0xa77, 0xaff, 0xbe9, 0xc23, 0xc39, 0xc9d, 0xd31, 0xe1f, 0xe69, 0xed2, 0xff7);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetLongInteger, 0x82, 0x13d, 0x1df, 0x377, 0x39f, 0x602, 0x662, 0x69b, 0x801, 0x804, 0x9af, 0x9eb, 0xa4f, 0xafa, 0xb42, 0xb67, 0xb73, 0xb81, 0xc0b, 0xc4b, 0xca3, 0xd8d, 0xdb8, 0xe17, 0xe65);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetNegByte, 0x4b, 0x199, 0x21e, 0x29d, 0x3b6, 0x42d, 0x549, 0x583, 0x6a3, 0x8ec, 0x9e5, 0xa24, 0xa3f, 0xbd9, 0xc19, 0xc79, 0xca2, 0xcb7, 0xd78, 0xd81, 0xdfc, 0xe62, 0xf22, 0xf5a, 0xfd2);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetNegUnsignedInteger, 0xe1, 0x1ec, 0x321, 0x3f2, 0x471, 0x4c9, 0x4df, 0x58b, 0x635, 0x749, 0x803, 0x837, 0x935, 0x95f, 0x9d2, 0xa0d, 0xa12, 0xa9a, 0xe97, 0xe9d, 0xeb4, 0xf65);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetNegUnsignedShort, 0x39, 0x14e, 0x1b2, 0x1f9, 0x202, 0x35f, 0x3db, 0x3f1, 0x406, 0x51a, 0x714, 0x76b, 0x799, 0x7fa, 0x815, 0x85c, 0x897, 0x8ce, 0xa37, 0xad0, 0xaf3, 0xb1d, 0xb3b, 0xd64, 0xdff, 0xf7b, 0xfb8);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetObjectType, 0x101, 0x194, 0x276, 0x2fe, 0x34a, 0x3b2, 0x40a, 0x47c, 0x58c, 0x644, 0x655, 0x721, 0x7f6, 0x828, 0x843, 0x934, 0x9b3, 0x9b9, 0xaa2, 0xcd6, 0xcfd, 0xd33, 0xd7a, 0xda3, 0xe6a, 0xf89, 0xfff);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetResolveFunction, 0x181, 0x222, 0x230, 0x232, 0x2aa, 0x2e0, 0x34d, 0x402, 0x434, 0x4db, 0x4e6, 0x558, 0x670, 0x6f7, 0x745, 0x74c, 0x7d3, 0x86c, 0x8c1, 0x9ee, 0xa62, 0xa8e, 0xc01, 0xc4a, 0xcb6, 0xcc3, 0xf42, 0xfcc);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetSelf, 0x16e, 0x1be, 0x205, 0x209, 0x252, 0x25a, 0x260, 0x5de, 0x653, 0x72a, 0x763, 0x767, 0x83a, 0x844, 0x846, 0xa54, 0xb4f, 0xcf9, 0xda7, 0xe76, 0xf56, 0xf88);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetSelfObject, 0x49, 0x59, 0x5a, 0x6b, 0x125, 0x129, 0x196, 0x3f5, 0x472, 0x4e7, 0x54d, 0x571, 0x62e, 0x6e8, 0x756, 0x7bf, 0x8ad, 0x91d, 0xa2c, 0xa38, 0xd47, 0xea5, 0xf11, 0xf81, 0xf96, 0xfa4, 0xfdd);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetString, 0x96, 0x1b0, 0x217, 0x231, 0x2af, 0x2d6, 0x380, 0x467, 0x601, 0x608, 0x6c1, 0x8b0, 0x9de, 0xc44, 0xd4c, 0xff1);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetTime, 0x117, 0x137, 0x19d, 0x253, 0x376, 0x45f, 0x475, 0x4a5, 0x4a6, 0x4c2, 0x4ef, 0x5a9, 0x753, 0x7c9, 0x9ba, 0xc53, 0xcd8, 0xd02, 0xda8);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetUIntPtr, 0x7e, 0xf9, 0x2c3, 0x35b, 0x3e8, 0x410, 0x47b, 0x525, 0x5a0, 0x5cb, 0x70c, 0xa47, 0xb60, 0xd15, 0xd22, 0xedf, 0xf76);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetUndefined, 0x56, 0x1a3, 0x1cd, 0x358, 0x739, 0x84a, 0x9f6, 0xb6b, 0xdef, 0xe3c, 0xf92, 0xfa5, 0xff4);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetUnsignedInteger, 0xa1, 0x15a, 0x1bf, 0x330, 0x44e, 0x591, 0x5d9, 0x637, 0x768, 0x76d, 0x7fd, 0x80e, 0x879, 0x90a, 0x972, 0xd1e, 0xd6d, 0xd6f, 0xdf7, 0xe91, 0xf2a);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetUnsignedShort, 0x307, 0x312, 0x354, 0x428, 0x4cc, 0x5c2, 0x64b, 0x735, 0x7c6, 0x96b, 0xa09, 0xa53, 0xacc, 0xb86, 0xc0d, 0xc73, 0xd13, 0xd65, 0xf63, 0xff2);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetVector, 0x22f, 0x3fc, 0x628, 0x702, 0x981, 0x9cd, 0xa00, 0xb11, 0xf57, 0xf90);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GetZero, 0x136, 0x2c5, 0x56d, 0x5e1, 0x8e5, 0x9aa, 0xa8b, 0xb16, 0xc28, 0xd87, 0xfa3);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GreaterThan, 0xbb, 0x110, 0x2dd, 0x3cf, 0x3f7, 0x4d1, 0x534, 0x5b2, 0x8bd, 0xa19, 0xb5b, 0xcb3, 0xdab, 0xf25, 0xfb3);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_GreaterThanOrEqualTo, 0x7b, 0x211, 0x29f, 0x315, 0x4c8, 0x5e9, 0x5eb, 0x69a, 0x87e, 0xa83, 0xad4, 0xb07, 0xb10, 0xb8e, 0xb91, 0xcbd, 0xd70, 0xf14, 0xf45, 0xfed);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Inc, 0x63, 0x8f, 0x1fe, 0x304, 0x35c, 0x36d, 0x3ba, 0x4cf, 0x4f1, 0x5aa, 0x7eb, 0x8b3, 0xa7e, 0xb19, 0xdc8, 0xf51, 0xfb0);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_IsDefined, 0x4e, 0x77, 0x38c, 0x3c3, 0x3ee, 0x481, 0x55c, 0x565, 0x5d2, 0x5dd, 0x5e4, 0x736, 0x74d, 0x79c, 0x7f1, 0x841, 0x94e, 0xaec, 0xb20, 0xb36, 0xb51, 0xb93, 0xc08, 0xc14, 0xc26, 0xe74, 0xf5d, 0xf79);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Jump, 0xc0, 0x151, 0x16a, 0x502, 0x5c8, 0x5f9, 0x73a, 0x75a, 0x86d, 0x8ca, 0x900, 0x924, 0x942, 0x9d0, 0xaf8, 0xcaa, 0xcdb, 0xdcc, 0xdfe, 0xfe9);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_JumpOnFalse, 0xc9, 0x1c2, 0x204, 0x2d3, 0x3cc, 0x3dc, 0x430, 0x4e0, 0x6b6, 0x6da, 0x757, 0x7dc, 0xa08, 0xb25, 0xb4e, 0xc1b, 0xcc4, 0xdfd, 0xe22, 0xe77, 0xe8d, 0xf0d, 0xf12, 0xfee);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_JumpOnFalseExpr, 0xce, 0x275, 0x347, 0x594, 0x59d, 0x63a, 0x95d, 0x996, 0x9db, 0xafb, 0xb23, 0xb84, 0xcd0, 0xd20, 0xd5b, 0xe35, 0xe67, 0xe90, 0xea6, 0xf7e);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_JumpOnGreaterThan, 0x6c, 0x102, 0x164, 0x389, 0x435, 0x5b7, 0x650, 0x6c8, 0x796, 0x7b5, 0x953, 0xc9e, 0xce7, 0xe0b, 0xe6e, 0xe7c);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_JumpOnLessThan, 0xfb, 0x130, 0x190, 0x48d, 0x572, 0x646, 0x663, 0x744, 0x861, 0x86f, 0x886, 0xb0f, 0xbbe, 0xbf2, 0xc25, 0xcf3, 0xd18, 0xedc, 0xfd5);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_JumpOnTrue, 0x34, 0x64, 0xb0, 0x374, 0x385, 0x3ff, 0x43d, 0x44c, 0x4f5, 0x623, 0x769, 0x905, 0x91c, 0x958, 0x9d9, 0xc4e, 0xcfa, 0xd8f, 0xe57);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_JumpOnTrueExpr, 0x61, 0x10a, 0x170, 0x17c, 0x2a9, 0x2fc, 0x303, 0x3bd, 0x618, 0x69f, 0x7bb, 0x8fa, 0x9f1, 0xa6d, 0xaf6, 0xb12, 0xb27, 0xbe8, 0xbfa, 0xca6, 0xcc7, 0xe1c, 0xe78, 0xef8, 0xf06, 0xf98);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_JumpPush, 0x2d2, 0x3ab, 0x61e, 0x70e, 0x90f, 0xc31, 0xc32, 0xc94, 0xf8c, 0xff9);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_LessThan, 0x1c6, 0x399, 0x54f, 0x5bd, 0x62a, 0x787, 0x92d, 0x93d, 0x99d, 0xab9, 0xbba, 0xc36, 0xe9e, 0xfac);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_LessThanOrEqualTo, 0x122, 0x182, 0x2b1, 0x2e6, 0x333, 0x3ed, 0x446, 0x560, 0x5b4, 0x5c4, 0x5d7, 0x68d, 0x6fa, 0x985, 0x9a4, 0xc1e, 0xc5f, 0xc88, 0xd76, 0xe31, 0xe8f);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Minus, 0xd9, 0x13b, 0x22a, 0x395, 0x520, 0x536, 0x6ae, 0x6fe, 0x771, 0x86a, 0x963, 0xa97, 0xb1c, 0xb24, 0xbc3, 0xbc9, 0xe5c, 0xe7f, 0xf68, 0xfdf);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Modulus, 0xe9, 0x1a6, 0x1c9, 0x22b, 0x294, 0x300, 0x30f, 0x3be, 0x40c, 0x5e5, 0x5ea, 0x62f, 0x649, 0x66e, 0x712, 0x7ad, 0x7ef, 0x945, 0x973, 0x9bd, 0xb5d, 0xbca, 0xc51, 0xc87, 0xd0c, 0xd82, 0xebe, 0xf37, 0xf75, 0xf86);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Multiply, 0x113, 0x206, 0x2ad, 0x3ce, 0x433, 0x484, 0x4d0, 0x529, 0x617, 0x673, 0x6c5, 0x76c, 0x7d0, 0x89b, 0x9f9, 0xa1a, 0xa36, 0xb37, 0xba2, 0xc8e, 0xcc6, 0xcfb, 0xd00, 0xd88, 0xe27, 0xe4c, 0xf95, 0xffb);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_NotEqual, 0x32, 0x28b, 0x291, 0x2cf, 0x2f1, 0x379, 0x3cb, 0x48b, 0x49d, 0x51b, 0x53b, 0x6f2, 0x8db, 0x913, 0x9ed, 0xd77, 0xd79, 0xde6, 0xe9a, 0xf9d);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Notify, 0xf0, 0x207, 0x2a7, 0x2eb, 0x3c4, 0x403, 0x625, 0x67e, 0x82a, 0x9dd, 0xc66, 0xcb2, 0xdc3, 0xdc5, 0xf2f, 0xf3d);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Plus, 0x6e, 0xae, 0x104, 0x106, 0x144, 0x2a6, 0x323, 0x51f, 0x596, 0x59a, 0x59e, 0x8e6, 0x975, 0xa56, 0xb4d, 0xb54, 0xbac, 0xd7e, 0xef3, 0xfca);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_PreScriptCall, 0xe);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ProfileStart, 0x95, 0xba, 0x1d0, 0x228, 0x242, 0x2bd, 0x556, 0x5bf, 0x62d, 0x6cf, 0x7ee, 0x82d, 0xa3a, 0xa5d, 0xaa5, 0xaa9, 0xace, 0xad6, 0xba7, 0xbc0, 0xd89, 0xdbb, 0xdc0, 0xe04, 0xe80, 0xec8, 0xf5b, 0xfe0);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ProfileStop, 0xdc, 0x20d, 0x59b, 0x875, 0x99f, 0xa51, 0xc6d, 0xce0, 0xf50, 0xf60, 0xfcd);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Return, 0x3c, 0xb1, 0x26c, 0x288, 0x36b, 0x45e, 0x482, 0x547, 0x57e, 0x68c, 0x73f, 0x800, 0x885, 0x9ab, 0x9fb, 0x9fd, 0xa16, 0xb0b, 0xbee, 0xc07, 0xd34, 0xe4d, 0xf08, 0xf1b, 0xf21, 0xf62, 0xfaa, 0xfb4);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_SafeCreateLocalVariables, 0x37, 0x89, 0x150, 0x1a8, 0x261, 0x26f, 0x334, 0x34c, 0x3cd, 0x489, 0x533, 0x640, 0x65d, 0x719, 0x807, 0x882, 0x955, 0xae5, 0xb2f, 0xbbf, 0xbd4, 0xc6b, 0xc89, 0xdde, 0xe83, 0xebd, 0xf44, 0xf61, 0xfb7);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_SafeDecTop, 0x42, 0x60, 0x98, 0xb9, 0x3c6, 0x67b, 0x72f, 0x759, 0x805, 0x888, 0x88e, 0x902, 0x920, 0x946, 0x96a, 0xa0e, 0xb1a, 0xb1f, 0xeec, 0xfc5);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptFunctionCall, 0x5c, 0x68, 0xa7, 0x17e, 0x24c, 0x327, 0x37c, 0x75c, 0x814, 0x834, 0x880, 0x97f, 0xac8, 0xbb6, 0xc0e, 0xc9b, 0xcb5, 0xcf1, 0xde4, 0xeca, 0xfd3);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptFunctionCallPointer, 0x2e, 0x23c, 0x243, 0x2ed, 0x326, 0x345, 0x3d1, 0x424, 0x440, 0x447, 0x454, 0x473, 0x541, 0x5e2, 0x5fc, 0x622, 0x652, 0x773, 0x78c, 0x794, 0x856, 0x8a8, 0x8af, 0xa0a, 0xadd, 0xe1e, 0xecf, 0xfa0, 0xffe);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptMethodCall, 0x1e6, 0x36f, 0x425, 0x6c4, 0x705, 0x7f2, 0x8b2, 0x8b6, 0x983, 0xa4c, 0xb78, 0xcad, 0xd52);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptMethodCallPointer, 0x33, 0x3a, 0xb8, 0x238, 0x2be, 0x342, 0x638, 0x9b1, 0x9b6, 0xa0b, 0xa95, 0xc77, 0xf67);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptMethodThreadCall, 0x248, 0x53d, 0x590, 0x78e, 0x83d, 0xa34, 0xbe4, 0xc93, 0xcc5, 0xd97, 0xe75);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptMethodThreadCallEndOn, 0x36, 0x172, 0x38a, 0x621, 0x775, 0xa2d, 0xa5c, 0xdbe, 0xf4c, 0xfcb);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptMethodThreadCallPointer, 0x1c, 0x145, 0x1d3, 0x2b3, 0x335, 0x4c7, 0x524, 0x5d6, 0x631, 0x656, 0x6ea, 0x715, 0x7d6, 0x825, 0x931, 0x9a7, 0xa5a, 0xb21, 0xbd2, 0xbf9, 0xcff, 0xdd2, 0xe20, 0xe51, 0xf7a, 0xf7d);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptMethodThreadCallPointerEndOn, 0x22, 0xa2, 0xa6, 0x1cf, 0x1da, 0x2c0, 0x2e2, 0x30c, 0x35e, 0x37b, 0x37d, 0x396, 0x3c9, 0x3f6, 0x4c4, 0x5ec, 0x76a, 0x89f, 0x8d3, 0x906, 0x948, 0xbcf, 0xc6a, 0xc6f, 0xcc9, 0xe9b, 0xfbe);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptThreadCall, 0x45, 0x9d, 0xa4, 0x1aa, 0x223, 0x356, 0x392, 0x442, 0x8cd, 0x966, 0xa63, 0xabb, 0xb34, 0xb98, 0xd48, 0xd5a, 0xe10, 0xef4, 0xf53, 0xfdc);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptThreadCallEndOn, 0x26, 0xfe, 0x23f, 0x2a2, 0x3c8, 0x4d8, 0x4eb, 0x526, 0x629, 0x688, 0x70b, 0x788, 0x868, 0xa1f, 0xa64, 0xaeb, 0xbb8, 0xbd3, 0xc4d, 0xd1f, 0xd35, 0xdb3, 0xe42, 0xeb3, 0xeb8, 0xf7f, 0xfe2);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptThreadCallPointer, 0x1c5, 0x1f2, 0x21a, 0x325, 0x33b, 0x397, 0x3eb, 0x499, 0x52d, 0x71d, 0x74b, 0x7a1, 0x84c, 0x9ac, 0x9b8, 0xa4d, 0xac1, 0xb05, 0xc6e, 0xd04, 0xd5f, 0xdd7, 0xe89, 0xeba, 0xfc3, 0xfe1);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ScriptThreadCallPointerEndOn, 0x4c, 0x57, 0x162, 0x35a, 0x35d, 0x371, 0x375, 0x414, 0x468, 0x4b3, 0x4dd, 0x5f1, 0x693, 0x6c6, 0x720, 0x77c, 0x7e2, 0x824, 0x82e, 0xc30, 0xd5e, 0xe03, 0xe66, 0xe94, 0xfc4);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_SetLocalVariableCached, 0x11d, 0x1c0, 0x1e4, 0x1ee, 0x3e7, 0x4f0, 0x60f, 0x683, 0x687, 0x910, 0x936, 0x9a0, 0xd16, 0xd38, 0xd80, 0xdba);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_SetLocalVariableCachedOnStack, 0xc4, 0xcf, 0xd0, 0x224, 0x26e, 0x2a8, 0x337, 0x349, 0x365, 0x4a2, 0x4f2, 0x54e, 0x647, 0x72e, 0x760, 0x91f, 0x998, 0x99e, 0xa6c, 0xa8f, 0xb6f, 0xc82, 0xec1, 0xf59, 0xfa8);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_SetNextArrayKeyCached, 0x26b, 0x320, 0x331, 0x383, 0x491, 0x4c1, 0x4fc, 0x564, 0x610, 0x71e, 0x72d, 0x80f, 0x8ea, 0x929, 0x971, 0x990, 0x9cf, 0xaa1, 0xae0, 0xbb4, 0xbef, 0xc8b, 0xcfc, 0xe3d, 0xe53, 0xee3, 0xf54, 0xf66, 0xfc8, 0xff5);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_SetVariableField, 0x8e, 0xf3, 0x21b, 0x28e, 0x2ee, 0x830, 0x831, 0x9bf, 0xa96, 0xbcd, 0xbd6, 0xc18, 0xd08, 0xd9a, 0xda6, 0xf8f, 0xfd9, 0xfec);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_SetVariableFieldRef, 0x7c, 0xf7, 0x133, 0x154, 0x1ff, 0x388, 0x492, 0x57a, 0x8a2, 0x8d5, 0x954, 0xa33, 0xc47, 0xc96, 0xd55, 0xd6b, 0xe6f, 0xf40);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ShiftLeft, 0x6a, 0xb4, 0x179, 0x186, 0x249, 0x3b0, 0x3d4, 0x465, 0x483, 0x49c, 0x4b6, 0x584, 0x654, 0x6e4, 0x6f1, 0x75f, 0x85a, 0x9a8, 0xaea, 0xaed, 0xb03, 0xb30, 0xba6, 0xc48, 0xc7e, 0xcc8, 0xcd7, 0xd06, 0xe34, 0xfc6);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_ShiftRight, 0x76, 0x24a, 0x366, 0x3d3, 0x6b9, 0x707, 0x7fe, 0x86b, 0x8ed, 0xa02, 0xa35, 0xab5, 0xda4, 0xf71, 0xfba);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_SizeOf, 0xeb, 0x184, 0x1d9, 0x241, 0x27c, 0x2e1, 0x34b, 0x357, 0x55b, 0x727, 0x7a7, 0x7c8, 0x816, 0x89c, 0xa0c, 0xa67, 0xaee, 0xb22, 0xc62, 0xe0c);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_SuperEqual, 0x55, 0xcc, 0x1bd, 0x30b, 0x31c, 0x361, 0x4a4, 0x522, 0x7b7, 0x7e1, 0x8c5, 0x93a, 0x9b0, 0x9c5, 0xa3d, 0xa45, 0xa69, 0xb72, 0xbdf, 0xd27, 0xd6a, 0xd8b, 0xdae, 0xdd1, 0xdd8, 0xe16, 0xed4, 0xf3b, 0xf4d, 0xff6);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_SuperNotEqual, 0x92, 0x13e, 0x1ce, 0x2a5, 0x359, 0x426, 0x61c, 0x725, 0xa99, 0xb18, 0xb5a, 0xd90);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Switch, 0x29, 0x2a, 0xa0, 0x2f6, 0x4b9, 0x7f5, 0x83b, 0x918, 0x9ad, 0x9cc, 0x9f7, 0xac6, 0xb38, 0xb92, 0xbf7, 0xc02, 0xe87, 0xee5, 0xf58, 0xf73);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown10e, 0x10e, 0x1d7, 0x3e9, 0x418, 0x557, 0x798, 0x7aa, 0x874, 0x977, 0xb29, 0xe0a, 0xe18);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown126, 0x126, 0x142, 0x169, 0x21c, 0x2b9, 0x417, 0x4ca, 0x52f, 0x60b, 0x6ef, 0x7be, 0x862, 0x893, 0x8da, 0x9dc, 0xa4e, 0xa7f, 0xaa3, 0xd68, 0xdd6, 0xe81, 0xeac, 0xf94);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown35, 0x35, 0x4a, 0x175, 0x1c8, 0x235, 0x2f8, 0x3e3, 0x4a0, 0x4f7, 0x552, 0x604, 0x7f0, 0x8c7, 0x91b, 0x930, 0xa26, 0xc04, 0xca1, 0xddc, 0xed9);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown38, 0x38, 0x6f, 0x72, 0xca, 0xda, 0x178, 0x269, 0x316, 0x409, 0x578, 0x642, 0x797, 0x79d, 0x7e6, 0x98e, 0x997, 0x99b, 0xb3e, 0xbb0, 0xbdd, 0xd94, 0xdb5, 0xddd, 0xe4e, 0xe58, 0xf4a);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknown9e, 0x9e, 0xe7, 0x1a5, 0x1b1, 0x1f8, 0x274, 0x287, 0x28d, 0x31a, 0x372, 0x3fa, 0x40b, 0x41e, 0x4f3, 0x6ad, 0x6b1, 0x6d7, 0x839, 0x988, 0xa74, 0xb66, 0xb82, 0xbc4, 0xc34, 0xc7d, 0xcbc, 0xd0e, 0xf18, 0xf8a, 0xfc1);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Unknownc7, 0xc7, 0x3a7, 0x50c, 0x567, 0x624, 0x67c, 0x708, 0x776, 0x778, 0x780, 0x842, 0x88a, 0x8bb, 0xa2b, 0xa7c, 0xae2, 0xae9, 0xba4, 0xbb5, 0xc43, 0xdaf, 0xdcf, 0xe46, 0xe54, 0xe6d, 0xeae, 0xeb5, 0xf99);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Vector, 0xf2, 0x112, 0x34e, 0x3fd, 0x6ed, 0x781, 0x7e9, 0x81d, 0x8a1, 0xa44, 0xb88, 0xd4a, 0xe7d, 0xf38, 0xf72);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_VectorConstant, 0xea, 0x105, 0x177, 0x415, 0x4c0, 0x8e9, 0x921, 0xa75, 0xae3, 0xb2d, 0xe9c, 0xef9);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_VectorScale, 0xe4, 0x1f3, 0x2e7, 0x344, 0x3a2, 0x4a1, 0x4bd, 0x513, 0x542, 0x55d, 0x747, 0x790, 0x869, 0x926, 0x9bb, 0xa15, 0xa7b, 0xb52, 0xd37, 0xe56, 0xefe);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_Wait, 0x54, 0x10c, 0x17d, 0x324, 0x3e6, 0x67d, 0x6ec, 0x809, 0x923, 0xc5b, 0xc64, 0xded, 0xe5a, 0xee9, 0xf49, 0xf5f, 0xfc0);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_WaitFrame, 0x20, 0xc5, 0x16d, 0x20f, 0x264, 0x280, 0x33a, 0x3b9, 0x4be, 0x4e4, 0x5a3, 0x716, 0x765, 0x898, 0x914, 0x96c, 0xa3e, 0xa92, 0xb13, 0xb90, 0xcac, 0xd14, 0xd8c, 0xfab, 0xfb1);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_WaitTill, 0x17, 0xc8, 0x167, 0x1ac, 0x568, 0x6d1, 0x80b, 0x9bc, 0xa6e, 0xc15, 0xf31);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_WaitTillFrameEnd, 0x8b, 0x11e, 0x285, 0x2ab, 0x2c1, 0x390, 0x3e0, 0x64d, 0x79f, 0x89a, 0x8a9, 0x8ab, 0x976, 0x9ff, 0xb65, 0xb6d, 0xb80, 0xbf0, 0xc2a, 0xc37, 0xc80, 0xddf, 0xe08);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_WaitTillMatch, 0x24, 0x47, 0x58, 0x70, 0xdd, 0x21f, 0x251, 0x296, 0x2d9, 0x391, 0x4b7, 0x503, 0x57d, 0x6a0, 0x7a2, 0x97d, 0x991, 0xa48, 0xb58, 0xb9d, 0xbf5, 0xcec, 0xd72, 0xd7c, 0xe47, 0xe93, 0xef5);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_WaitTillMatchTimeout, 0x1d, 0x81, 0x1f5, 0x283, 0x2a3, 0x3b8, 0x452, 0x58a, 0x60c, 0x643, 0x65e, 0x694, 0x811, 0x878, 0x8a4, 0x8ef, 0x8f8, 0xaa4, 0xc70, 0xccc, 0xcda, 0xd2d, 0xdb1, 0xeaa);
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_WaittillTimeout, 0xa9, 0xb7, 0x149, 0x189, 0x198, 0x293, 0x360, 0x3f8, 0x57b, 0x5f8, 0x703, 0x723, 0x7d8, 0x81b, 0x859, 0x8b8, 0x989, 0x9f8, 0xa79, 0xb59, 0xbaf, 0xbbd, 0xbe3, 0xd71, 0xdb6, 0xdf4, 0xeb2, 0xf8d);
		
			// T8-Compiler opcodes
			RegisterOpCode(VM_T8, PLATFORM_PC, OPCODE_T8C_GetLazyFunction, 0x16);

			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_ClearParams, 0xc);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_CheckClearParams, 0xd);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_PreScriptCall, 0xe);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_CallBuiltinFunction, 0xf);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_CallBuiltinMethod, 0x10);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_End, 0x11);
			// yolo
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x14, 0x15, 0x16, 0x17, 0x18, 0x1c, 0x1e, 0x22, 0x23, 0x27, 0x2b, 0x2e, 0x30, 0x33, 0x35, 0x37, 0x39, 0x3a, 0x3b, 0x3c, 0x40, 0x43, 0x45, 0x48, 0x4e);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x4f, 0x55, 0x56, 0x58, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x63, 0x69, 0x6b, 0x6d, 0x70, 0x71, 0x74, 0x75, 0x77, 0x78, 0x79, 0x7e, 0x81, 0x83, 0x84, 0x89);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x8b, 0x8c, 0x90, 0x96, 0x97, 0x98, 0x9a, 0x9b, 0xa4, 0xa6, 0xaa, 0xae, 0xb0, 0xb4, 0xb5, 0xb8, 0xbd, 0xbf, 0xc3, 0xc4, 0xc5, 0xc6, 0xca, 0xcb, 0xcf);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xd1, 0xd2, 0xd4, 0xd7, 0xd8, 0xdc, 0xe0, 0xe2, 0xe6, 0xeb, 0xec, 0xed, 0xf3, 0xf5, 0xf6, 0xf8, 0xfa, 0xfd, 0xfe, 0x102, 0x105, 0x107, 0x108, 0x10b);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x10e, 0x111, 0x114, 0x115, 0x116, 0x117, 0x119, 0x11a, 0x11d, 0x11e, 0x120, 0x122, 0x123, 0x12a, 0x12b, 0x12e, 0x12f, 0x131, 0x133, 0x134, 0x135);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x13a, 0x13f, 0x141, 0x142, 0x144, 0x147, 0x14e, 0x150, 0x151, 0x15c, 0x15d, 0x160, 0x162, 0x165, 0x171, 0x176, 0x178, 0x17f, 0x180, 0x184, 0x186, 0x188);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x189, 0x18a, 0x18b, 0x18c, 0x18e, 0x18f, 0x190, 0x193, 0x19c, 0x19f, 0x1a2, 0x1a3, 0x1a4, 0x1a5, 0x1a7, 0x1ac, 0x1ae, 0x1b1, 0x1b3, 0x1b5, 0x1b6, 0x1b7);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x1b8, 0x1b9, 0x1bf, 0x1c0, 0x1c2, 0x1c4, 0x1c5, 0x1c8, 0x1c9, 0x1ca, 0x1ce, 0x1d1, 0x1d6, 0x1d9, 0x1da, 0x1db, 0x1e0, 0x1e1, 0x1e2, 0x1e7, 0x1eb, 0x1ec);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x1ed, 0x1ee, 0x1f2, 0x1f8, 0x200, 0x202, 0x204, 0x206, 0x207, 0x208, 0x209, 0x20e, 0x214, 0x215, 0x218, 0x219, 0x21b, 0x21c, 0x223, 0x224, 0x228, 0x229);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x232, 0x233, 0x234, 0x235, 0x236, 0x237, 0x238, 0x239, 0x23b, 0x23c, 0x23e, 0x243, 0x244, 0x247, 0x248, 0x24a, 0x24d, 0x24e, 0x24f, 0x250, 0x251, 0x252);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x255, 0x257, 0x262, 0x266, 0x267, 0x26a, 0x26c, 0x26e, 0x26f, 0x271, 0x275, 0x276, 0x278, 0x27a, 0x282, 0x283, 0x286, 0x287, 0x289, 0x28d, 0x290, 0x292);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x293, 0x296, 0x299, 0x29b, 0x29c, 0x29d, 0x29f, 0x2a2, 0x2a4, 0x2a9, 0x2af, 0x2b0, 0x2b3, 0x2b4, 0x2b5, 0x2b7, 0x2ba, 0x2bb, 0x2c3, 0x2c4, 0x2c6, 0x2c7);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x2c9, 0x2cb, 0x2d1, 0x2d7, 0x2d8, 0x2d9, 0x2de, 0x2e7, 0x2eb, 0x2ef, 0x2f2, 0x2f3, 0x2f4, 0x2f5, 0x2f7, 0x2fa, 0x2fd, 0x2fe, 0x2ff, 0x300, 0x304, 0x305);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x306, 0x307, 0x308, 0x309, 0x30d, 0x30e, 0x310, 0x312, 0x313, 0x317, 0x31c, 0x31f, 0x322, 0x329, 0x32b, 0x32c, 0x32e, 0x335, 0x336, 0x338, 0x339, 0x341);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x342, 0x344, 0x345, 0x346, 0x349, 0x34b, 0x34c, 0x34d, 0x351, 0x355, 0x356, 0x357, 0x360, 0x366, 0x368, 0x36e, 0x36f, 0x373, 0x375, 0x37a, 0x37c, 0x37d);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x37f, 0x380, 0x383, 0x384, 0x386, 0x387, 0x38b, 0x38c, 0x38d, 0x391, 0x394, 0x396, 0x39a, 0x39b, 0x39c, 0x39e, 0x3a2, 0x3a8, 0x3ac, 0x3b2, 0x3b7, 0x3b8);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x3bf, 0x3c4, 0x3c8, 0x3cb, 0x3cd, 0x3cf, 0x3d2, 0x3d9, 0x3dc, 0x3e1, 0x3e5, 0x3e7, 0x3ee, 0x3ef, 0x3f2, 0x3f4, 0x3f5, 0x3f7, 0x3f8, 0x3fa, 0x3fb, 0x3fd);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x3ff, 0x403, 0x406, 0x40a, 0x40e, 0x410, 0x414, 0x415, 0x418, 0x41a, 0x41d, 0x41e, 0x423, 0x426, 0x429, 0x42a, 0x42b, 0x42c, 0x42e, 0x42f, 0x430, 0x431);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x432, 0x434, 0x436, 0x437, 0x438, 0x43a, 0x43e, 0x440, 0x443, 0x445, 0x448, 0x449, 0x44e, 0x454, 0x457, 0x458, 0x45b, 0x45f, 0x461, 0x462, 0x470, 0x471);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x474, 0x475, 0x478, 0x479, 0x47a, 0x47b, 0x47c, 0x47f, 0x480, 0x482, 0x483, 0x484, 0x485, 0x488, 0x48c, 0x48e, 0x490, 0x491, 0x496, 0x497, 0x49f, 0x4a1);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x4a3, 0x4a5, 0x4a7, 0x4a8, 0x4aa, 0x4ab, 0x4ac, 0x4af, 0x4b2, 0x4b3, 0x4b4, 0x4b9, 0x4ba, 0x4bc, 0x4be, 0x4c6, 0x4c8, 0x4d1, 0x4d2, 0x4d7, 0x4d8, 0x4dd);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x4de, 0x4e6, 0x4ea, 0x4eb, 0x4ec, 0x4ee, 0x4f1, 0x4f4, 0x4f7, 0x4f8, 0x4fa, 0x4fc, 0x503, 0x506, 0x507, 0x508, 0x50a, 0x50d, 0x50f, 0x513, 0x514, 0x516);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x517, 0x519, 0x51a, 0x51c, 0x51d, 0x520, 0x521, 0x526, 0x527, 0x52a, 0x535, 0x536, 0x537, 0x538, 0x53a, 0x53d, 0x541, 0x548, 0x54d, 0x54f, 0x551, 0x553);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x554, 0x555, 0x557, 0x55a, 0x55b, 0x55c, 0x55f, 0x563, 0x564, 0x567, 0x568, 0x56b, 0x56c, 0x56d, 0x573, 0x57f, 0x584, 0x585, 0x58a, 0x58b, 0x58c, 0x590);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x598, 0x599, 0x59a, 0x59c, 0x59d, 0x5a2, 0x5a4, 0x5ae, 0x5af, 0x5b0, 0x5b4, 0x5b6, 0x5b8, 0x5bb, 0x5bd, 0x5bf, 0x5c6, 0x5d0, 0x5d8, 0x5d9, 0x5da, 0x5df);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x5e1, 0x5e3, 0x5e5, 0x5e9, 0x5ea, 0x5eb, 0x5ef, 0x5f1, 0x5f7, 0x5f9, 0x5fb, 0x5fe, 0x5ff, 0x600, 0x602, 0x603, 0x606, 0x607, 0x60b, 0x60c, 0x610, 0x611);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x612, 0x622, 0x626, 0x627, 0x628, 0x62b, 0x62c, 0x62d, 0x62f, 0x632, 0x636, 0x637, 0x638, 0x63a, 0x63b, 0x63c, 0x63f, 0x641, 0x643, 0x644, 0x64a, 0x64b);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x64d, 0x650, 0x655, 0x659, 0x65a, 0x65c, 0x65d, 0x662, 0x664, 0x665, 0x666, 0x668, 0x66a, 0x66b, 0x66e, 0x66f, 0x674, 0x677, 0x679, 0x67e, 0x681, 0x682);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x684, 0x68e, 0x68f, 0x691, 0x695, 0x696, 0x698, 0x69a, 0x69b, 0x69f, 0x6a1, 0x6a9, 0x6ab, 0x6ac, 0x6ad, 0x6af, 0x6b0, 0x6b5, 0x6b7, 0x6be, 0x6c4, 0x6cb);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x6ce, 0x6cf, 0x6d3, 0x6d4, 0x6d6, 0x6d8, 0x6da, 0x6dc, 0x6de, 0x6df, 0x6e1, 0x6e3, 0x6e5, 0x6ec, 0x6ee, 0x6ef, 0x6f4, 0x6f6, 0x6f7, 0x6fa, 0x6fb, 0x6fc);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x6fd, 0x6ff, 0x700, 0x701, 0x702, 0x703, 0x704, 0x707, 0x708, 0x70a, 0x70b, 0x70c, 0x713, 0x715, 0x716, 0x717, 0x720, 0x721, 0x722, 0x725, 0x728, 0x72b);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x72e, 0x72f, 0x731, 0x735, 0x73a, 0x73c, 0x73e, 0x73f, 0x74b, 0x74c, 0x74e, 0x752, 0x755, 0x758, 0x75e, 0x761, 0x762, 0x764, 0x76c, 0x76e, 0x772, 0x777);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x778, 0x779, 0x782, 0x788, 0x78b, 0x78d, 0x78e, 0x791, 0x792, 0x794, 0x79d, 0x79f, 0x7a0, 0x7a8, 0x7ab, 0x7ae, 0x7af, 0x7b1, 0x7b5, 0x7b7, 0x7b8, 0x7b9);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x7ba, 0x7bd, 0x7c0, 0x7c3, 0x7c5, 0x7c9, 0x7ce, 0x7cf, 0x7d7, 0x7d9, 0x7db, 0x7e1, 0x7e3, 0x7e7, 0x7e9, 0x7ea, 0x7ec, 0x7ed, 0x7ee, 0x7f3, 0x7f4, 0x7f6);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x7f8, 0x7f9, 0x7fb, 0x7fd, 0x7fe, 0x800, 0x801, 0x803, 0x804, 0x80a, 0x80c, 0x80e, 0x80f, 0x810, 0x812, 0x81d, 0x820, 0x821, 0x825, 0x829, 0x82a, 0x82c);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x82f, 0x830, 0x831, 0x835, 0x836, 0x837, 0x83d, 0x841, 0x843, 0x848, 0x84c, 0x84d, 0x84f, 0x850, 0x858, 0x85a, 0x85e, 0x863, 0x864, 0x865, 0x867, 0x868);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x869, 0x86a, 0x86b, 0x86c, 0x870, 0x872, 0x873, 0x876, 0x87c, 0x87f, 0x880, 0x882, 0x883, 0x88b, 0x88e, 0x88f, 0x891, 0x897, 0x89a, 0x89b, 0x89d, 0x89e);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x89f, 0x8a3, 0x8a5, 0x8a7, 0x8a8, 0x8aa, 0x8ab, 0x8af, 0x8b0, 0x8b9, 0x8ba, 0x8bb, 0x8bd, 0x8be, 0x8c0, 0x8c3, 0x8c6, 0x8c9, 0x8ca, 0x8ce, 0x8d0, 0x8d2);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x8d5, 0x8d8, 0x8dd, 0x8e1, 0x8e6, 0x8ea, 0x8ee, 0x8f0, 0x8f4, 0x8f6, 0x8f9, 0x8ff, 0x904, 0x907, 0x90a, 0x90b, 0x90d, 0x912, 0x915, 0x916, 0x917, 0x91b);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x91c, 0x91e, 0x926, 0x927, 0x928, 0x929, 0x92a, 0x92b, 0x92d, 0x92e, 0x92f, 0x930, 0x932, 0x934, 0x936, 0x937, 0x939, 0x93a, 0x940, 0x941, 0x943, 0x947);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x949, 0x94d, 0x94e, 0x94f, 0x951, 0x956, 0x957, 0x95d, 0x963, 0x964, 0x968, 0x96a, 0x96c, 0x96d, 0x96f, 0x971, 0x978, 0x97d, 0x980, 0x981, 0x982, 0x983);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x984, 0x987, 0x988, 0x98b, 0x98d, 0x991, 0x993, 0x997, 0x99f, 0x9a7, 0x9a9, 0x9b0, 0x9b3, 0x9b5, 0x9b6, 0x9bc, 0x9bf, 0x9c0, 0x9c4, 0x9c8, 0x9c9, 0x9cd);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x9d3, 0x9df, 0x9e7, 0x9e8, 0x9ea, 0x9ec, 0x9fd, 0x9ff, 0xa00, 0xa02, 0xa03, 0xa0b, 0xa0e, 0xa10, 0xa12, 0xa13, 0xa14, 0xa17, 0xa1f, 0xa22, 0xa27, 0xa2c);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xa31, 0xa36, 0xa37, 0xa3d, 0xa42, 0xa43, 0xa47, 0xa4a, 0xa4b, 0xa4c, 0xa4f, 0xa52, 0xa53, 0xa57, 0xa59, 0xa5b, 0xa5f, 0xa65, 0xa67, 0xa69, 0xa6c, 0xa73);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xa76, 0xa77, 0xa78, 0xa7e, 0xa86, 0xa88, 0xa8b, 0xa8e, 0xa8f, 0xa91, 0xa93, 0xa95, 0xa96, 0xa98, 0xa9c, 0xa9e, 0xaa1, 0xaa2, 0xaa6, 0xaac, 0xab1, 0xab3);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xab5, 0xabb, 0xabc, 0xac2, 0xac4, 0xac5, 0xac6, 0xac7, 0xace, 0xacf, 0xad2, 0xad5, 0xad9, 0xadb, 0xadc, 0xadf, 0xae3, 0xaeb, 0xaef, 0xaf0, 0xaf2, 0xaf3);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xaf8, 0xafb, 0xafc, 0xafd, 0xb00, 0xb07, 0xb0b, 0xb0c, 0xb15, 0xb18, 0xb1b, 0xb1d, 0xb1f, 0xb20, 0xb21, 0xb28, 0xb29, 0xb2e, 0xb30, 0xb38, 0xb39, 0xb3d);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xb3f, 0xb40, 0xb42, 0xb43, 0xb44, 0xb45, 0xb47, 0xb4b, 0xb4d, 0xb50, 0xb52, 0xb54, 0xb58, 0xb5c, 0xb5e, 0xb61, 0xb64, 0xb68, 0xb6c, 0xb6f, 0xb75, 0xb76);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xb77, 0xb79, 0xb7b, 0xb7d, 0xb80, 0xb84, 0xb85, 0xb86, 0xb87, 0xb89, 0xb8a, 0xb8b, 0xb8c, 0xb8d, 0xb91, 0xb95, 0xb96, 0xb98, 0xb9a, 0xba2, 0xba3, 0xba5);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xba6, 0xba7, 0xba9, 0xbad, 0xbaf, 0xbb3, 0xbb4, 0xbb8, 0xbbc, 0xbbd, 0xbc0, 0xbc3, 0xbc4, 0xbc6, 0xbc7, 0xbca, 0xbcb, 0xbcf, 0xbd1, 0xbd8, 0xbd9, 0xbde);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xbe7, 0xbe9, 0xbea, 0xbeb, 0xbed, 0xbef, 0xbf0, 0xbf8, 0xbfe, 0xc00, 0xc02, 0xc0a, 0xc0d, 0xc0f, 0xc10, 0xc11, 0xc13, 0xc16, 0xc19, 0xc1c, 0xc1e, 0xc1f);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xc24, 0xc26, 0xc28, 0xc2a, 0xc2b, 0xc2c, 0xc2f, 0xc32, 0xc39, 0xc3c, 0xc3d, 0xc3e, 0xc40, 0xc44, 0xc45, 0xc4c, 0xc51, 0xc53, 0xc54, 0xc5a, 0xc5b, 0xc60);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xc63, 0xc64, 0xc66, 0xc6a, 0xc6c, 0xc6d, 0xc6e, 0xc70, 0xc72, 0xc75, 0xc7d, 0xc7e, 0xc80, 0xc84, 0xc87, 0xc8b, 0xc8c, 0xc8d, 0xc8e, 0xc8f, 0xc91, 0xc93);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xc98, 0xc9a, 0xc9b, 0xca1, 0xca6, 0xca9, 0xcae, 0xcaf, 0xcb0, 0xcb2, 0xcb3, 0xcb4, 0xcb5, 0xcb7, 0xcb8, 0xcbb, 0xcbd, 0xcbe, 0xcbf, 0xcc1, 0xcc6, 0xccc);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xccd, 0xcce, 0xcd0, 0xcd2, 0xcd5, 0xcd6, 0xcd7, 0xcd9, 0xcdd, 0xce1, 0xce5, 0xce6, 0xce7, 0xcea, 0xceb, 0xcf1, 0xcf3, 0xcf4, 0xcf5, 0xcf7, 0xcf9, 0xcfa);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xcfb, 0xcfc, 0xcfd, 0xd03, 0xd08, 0xd0a, 0xd0e, 0xd11, 0xd14, 0xd16, 0xd18, 0xd19, 0xd1c, 0xd1d, 0xd1f, 0xd21, 0xd22, 0xd23, 0xd2e, 0xd30, 0xd33, 0xd34);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xd35, 0xd36, 0xd3c, 0xd3d, 0xd3f, 0xd40, 0xd42, 0xd44, 0xd49, 0xd4a, 0xd4d, 0xd50, 0xd54, 0xd58, 0xd5a, 0xd5b, 0xd5e, 0xd61, 0xd62, 0xd64, 0xd6e, 0xd6f);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xd75, 0xd77, 0xd78, 0xd79, 0xd7a, 0xd87, 0xd8b, 0xd8e, 0xd8f, 0xd90, 0xd93, 0xd94, 0xd97, 0xd9d, 0xda4, 0xda6, 0xda7, 0xda8, 0xdac, 0xdad, 0xdae, 0xdaf);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xdb0, 0xdb3, 0xdb5, 0xdbc, 0xdc0, 0xdc7, 0xdca, 0xdcb, 0xdd1, 0xdd8, 0xdd9, 0xdda, 0xddc, 0xdde, 0xddf, 0xde0, 0xde2, 0xde3, 0xde4, 0xde6, 0xde8, 0xde9);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xdeb, 0xdf8, 0xdf9, 0xdfa, 0xdfb, 0xe08, 0xe0a, 0xe0e, 0xe10, 0xe15, 0xe16, 0xe19, 0xe1a, 0xe1c, 0xe1d, 0xe21, 0xe24, 0xe26, 0xe2a, 0xe2c, 0xe2d, 0xe2e);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xe2f, 0xe30, 0xe31, 0xe32, 0xe34, 0xe36, 0xe39, 0xe3b, 0xe3c, 0xe40, 0xe42, 0xe44, 0xe45, 0xe47, 0xe4a, 0xe4b, 0xe4f, 0xe50, 0xe51, 0xe53, 0xe61, 0xe62);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xe65, 0xe66, 0xe68, 0xe69, 0xe6a, 0xe6e, 0xe6f, 0xe70, 0xe73, 0xe74, 0xe76, 0xe7a, 0xe7d, 0xe7e, 0xe81, 0xe83, 0xe86, 0xe88, 0xe89, 0xe8c, 0xe8e, 0xe90);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xe94, 0xe95, 0xe97, 0xe99, 0xe9a, 0xe9d, 0xe9e, 0xea0, 0xea2, 0xea3, 0xea7, 0xea9, 0xeaa, 0xeab, 0xeac, 0xeb2, 0xebd, 0xec0, 0xec1, 0xec2, 0xec9, 0xed1);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xed3, 0xed5, 0xed7, 0xed8, 0xed9, 0xedf, 0xee4, 0xee5, 0xee6, 0xee7, 0xee8, 0xee9, 0xeea, 0xeeb, 0xeec, 0xeef, 0xef1, 0xef2, 0xef5, 0xefc, 0xefd, 0xefe);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xf03, 0xf07, 0xf08, 0xf0a, 0xf0b, 0xf0d, 0xf10, 0xf11, 0xf13, 0xf17, 0xf18, 0xf1d, 0xf22, 0xf23, 0xf26, 0xf29, 0xf2d, 0xf2e, 0xf2f, 0xf30, 0xf31, 0xf34);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xf35, 0xf3a, 0xf3b, 0xf3d, 0xf3e, 0xf43, 0xf48, 0xf50, 0xf58, 0xf5a, 0xf60, 0xf62, 0xf65, 0xf66, 0xf6e, 0xf6f, 0xf70, 0xf71, 0xf74, 0xf75, 0xf76, 0xf78);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xf7c, 0xf82, 0xf87, 0xf8a, 0xf8d, 0xf8f, 0xf90, 0xf91, 0xf93, 0xf95, 0xf97, 0xf9c, 0xf9e, 0xf9f, 0xfa1, 0xfa3, 0xfa5, 0xfa6, 0xfa9, 0xfac, 0xfad, 0xfaf);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xfb0, 0xfb1, 0xfb2, 0xfb3, 0xfb4, 0xfb6, 0xfb7, 0xfba, 0xfbd, 0xfc3, 0xfc6, 0xfc7, 0xfcb, 0xfcc, 0xfce, 0xfcf, 0xfd2, 0xfd3, 0xfd5, 0xfd7, 0xfd8, 0xfdd);
			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xfde, 0xfdf, 0xfe0, 0xfe1, 0xfe3, 0xfe6, 0xfe7, 0xfe8, 0xfeb, 0xff0, 0xff1, 0xff4, 0xff9, 0xffd);

			RegisterOpCode(VM_T8, PLATFORM_PLAYSTATION, OPCODE_T8C_GetLazyFunction, 0x16);

			RegisterVM(VM_T937, "Call of Duty: Black ops Cold War (37)", "t9", VmFlags::VMF_OPCODE_U16 | VmFlags::VMF_ALIGN | VmFlags::VMF_INV_ADD_TO_OBJECT | VmFlags::VMF_CLIENT_VM);
			SetMaxOpCode(VM_T937, 0xFFF);
			RegisterVMGlobalVariable(VM_T937, "level");
			RegisterVMGlobalVariable(VM_T937, "game");
			RegisterVMGlobalVariable(VM_T937, "classes");
			RegisterVMGlobalVariable(VM_T937, "mission");
			RegisterVMGlobalVariable(VM_T937, "anim");
			RegisterVMGlobalVariable(VM_T937, "world");
			RegisterVMGlobalVariable(VM_T937, "sharedstructs");
			RegisterVMGlobalVariable(VM_T937, "memory");
			RegisterVMOperatorFunction(VM_T937, "profilestart", "profilestart()", OPCODE_ProfileStart, VPFD_NONE, 0, 0);
			RegisterVMOperatorFunction(VM_T937, "profilestop", "profilestop()", OPCODE_ProfileStop, VPFD_NONE, 0, 0);
			RegisterVMOperatorFunction(VM_T937, "isdefined", "isdefined(object) -> bool", OPCODE_IsDefined, VPFD_RETURN_VALUE, 1, 1);
			RegisterVMOperatorFunction(VM_T937, "notify", "<caller> notify(event, param*)", OPCODE_Notify, VPFD_SELF_PARAM | VPFD_USE_PRE_SCRIPT_CALL, 1);
			RegisterVMOperatorFunction(VM_T937, "endon", "<caller> endon(event+)", OPCODE_EndOn, VPFD_SELF_PARAM | VPFD_USE_COUNT, 1);
			RegisterVMOperatorFunction(VM_T937, "endoncallback", "<caller> endoncallback(func, event+)", OPCODE_EndOnCallback, VPFD_SELF_PARAM | VPFD_USE_COUNT, 2);
			RegisterVMOperatorFunction(VM_T937, "endoncallbackparam", "<caller> endoncallback(func, param, event+)", OPCODE_T9_EndOnCallbackParam, VPFD_SELF_PARAM | VPFD_USE_COUNT, 3);
			RegisterVMOperatorFunction(VM_T937, "vectorscale", "vectorscale(vector, factor) -> vector", OPCODE_VectorScale, VPFD_RETURN_VALUE, 2, 2);
			RegisterVMOperatorFunction(VM_T937, "waittill", "<caller> waittill(event) -> struct", OPCODE_WaitTill, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 1);
			RegisterVMOperatorFunction(VM_T937, "waittillmatch", "<caller> waittillmatch(event, match) -> struct", OPCODE_WaitTillMatch, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 2);
			RegisterVMOperatorFunction(VM_T937, "waittillmatchtimeout", "<caller> waittillmatchtimeout(event, match, timeout) -> struct", OPCODE_WaitTillMatchTimeout, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 3);
			RegisterVMOperatorFunction(VM_T937, "waittilltimeout", "<caller> waittilltimeout(event, timeout) -> struct", OPCODE_WaittillTimeout, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 2);
			RegisterVMOperatorFunction(VM_T937, "wait", "wait(time)", OPCODE_Wait, VPFD_NONE, 1, 1);
			RegisterVMOperatorFunction(VM_T937, "waitframe", "waitframe(frames)", OPCODE_WaitFrame, VPFD_NONE, 1, 1);
			RegisterVMOperatorFunction(VM_T937, "waittillframeend", "waittillframeend()", OPCODE_WaitTillFrameEnd, VPFD_NONE, 0, 0);
			RegisterVMHashOPCode(VM_T937, '#', OPCODE_GetHash, 8, [](const char* str) { return hash::Hash64Pattern(str); });
			RegisterDevCall(VM_T937, "assert", "assertmsg", "errormsg", "throw", "println");

			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Unknown0, 0x0);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xa, 0xb, 0x13, 0x16, 0x19, 0x1a, 0x21, 0x24, 0x2a, 0x2c, 0x31, 0x33, 0x35, 0x38, 0x39, 0x3c, 0x3e, 0x41, 0x43, 0x4a);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x4b, 0x4c, 0x4d, 0x57, 0x59, 0x5b, 0x5c, 0x5d, 0x5e, 0x62, 0x63, 0x65, 0x66, 0x68, 0x6d, 0x6e, 0x73, 0x74, 0x75, 0x76, 0x77, 0x7b, 0x83, 0x86, 0x87, 0x8d);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x92, 0x93, 0x94, 0x9e, 0xa0, 0xb0, 0xb6, 0xba, 0xbf, 0xc1, 0xc3, 0xc8, 0xcd, 0xcf, 0xd0, 0xd1, 0xd4, 0xd8, 0xdb, 0xdc, 0xe1, 0xe3, 0xe4, 0xe6, 0xe7, 0xe8);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xe9, 0xea, 0xec, 0xf0, 0xfb, 0xfc, 0x107, 0x10c, 0x115, 0x116, 0x11b, 0x123, 0x126, 0x127, 0x12d, 0x131, 0x132, 0x138, 0x13c, 0x13e, 0x140, 0x141, 0x144);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x147, 0x14c, 0x14f, 0x151, 0x152, 0x155, 0x157, 0x15b, 0x163, 0x16b, 0x16f, 0x17f, 0x182, 0x185, 0x186, 0x18c, 0x18d, 0x18e, 0x194, 0x195, 0x19c, 0x19e);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x1a2, 0x1a5, 0x1a6, 0x1ab, 0x1ad, 0x1b5, 0x1b6, 0x1b8, 0x1bb, 0x1bc, 0x1be, 0x1c0, 0x1c4, 0x1c8, 0x1ca, 0x1cb, 0x1ce, 0x1d6, 0x1d9, 0x1df, 0x1e2, 0x1e7);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x1f0, 0x201, 0x204, 0x208, 0x20b, 0x20d, 0x210, 0x213, 0x214, 0x218, 0x21f, 0x225, 0x227, 0x22b, 0x22c, 0x230, 0x238, 0x23e, 0x23f, 0x240, 0x24a, 0x24c);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x24e, 0x24f, 0x250, 0x255, 0x256, 0x257, 0x263, 0x265, 0x272, 0x279, 0x283, 0x284, 0x285, 0x28a, 0x295, 0x29b, 0x2a0, 0x2a3, 0x2af, 0x2b0, 0x2b9, 0x2bb);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x2bf, 0x2c0, 0x2c1, 0x2c3, 0x2c6, 0x2c7, 0x2cc, 0x2d1, 0x2d6, 0x2e3, 0x2e4, 0x2e5, 0x2eb, 0x2ee, 0x2ef, 0x2f0, 0x2f2, 0x2f3, 0x2f9, 0x2fb, 0x2fc, 0x2fe);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x2ff, 0x301, 0x302, 0x303, 0x307, 0x30c, 0x315, 0x316, 0x317, 0x31b, 0x31f, 0x326, 0x32b, 0x32c, 0x32e, 0x332, 0x334, 0x335, 0x33a, 0x33f, 0x34c, 0x350);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x352, 0x353, 0x35d, 0x364, 0x369, 0x36a, 0x36b, 0x36c, 0x36d, 0x36e, 0x371, 0x374, 0x375, 0x37a, 0x37c, 0x381, 0x386, 0x38a, 0x390, 0x391, 0x396, 0x398);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x39a, 0x39f, 0x3a1, 0x3a7, 0x3ae, 0x3af, 0x3b4, 0x3b5, 0x3b6, 0x3b9, 0x3bf, 0x3c0, 0x3c1, 0x3c5, 0x3c6, 0x3ca, 0x3d0, 0x3d2, 0x3d5, 0x3d8, 0x3e0, 0x3e1);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x3e2, 0x3e4, 0x3e5, 0x3ea, 0x3ed, 0x3f2, 0x3f6, 0x3f9, 0x3fa, 0x3fb, 0x3fd, 0x3fe, 0x408, 0x40b, 0x40c, 0x40e, 0x411, 0x415, 0x418, 0x41b, 0x41f, 0x420);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x421, 0x423, 0x424, 0x425, 0x426, 0x431, 0x432, 0x435, 0x437, 0x438, 0x43c, 0x444, 0x44a, 0x452, 0x45b, 0x45e, 0x46e, 0x46f, 0x470, 0x475, 0x47a, 0x47b);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x47c, 0x47e, 0x47f, 0x480, 0x484, 0x488, 0x48e, 0x498, 0x49c, 0x49d, 0x49e, 0x4a0, 0x4ab, 0x4b0, 0x4b4, 0x4bc, 0x4bd, 0x4be, 0x4c0, 0x4c5, 0x4c9, 0x4ca);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x4cd, 0x4d1, 0x4d2, 0x4d4, 0x4d8, 0x4e1, 0x4ed, 0x4f2, 0x4f5, 0x4f9, 0x4fc, 0x4fd, 0x500, 0x504, 0x506, 0x509, 0x50a, 0x50b, 0x50d, 0x50f, 0x514, 0x516);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x51d, 0x51f, 0x528, 0x52d, 0x52e, 0x530, 0x532, 0x537, 0x53a, 0x53e, 0x541, 0x543, 0x544, 0x545, 0x54a, 0x554, 0x55f, 0x560, 0x566, 0x567, 0x569, 0x571);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x574, 0x575, 0x57b, 0x57d, 0x583, 0x584, 0x586, 0x58c, 0x590, 0x592, 0x597, 0x598, 0x59b, 0x59e, 0x5a0, 0x5a1, 0x5a2, 0x5a9, 0x5ac, 0x5b8, 0x5bd, 0x5c0);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x5c1, 0x5c2, 0x5c5, 0x5cd, 0x5d1, 0x5d3, 0x5d6, 0x5d9, 0x5e1, 0x5e5, 0x5ea, 0x5eb, 0x5ec, 0x5ed, 0x5f2, 0x5f3, 0x5f6, 0x5f7, 0x5fc, 0x5fe, 0x606, 0x608);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x60a, 0x60f, 0x614, 0x616, 0x617, 0x61d, 0x61f, 0x622, 0x625, 0x628, 0x62b, 0x62d, 0x62e, 0x638, 0x63a, 0x63b, 0x63c, 0x63e, 0x640, 0x643, 0x646, 0x648);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x654, 0x658, 0x65a, 0x65b, 0x65f, 0x661, 0x665, 0x667, 0x66c, 0x66e, 0x671, 0x672, 0x67a, 0x67b, 0x67c, 0x67e, 0x681, 0x684, 0x687, 0x689, 0x694, 0x69a);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x69d, 0x6a5, 0x6a6, 0x6a9, 0x6aa, 0x6ab, 0x6ae, 0x6b9, 0x6ba, 0x6bb, 0x6bc, 0x6bd, 0x6c7, 0x6cd, 0x6d1, 0x6d2, 0x6d3, 0x6d4, 0x6d7, 0x6d9, 0x6db, 0x6dd);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x6e4, 0x6e6, 0x6e7, 0x6e8, 0x6eb, 0x6ee, 0x6f0, 0x6f1, 0x6f7, 0x6fe, 0x700, 0x704, 0x712, 0x713, 0x714, 0x715, 0x717, 0x718, 0x71c, 0x723, 0x727, 0x72a);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x72f, 0x734, 0x736, 0x739, 0x73a, 0x73c, 0x73d, 0x744, 0x745, 0x748, 0x749, 0x74c, 0x75b, 0x75e, 0x75f, 0x760, 0x761, 0x765, 0x76a, 0x76b, 0x76f, 0x774);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x776, 0x777, 0x778, 0x77a, 0x77c, 0x784, 0x785, 0x78c, 0x78d, 0x78f, 0x790, 0x791, 0x795, 0x797, 0x798, 0x79a, 0x79f, 0x7a5, 0x7a6, 0x7aa, 0x7b2, 0x7b5);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x7b8, 0x7ba, 0x7bd, 0x7c1, 0x7c6, 0x7ca, 0x7cf, 0x7d1, 0x7d5, 0x7d6, 0x7d7, 0x7d8, 0x7d9, 0x7db, 0x7dc, 0x7e0, 0x7e1, 0x7e6, 0x7e9, 0x7ea, 0x7ee, 0x7f0);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x7f4, 0x7f5, 0x7f7, 0x7fc, 0x801, 0x802, 0x804, 0x809, 0x80a, 0x80c, 0x811, 0x81a, 0x81c, 0x81d, 0x81e, 0x820, 0x822, 0x823, 0x825, 0x827, 0x82b, 0x82c);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x82f, 0x831, 0x834, 0x83c, 0x83f, 0x840, 0x842, 0x846, 0x847, 0x84c, 0x84f, 0x85b, 0x85f, 0x862, 0x863, 0x871, 0x872, 0x873, 0x87f, 0x886, 0x889, 0x88d);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x88e, 0x88f, 0x893, 0x897, 0x898, 0x89e, 0x89f, 0x8a0, 0x8a2, 0x8a5, 0x8a8, 0x8a9, 0x8ac, 0x8b4, 0x8b6, 0x8bb, 0x8c0, 0x8c2, 0x8c4, 0x8c7, 0x8ca, 0x8cb);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x8ce, 0x8d0, 0x8d1, 0x8d9, 0x8db, 0x8de, 0x8e8, 0x8ef, 0x8f2, 0x8f3, 0x8f5, 0x8f6, 0x8fc, 0x90a, 0x90b, 0x913, 0x914, 0x916, 0x91c, 0x91f, 0x922, 0x924);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x928, 0x929, 0x92a, 0x92c, 0x930, 0x934, 0x935, 0x938, 0x93a, 0x93f, 0x948, 0x94a, 0x94f, 0x952, 0x958, 0x960, 0x968, 0x96a, 0x96b, 0x96c, 0x96d, 0x970);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x971, 0x973, 0x974, 0x97d, 0x980, 0x985, 0x98a, 0x98d, 0x994, 0x998, 0x999, 0x9a4, 0x9a7, 0x9aa, 0x9ab, 0x9ae, 0x9b1, 0x9b2, 0x9b6, 0x9ba, 0x9be, 0x9c0);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x9c4, 0x9c5, 0x9c7, 0x9c9, 0x9cb, 0x9cc, 0x9ce, 0x9d3, 0x9e4, 0x9ed, 0x9f6, 0x9f7, 0x9f9, 0x9fb, 0x9fc, 0xa00, 0xa01, 0xa03, 0xa05, 0xa0a, 0xa0e, 0xa19);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xa1a, 0xa1e, 0xa1f, 0xa21, 0xa24, 0xa27, 0xa2b, 0xa2e, 0xa39, 0xa3a, 0xa41, 0xa43, 0xa44, 0xa45, 0xa46, 0xa48, 0xa4c, 0xa51, 0xa58, 0xa5a, 0xa5c, 0xa5d);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xa61, 0xa63, 0xa6a, 0xa6b, 0xa70, 0xa72, 0xa74, 0xa75, 0xa7a, 0xa7e, 0xa81, 0xa87, 0xa8d, 0xa91, 0xa94, 0xa98, 0xa9c, 0xa9d, 0xaa4, 0xaaa, 0xaab, 0xaad);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xaaf, 0xab5, 0xaba, 0xabb, 0xabe, 0xabf, 0xac2, 0xac7, 0xac9, 0xaca, 0xacc, 0xad2, 0xad3, 0xad7, 0xad9, 0xada, 0xade, 0xadf, 0xae0, 0xae9, 0xaea, 0xaed);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xaee, 0xaf8, 0xaf9, 0xafa, 0xb01, 0xb06, 0xb07, 0xb10, 0xb16, 0xb20, 0xb22, 0xb25, 0xb27, 0xb2e, 0xb31, 0xb32, 0xb35, 0xb36, 0xb38, 0xb39, 0xb3d, 0xb3e);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xb3f, 0xb40, 0xb43, 0xb45, 0xb49, 0xb50, 0xb5b, 0xb63, 0xb6a, 0xb6b, 0xb74, 0xb75, 0xb7d, 0xb85, 0xb87, 0xb89, 0xb8c, 0xb92, 0xb99, 0xb9c, 0xba0, 0xbaf);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xbb1, 0xbb4, 0xbb5, 0xbb8, 0xbb9, 0xbbb, 0xbbf, 0xbca, 0xbcb, 0xbcc, 0xbd1, 0xbd6, 0xbd8, 0xbd9, 0xbdb, 0xbdc, 0xbdd, 0xbe0, 0xbe8, 0xbe9, 0xbf0, 0xbf2);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xbfa, 0xc03, 0xc06, 0xc08, 0xc0f, 0xc12, 0xc17, 0xc18, 0xc1c, 0xc24, 0xc26, 0xc27, 0xc28, 0xc2a, 0xc2b, 0xc2c, 0xc2f, 0xc33, 0xc34, 0xc37, 0xc39, 0xc3c);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xc43, 0xc44, 0xc46, 0xc49, 0xc4b, 0xc53, 0xc55, 0xc56, 0xc59, 0xc5c, 0xc69, 0xc6c, 0xc72, 0xc73, 0xc74, 0xc76, 0xc77, 0xc81, 0xc85, 0xc86, 0xc89, 0xc8a);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xc8c, 0xc8e, 0xc94, 0xc95, 0xc96, 0xc98, 0xc9e, 0xca7, 0xcab, 0xcb0, 0xcb4, 0xcb6, 0xcb8, 0xcb9, 0xcbb, 0xcbc, 0xcbe, 0xcc0, 0xcc1, 0xcc6, 0xcd8, 0xcda);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xcdb, 0xcea, 0xceb, 0xced, 0xcee, 0xcef, 0xcf4, 0xcf7, 0xcf8, 0xcff, 0xd04, 0xd05, 0xd11, 0xd19, 0xd1a, 0xd23, 0xd27, 0xd2b, 0xd2c, 0xd2f, 0xd35, 0xd36);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xd37, 0xd3b, 0xd3c, 0xd3e, 0xd43, 0xd4a, 0xd4d, 0xd4f, 0xd54, 0xd59, 0xd5b, 0xd5d, 0xd5f, 0xd60, 0xd61, 0xd68, 0xd69, 0xd6e, 0xd6f, 0xd71, 0xd74, 0xd79);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xd7f, 0xd87, 0xd88, 0xd89, 0xd8c, 0xd90, 0xd95, 0xd96, 0xd9f, 0xda0, 0xda4, 0xda5, 0xdab, 0xdad, 0xdae, 0xdb0, 0xdbe, 0xdc4, 0xdc5, 0xdc7, 0xdd2, 0xdd3);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xdd4, 0xdd9, 0xdde, 0xde3, 0xde4, 0xde8, 0xdea, 0xdec, 0xdf4, 0xdfa, 0xdfc, 0xdff, 0xe04, 0xe06, 0xe08, 0xe09, 0xe0a, 0xe14, 0xe17, 0xe19, 0xe21, 0xe26);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xe27, 0xe2f, 0xe32, 0xe33, 0xe34, 0xe35, 0xe36, 0xe39, 0xe3a, 0xe42, 0xe43, 0xe45, 0xe48, 0xe4d, 0xe4e, 0xe50, 0xe52, 0xe58, 0xe5c, 0xe5d, 0xe60, 0xe62);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xe63, 0xe65, 0xe67, 0xe68, 0xe6b, 0xe71, 0xe7b, 0xe7d, 0xe81, 0xe8d, 0xe94, 0xe98, 0xe9d, 0xea4, 0xea7, 0xeb1, 0xeb3, 0xeb4, 0xeb7, 0xeb9, 0xebc, 0xebe);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xec0, 0xec4, 0xec8, 0xed0, 0xed2, 0xed4, 0xed6, 0xed7, 0xed9, 0xedc, 0xee3, 0xee8, 0xee9, 0xeea, 0xeec, 0xeed, 0xeee, 0xef1, 0xef3, 0xef6, 0xefd, 0xf03);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xf04, 0xf05, 0xf09, 0xf0e, 0xf12, 0xf13, 0xf1e, 0xf1f, 0xf23, 0xf25, 0xf28, 0xf2b, 0xf2f, 0xf35, 0xf3d, 0xf3e, 0xf40, 0xf41, 0xf42, 0xf43, 0xf44, 0xf48);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xf52, 0xf57, 0xf58, 0xf5a, 0xf5e, 0xf5f, 0xf63, 0xf67, 0xf69, 0xf6c, 0xf6f, 0xf70, 0xf72, 0xf7f, 0xf87, 0xf89, 0xf8a, 0xf99, 0xf9a, 0xf9c, 0xf9f, 0xfa0);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xfa1, 0xfa6, 0xfa8, 0xfaa, 0xfb0, 0xfb1, 0xfb2, 0xfb3, 0xfb6, 0xfb7, 0xfc0, 0xfc1, 0xfc3, 0xfc9, 0xfca, 0xfcd, 0xfcf, 0xfd0, 0xfd1, 0xfd2, 0xfd5, 0xfd9);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xfde, 0xfe1, 0xfec, 0xff5, 0xff8, 0xffb, 0xffd);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_EvalLocalVariableCachedDebug, 0x8);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_EvalLocalVariableRefCachedDebug, 0x9);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_ClearParams, 0xc);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_CheckClearParams, 0xd);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_PreScriptCall, 0xe);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_CallBuiltinFunction, 0xf);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_CallBuiltinMethod, 0x10);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_End, 0x11);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_ScriptFunctionCall, 0x12, 0x25, 0xaa, 0xdd, 0x135, 0x143, 0x1f2, 0x26a, 0x320, 0x37d, 0x4a6, 0x4b8, 0x54c, 0x663, 0x673, 0x679, 0x6c6, 0x813, 0x90d, 0x979, 0x9a3, 0xa6e, 0xacb, 0xb8a, 0xc45, 0xc65, 0xc93, 0xe38, 0xe9b);
			RegisterOpCode(VM_T937, PLATFORM_PLAYSTATION, OPCODE_SafeCreateLocalVariables, 0x11a, 0x192, 0x1e5, 0x281, 0x289, 0x2bd, 0x30b, 0x363, 0x471, 0x494, 0x4a8, 0x538, 0x5e3, 0x653, 0x8e4, 0x921, 0x9bf, 0x9fa, 0xb54, 0xc6d, 0xd28, 0xe8a, 0xf07);

			RegisterVMPlatform(VM_T937, PLATFORM_PC);

			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Unknown0, 0x0);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Unknown1, 0x1);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Unknown2, 0x2);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Unknown3, 0x3);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Unknown4, 0x4);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Unknown5, 0x5);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Unknown6, 0x6);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Unknown7, 0x7);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_EvalLocalVariableCachedDebug, 0x8);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_EvalLocalVariableRefCachedDebug, 0x9);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Unknowna, 0xa);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Unknownb, 0xb);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_ClearParams, 0xc);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_CheckClearParams, 0xd);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_PreScriptCall, 0xe);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_CallBuiltinFunction, 0xf);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_CallBuiltinMethod, 0x10);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_End, 0x11);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0x1a, 0x1f, 0x23, 0x28, 0x2d, 0x31, 0x39, 0x3a, 0x3b, 0x3e, 0x3f, 0x42, 0x46, 0x48, 0x4b, 0x53, 0x57, 0x5a, 0x5b, 0x60, 0x61, 0x62, 0x68, 0x69, 0x6c, 0x6e, 0x6f, 0x70, 0x71, 0x73, 0x76, 0x77, 0x78, 0x80, 0x83, 0x85, 0x86, 0x89, 0x8b, 0x8f, 0x91, 0xa2, 0xa7, 0xa8, 0xab, 0xad, 0xb0, 0xb4, 0xb8, 0xbb, 0xbc, 0xc1, 0xc5, 0xce, 0xd3, 0xd6, 0xd7, 0xd9, 0xdd, 0xe1, 0xe2, 0xe8, 0xf1, 0xf3, 0xf5, 0xf7, 0xfa, 0xfc, 0xfe, 0xff, 0x103, 0x108, 0x10a, 0x10c, 0x10d, 0x10f, 0x111, 0x112, 0x119, 0x11c, 0x11d, 0x123, 0x126, 0x128, 0x130, 0x133, 0x134, 0x139, 0x141, 0x142, 0x143, 0x145, 0x146);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0x148, 0x149, 0x14f, 0x154, 0x156, 0x159, 0x15c, 0x160, 0x167, 0x169, 0x16a, 0x16b, 0x16f, 0x171, 0x173, 0x174, 0x17a, 0x17f, 0x182, 0x184, 0x188, 0x18a, 0x18b, 0x18e, 0x18f, 0x190, 0x191, 0x193, 0x196, 0x197, 0x198, 0x19a, 0x19b, 0x19e, 0x1a6, 0x1a7, 0x1a8, 0x1b0, 0x1b1, 0x1b3, 0x1b4, 0x1b8, 0x1b9, 0x1ba, 0x1bd, 0x1be, 0x1c4, 0x1c6, 0x1c7, 0x1c9, 0x1ca, 0x1cd, 0x1cf, 0x1d2, 0x1d3, 0x1d5, 0x1d7, 0x1d9, 0x1e3, 0x1e4, 0x1e6, 0x1eb, 0x1ec, 0x1ed, 0x1f8, 0x1fa, 0x1fb, 0x1fc, 0x206, 0x209, 0x20e, 0x20f, 0x213, 0x216, 0x218, 0x21b, 0x221, 0x224, 0x22c, 0x22e, 0x230, 0x231, 0x232);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0x234, 0x238, 0x23b, 0x241, 0x24a, 0x24c, 0x250, 0x252, 0x254, 0x259, 0x25d, 0x25f, 0x260, 0x262, 0x264, 0x266, 0x26e, 0x271, 0x272, 0x27d, 0x27e, 0x280, 0x282, 0x285, 0x286, 0x287, 0x288, 0x289, 0x299, 0x29b, 0x29d, 0x29f, 0x2a3, 0x2a4, 0x2a7, 0x2a9, 0x2aa, 0x2ae, 0x2b2, 0x2b5, 0x2b6, 0x2ba, 0x2bd, 0x2c4, 0x2c5, 0x2c6, 0x2cd, 0x2d3, 0x2d5, 0x2d6, 0x2d8, 0x2db, 0x2e0, 0x2e4, 0x2e5, 0x2e8, 0x2ef, 0x2f0, 0x2f2, 0x2f5, 0x2fd, 0x302, 0x305, 0x30a, 0x317, 0x31b, 0x31f, 0x321, 0x322, 0x323, 0x326, 0x327, 0x328, 0x329, 0x32d, 0x32f, 0x332, 0x335, 0x33c, 0x33e, 0x341, 0x342, 0x349);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0x34a, 0x34e, 0x34f, 0x351, 0x353, 0x35a, 0x35c, 0x35d, 0x360, 0x367, 0x36b, 0x373, 0x374, 0x379, 0x37b, 0x38d, 0x38e, 0x390, 0x393, 0x398, 0x399, 0x39f, 0x3a3, 0x3a6, 0x3a7, 0x3ad, 0x3b4, 0x3b7, 0x3bb, 0x3bc, 0x3c0, 0x3c1, 0x3c6, 0x3ca, 0x3cb, 0x3cf, 0x3d0, 0x3d1, 0x3d5, 0x3dc, 0x3dd, 0x3e1, 0x3e4, 0x3e8, 0x3e9, 0x3eb, 0x3f0, 0x3f2, 0x3f9, 0x3fb, 0x400, 0x401, 0x402, 0x403, 0x407, 0x409, 0x40a, 0x40b, 0x40d, 0x411, 0x416, 0x418, 0x41a, 0x41b, 0x41e, 0x420, 0x421, 0x422, 0x425, 0x426, 0x42a, 0x42c, 0x42d, 0x42e, 0x431, 0x432, 0x436, 0x43b, 0x446, 0x44b, 0x44e, 0x453, 0x457);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0x45a, 0x45d, 0x45f, 0x462, 0x463, 0x464, 0x465, 0x46b, 0x46d, 0x46f, 0x471, 0x472, 0x473, 0x474, 0x479, 0x47a, 0x47d, 0x47f, 0x480, 0x486, 0x487, 0x488, 0x489, 0x48d, 0x491, 0x493, 0x495, 0x499, 0x49a, 0x49c, 0x49e, 0x4a0, 0x4a4, 0x4a7, 0x4ac, 0x4ad, 0x4ae, 0x4c1, 0x4c7, 0x4c8, 0x4ce, 0x4d3, 0x4d6, 0x4d8, 0x4d9, 0x4db, 0x4de, 0x4df, 0x4e0, 0x4e1, 0x4e4, 0x4e9, 0x4eb, 0x4f0, 0x4f6, 0x4f7, 0x4fa, 0x4fe, 0x50b, 0x50c, 0x50d, 0x50e, 0x50f, 0x518, 0x51d, 0x51f, 0x520, 0x522, 0x529, 0x530, 0x531, 0x532, 0x535, 0x537, 0x538, 0x53c, 0x541, 0x543, 0x545, 0x549, 0x54e, 0x556, 0x55a);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0x561, 0x562, 0x567, 0x56b, 0x575, 0x576, 0x578, 0x57a, 0x58a, 0x58d, 0x58e, 0x58f, 0x595, 0x596, 0x59b, 0x5a1, 0x5a5, 0x5ac, 0x5b3, 0x5b4, 0x5b9, 0x5bb, 0x5bd, 0x5bf, 0x5c0, 0x5c1, 0x5c2, 0x5c3, 0x5c5, 0x5c6, 0x5c7, 0x5cb, 0x5ce, 0x5cf, 0x5d1, 0x5d8, 0x5da, 0x5e1, 0x5e2, 0x5e4, 0x5e9, 0x5ea, 0x5ed, 0x5ee, 0x5ef, 0x5f0, 0x5f3, 0x5f4, 0x5f7, 0x5f8, 0x5fc, 0x5fd, 0x600, 0x604, 0x605, 0x608, 0x60a, 0x60d, 0x60e, 0x610, 0x613, 0x618, 0x619, 0x61a, 0x61c, 0x620, 0x621, 0x627, 0x62b, 0x62c, 0x631, 0x632, 0x636, 0x63b, 0x63c, 0x63f, 0x642, 0x646, 0x647, 0x64a, 0x64d, 0x651, 0x652);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0x658, 0x659, 0x65c, 0x65d, 0x660, 0x663, 0x666, 0x669, 0x66e, 0x66f, 0x673, 0x677, 0x678, 0x679, 0x67b, 0x67f, 0x681, 0x682, 0x685, 0x689, 0x68a, 0x68e, 0x691, 0x698, 0x69b, 0x6a1, 0x6a3, 0x6a4, 0x6a6, 0x6a8, 0x6a9, 0x6aa, 0x6ab, 0x6b0, 0x6b5, 0x6be, 0x6c1, 0x6c3, 0x6c9, 0x6cb, 0x6cc, 0x6cf, 0x6d0, 0x6d1, 0x6d4, 0x6d5, 0x6d6, 0x6e2, 0x6e4, 0x6e6, 0x6e7, 0x6e8, 0x6eb, 0x6f2, 0x6f4, 0x6f7, 0x6f9, 0x6fb, 0x6fe, 0x6ff, 0x704, 0x707, 0x708, 0x70a, 0x70d, 0x710, 0x714, 0x719, 0x71c, 0x722, 0x723, 0x72c, 0x72e, 0x732, 0x735, 0x736, 0x737, 0x739, 0x73c, 0x73f, 0x740, 0x744, 0x749);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0x74a, 0x74d, 0x74f, 0x751, 0x752, 0x753, 0x757, 0x758, 0x75a, 0x75d, 0x75e, 0x75f, 0x761, 0x763, 0x768, 0x76c, 0x76f, 0x770, 0x771, 0x772, 0x773, 0x777, 0x78e, 0x78f, 0x791, 0x792, 0x798, 0x799, 0x79c, 0x79d, 0x79f, 0x7a0, 0x7a5, 0x7a6, 0x7a7, 0x7a8, 0x7ae, 0x7b1, 0x7b2, 0x7b3, 0x7b4, 0x7b6, 0x7b7, 0x7ba, 0x7bd, 0x7c0, 0x7c3, 0x7c5, 0x7c7, 0x7c8, 0x7cb, 0x7cd, 0x7cf, 0x7d0, 0x7d1, 0x7d2, 0x7d4, 0x7d7, 0x7da, 0x7db, 0x7dd, 0x7e0, 0x7e1, 0x7e3, 0x7ef, 0x7f2, 0x7f8, 0x7f9, 0x7ff, 0x806, 0x807, 0x809, 0x80b, 0x811, 0x813, 0x814, 0x816, 0x818, 0x81a, 0x821, 0x822, 0x82b, 0x833);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0x839, 0x83a, 0x83d, 0x83f, 0x842, 0x843, 0x846, 0x847, 0x84c, 0x84f, 0x853, 0x855, 0x85a, 0x85c, 0x860, 0x861, 0x863, 0x864, 0x865, 0x866, 0x867, 0x868, 0x86e, 0x871, 0x876, 0x877, 0x880, 0x882, 0x883, 0x886, 0x887, 0x88b, 0x88c, 0x88d, 0x88e, 0x88f, 0x890, 0x892, 0x894, 0x899, 0x89f, 0x8a7, 0x8a8, 0x8a9, 0x8ab, 0x8ad, 0x8ae, 0x8b1, 0x8b4, 0x8b7, 0x8b8, 0x8b9, 0x8bc, 0x8c0, 0x8c1, 0x8c4, 0x8c7, 0x8cd, 0x8d0, 0x8d2, 0x8d3, 0x8dc, 0x8de, 0x8e1, 0x8e2, 0x8e3, 0x8e6, 0x8e7, 0x8eb, 0x8ed, 0x8ee, 0x8f8, 0x8f9, 0x8fc, 0x8fd, 0x8fe, 0x900, 0x909, 0x911, 0x912, 0x914, 0x917, 0x918);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0x91a, 0x91c, 0x91f, 0x923, 0x926, 0x929, 0x92a, 0x92b, 0x92c, 0x936, 0x938, 0x93d, 0x93f, 0x942, 0x944, 0x947, 0x94b, 0x94d, 0x950, 0x954, 0x955, 0x95b, 0x95d, 0x962, 0x965, 0x968, 0x969, 0x96a, 0x96b, 0x96e, 0x972, 0x976, 0x978, 0x97b, 0x981, 0x982, 0x983, 0x989, 0x98a, 0x98d, 0x98e, 0x991, 0x994, 0x996, 0x998, 0x999, 0x99f, 0x9a2, 0x9a3, 0x9a4, 0x9aa, 0x9ac, 0x9b0, 0x9b6, 0x9b8, 0x9b9, 0x9bb, 0x9bd, 0x9c0, 0x9c2, 0x9c3, 0x9c9, 0x9ca, 0x9ce, 0x9d7, 0x9d8, 0x9d9, 0x9db, 0x9dd, 0x9de, 0x9df, 0x9e0, 0x9e1, 0x9e4, 0x9ea, 0x9ec, 0x9ed, 0x9f1, 0x9f5, 0x9f6, 0x9fb, 0x9fc, 0xa01);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0xa0b, 0xa0d, 0xa0f, 0xa12, 0xa13, 0xa14, 0xa17, 0xa21, 0xa24, 0xa29, 0xa2b, 0xa2d, 0xa33, 0xa38, 0xa39, 0xa3a, 0xa41, 0xa46, 0xa48, 0xa4a, 0xa4b, 0xa4e, 0xa4f, 0xa57, 0xa58, 0xa5a, 0xa5c, 0xa5d, 0xa5f, 0xa60, 0xa61, 0xa63, 0xa64, 0xa65, 0xa67, 0xa6a, 0xa71, 0xa74, 0xa77, 0xa7c, 0xa7d, 0xa7e, 0xa80, 0xa8f, 0xa91, 0xa93, 0xa94, 0xa97, 0xa9e, 0xaa2, 0xaaa, 0xaae, 0xaaf, 0xab1, 0xab2, 0xab4, 0xab5, 0xabc, 0xac1, 0xac3, 0xac4, 0xac7, 0xac9, 0xace, 0xacf, 0xad1, 0xad3, 0xad4, 0xad6, 0xad7, 0xad8, 0xade, 0xae1, 0xae3, 0xae7, 0xae8, 0xaf5, 0xaf6, 0xaf8, 0xaff, 0xb07, 0xb09, 0xb0f);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0xb12, 0xb14, 0xb16, 0xb1a, 0xb1e, 0xb1f, 0xb20, 0xb22, 0xb25, 0xb26, 0xb2a, 0xb2b, 0xb2d, 0xb2f, 0xb31, 0xb32, 0xb33, 0xb36, 0xb43, 0xb44, 0xb48, 0xb4a, 0xb4c, 0xb50, 0xb52, 0xb54, 0xb57, 0xb5e, 0xb64, 0xb68, 0xb70, 0xb71, 0xb72, 0xb73, 0xb77, 0xb7a, 0xb7b, 0xb7c, 0xb7e, 0xb80, 0xb83, 0xb84, 0xb88, 0xb89, 0xb8b, 0xb8d, 0xb8e, 0xb8f, 0xb91, 0xb95, 0xb97, 0xb9a, 0xb9b, 0xb9e, 0xb9f, 0xba7, 0xba9, 0xbaa, 0xbad, 0xbae, 0xbb5, 0xbb7, 0xbbb, 0xbbc, 0xbbd, 0xbc3, 0xbc6, 0xbcc, 0xbcd, 0xbcf, 0xbd4, 0xbd5, 0xbd8, 0xbd9, 0xbdf, 0xbe1, 0xbe3, 0xbf5, 0xbfa, 0xbfb, 0xbfc, 0xbfe, 0xbff);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0xc0a, 0xc10, 0xc12, 0xc14, 0xc15, 0xc17, 0xc1b, 0xc20, 0xc21, 0xc24, 0xc26, 0xc28, 0xc29, 0xc2c, 0xc2e, 0xc35, 0xc36, 0xc3b, 0xc3d, 0xc40, 0xc47, 0xc48, 0xc49, 0xc4e, 0xc4f, 0xc51, 0xc52, 0xc54, 0xc5a, 0xc5b, 0xc68, 0xc6c, 0xc70, 0xc71, 0xc72, 0xc75, 0xc78, 0xc7b, 0xc7c, 0xc80, 0xc83, 0xc87, 0xc8a, 0xc8b, 0xc8d, 0xc8e, 0xc90, 0xc92, 0xc96, 0xc9a, 0xca0, 0xca1, 0xcab, 0xcac, 0xcad, 0xcb6, 0xcbc, 0xcc1, 0xcc2, 0xcc5, 0xcc6, 0xcc8, 0xcca, 0xcce, 0xcd0, 0xcd1, 0xcdb, 0xce1, 0xce5, 0xce8, 0xcec, 0xcef, 0xcf2, 0xcf3, 0xcf5, 0xcf6, 0xcf9, 0xd03, 0xd0d, 0xd0e, 0xd0f, 0xd10, 0xd11);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0xd12, 0xd14, 0xd18, 0xd19, 0xd1d, 0xd1f, 0xd20, 0xd22, 0xd23, 0xd24, 0xd25, 0xd28, 0xd3d, 0xd3f, 0xd41, 0xd42, 0xd44, 0xd46, 0xd48, 0xd4a, 0xd4b, 0xd4c, 0xd4f, 0xd55, 0xd56, 0xd5a, 0xd5b, 0xd5f, 0xd60, 0xd62, 0xd63, 0xd64, 0xd67, 0xd69, 0xd71, 0xd73, 0xd74, 0xd75, 0xd7a, 0xd7d, 0xd7e, 0xd81, 0xd83, 0xd86, 0xd89, 0xd90, 0xd92, 0xd94, 0xd99, 0xd9d, 0xda1, 0xda4, 0xda5, 0xda7, 0xdad, 0xdb6, 0xdb7, 0xdb8, 0xdbd, 0xdbf, 0xdc5, 0xdcd, 0xdcf, 0xdd0, 0xdd2, 0xdd5, 0xddb, 0xddc, 0xddd, 0xdde, 0xde2, 0xde3, 0xde8, 0xde9, 0xdeb, 0xded, 0xdf3, 0xdf4, 0xdf7, 0xdf9, 0xdfe, 0xe00, 0xe05);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0xe0a, 0xe0b, 0xe0d, 0xe0f, 0xe13, 0xe15, 0xe16, 0xe17, 0xe18, 0xe1b, 0xe20, 0xe22, 0xe28, 0xe29, 0xe2a, 0xe2d, 0xe30, 0xe34, 0xe36, 0xe37, 0xe3a, 0xe3b, 0xe3c, 0xe4c, 0xe4e, 0xe4f, 0xe51, 0xe54, 0xe57, 0xe59, 0xe5d, 0xe60, 0xe6c, 0xe6e, 0xe77, 0xe7b, 0xe82, 0xe83, 0xe87, 0xe89, 0xe93, 0xe96, 0xe98, 0xe9b, 0xea4, 0xea6, 0xeaa, 0xeac, 0xead, 0xeaf, 0xeb0, 0xeb4, 0xeba, 0xebb, 0xebd, 0xebf, 0xec3, 0xec5, 0xec7, 0xece, 0xecf, 0xed6, 0xed7, 0xedb, 0xedc, 0xede, 0xedf, 0xee1, 0xee2, 0xee7, 0xee8, 0xee9, 0xeee, 0xef7, 0xef9, 0xefa, 0xefb, 0xefd, 0xf04, 0xf08, 0xf0c, 0xf0d, 0xf10);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Nop, 0xf14, 0xf15, 0xf1e, 0xf1f, 0xf21, 0xf22, 0xf24, 0xf26, 0xf28, 0xf29, 0xf2d, 0xf2e, 0xf30, 0xf31, 0xf35, 0xf38, 0xf3c, 0xf3d, 0xf3e, 0xf3f, 0xf48, 0xf4c, 0xf4f, 0xf53, 0xf57, 0xf5b, 0xf5e, 0xf60, 0xf65, 0xf69, 0xf6e, 0xf76, 0xf77, 0xf79, 0xf7a, 0xf7d, 0xf7e, 0xf80, 0xf82, 0xf86, 0xf89, 0xf8a, 0xf8b, 0xf93, 0xf95, 0xf9d, 0xfa1, 0xfaa, 0xfab, 0xfad, 0xfae, 0xfb0, 0xfb4, 0xfb7, 0xfb8, 0xfba, 0xfbb, 0xfbc, 0xfc2, 0xfc6, 0xfc8, 0xfca, 0xfd0, 0xfd3, 0xfd7, 0xfd8, 0xfdc, 0xfdd, 0xfe2, 0xfe3, 0xfe8, 0xfeb, 0xfef, 0xff5, 0xff9, 0xffe, 0xfff);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GetUndefined, 0x1e, 0x34, 0x50, 0xc9, 0x124, 0x3f6, 0x40e, 0x428, 0x523, 0x53a, 0x5d3, 0x664, 0x726, 0x743, 0x793, 0x90b, 0x977, 0x984, 0xa0a, 0xa9a, 0xada, 0xbb4, 0xbd1, 0xc53, 0xc79, 0xcff, 0xe10, 0xe46, 0xf83, 0xfaf);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GetResolveFunction, 0x82, 0xb2, 0x1ac, 0x273, 0x377, 0x4f4, 0x66c, 0x71e, 0x7bc, 0x820, 0x95e, 0xaeb, 0xb5c, 0xc16, 0xced, 0xe41, 0xe7e, 0xf7f);
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GetHash, 0x51, 0x64, 0x6d, 0x81, 0x187, 0x20d, 0x28c, 0x570, 0x588, 0x63d, 0x70c, 0x80a, 0x8db, 0x9c1, 0xafa, 0xb2c, 0xb4b, 0xbc5, 0xbf3, 0xcaf, 0xd31, 0xe1e, 0xf17, 0xf61); // a2d360
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_ScriptFunctionCall, 0x304, 0x359, 0x3cd, 0x405, 0x48b, 0x4d2, 0x572, 0x57b, 0x5dc, 0x8a3, 0xa05, 0xa16, 0xb42, 0xbbe, 0xbe5, 0xbee, 0xbf2, 0xc73, 0xc9e, 0xcbf, 0xd16, 0xd27, 0xdcb, 0xdef, 0xdf0, 0xe26, 0xe32, 0xe68, 0xf1d, 0xf20); // a30930
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_DecTop, 0x222, 0x2a6, 0x2d4, 0x454, 0x4b1, 0x4b6, 0x4f2, 0x4f5, 0x4fd, 0x747, 0x769, 0x830, 0xa4c, 0xb75, 0xbf1, 0xcb8, 0xd1c, 0xdd8, 0xe04, 0xec8); // a32ec0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_EvalGlobalObjectFieldVariable, 0x7a, 0x110, 0x17c, 0x1f4, 0x220, 0x278, 0x30e, 0x316, 0x3f4, 0x59d, 0x6c8, 0x72b, 0x734, 0x7b5, 0x7ca, 0x856, 0x8b2, 0x986, 0x988, 0xabe, 0xbc4, 0xc32, 0xc5e, 0xc76, 0xcbe, 0xcea, 0xe35, 0xe71, 0xea3); // a349d0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_IsDefined, 0x129, 0x14c, 0x251, 0x36e, 0x49d, 0x4cc, 0x591, 0x5ae, 0x60c, 0x6bc, 0x6e9, 0x7f1, 0x808, 0x84b, 0x94e, 0xab0, 0xba1, 0xbb0, 0xc99, 0xd8e, 0xea8, 0xf23, 0xfee); // a351d0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_JumpOnTrue, 0x30, 0x157, 0x3fe, 0x527, 0x5a8, 0x731, 0x781, 0x89d, 0x8a5, 0x8e8, 0xccd, 0xd5c, 0xe62, 0xe92); // a2ddb0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_EvalArray, 0x9e, 0x16d, 0x281, 0x2cc, 0x38f, 0x392, 0x3bd, 0x3fc, 0x4d5, 0x5a2, 0x5fe, 0x70b, 0x80f, 0x81d, 0xb19, 0xb82, 0xbab, 0xd8c); // a33690
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GetZero, 0x239, 0x269, 0x283, 0x4bb, 0x51a, 0x5d2, 0x5db, 0x628, 0x674, 0x7a3, 0x7f4, 0x87f, 0x8aa, 0x92d, 0xa20, 0xaca, 0xd2c, 0xd51, 0xd59, 0xe79, 0xef0, 0xf7b, 0xffb); // a2d760
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_T9_EvalFieldVariableFromGlobalObject, 0xbe, 0x513, 0x514, 0x676, 0x92f, 0x9f4, 0xa7b, 0xb53, 0xb67, 0xba6, 0xc13, 0xc8c, 0xca8, 0xcc3, 0xd5d, 0xdec, 0xeb3, 0xec1, 0xf73); // a34930
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Minus, 0x7c, 0x17d, 0x204, 0x39c, 0x42b, 0x437, 0x492, 0x87d, 0x9a5, 0xb0a, 0xc3f, 0xda3, 0xecd); // a2e130
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_T9_SetVariableFieldFromEvalArrayRef, 0x1ce, 0x1ea, 0x2b0, 0x2cf, 0x524, 0x703, 0x81b, 0x82d, 0x9bc, 0xa10, 0xc09, 0xc19, 0xc45, 0xcd3, 0xd26, 0xe33); // a33200
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GetByte, 0x58, 0xc8, 0x1dd, 0x217, 0x31d, 0x3a2, 0x448, 0x6a2, 0x7bb, 0x84a, 0x852, 0x8a2, 0xa0e, 0xaab, 0xac0, 0xaed, 0xaf9, 0xb41, 0xb51, 0xb81, 0xb87, 0xbf4, 0xcd5, 0xcfe, 0xd4e, 0xe74, 0xeda, 0xef5, 0xf51); // a2d2b0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GetUnsignedShort, 0x1c, 0x14a, 0x19c, 0x2a8, 0x2c9, 0x362, 0x369, 0x3c3, 0x3df, 0x4a2, 0x4ca, 0x6ba, 0x759, 0x819, 0x96f, 0x99c, 0x9b5, 0xa6e, 0xafb, 0xbfd, 0xc58, 0xcb4, 0xd2e, 0xe14, 0xe9f, 0xea5, 0xf1b); // a2d6a0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Divide, 0x9b, 0x162, 0x248, 0x2dd, 0x324, 0x6d7, 0x702, 0x930, 0xa02, 0xb06, 0xb0b, 0xb3d, 0xc86, 0xcae, 0xd40, 0xebe, 0xf19, 0xf5f, 0xf67, 0xff4); // a2d120
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_DevblockBegin, 0xd4, 0xdc, 0x15e, 0x2c8, 0x370, 0x452, 0x80d, 0x90d, 0xa06, 0xae6, 0xbe0, 0xc5d, 0xcf0, 0xd15, 0xdb5); // a2d0c0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Equal, 0x150, 0x181, 0x1bb, 0x1bf, 0x4b0, 0x512, 0x55e, 0x586, 0x69f, 0x6fc, 0x7e8, 0x873, 0x8f6, 0x8f7, 0x94a, 0x9e7, 0xa27, 0xa34, 0xa62, 0xaf1, 0xbdb, 0xc03, 0xc0c, 0xd36, 0xdd6, 0xdea, 0xdf1, 0xe08, 0xf9f); // a2d260
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GetNegByte, 0x1ef, 0x55b, 0x5e7, 0x742, 0xaea, 0xcc7, 0xdab, 0xdb3, 0xe6a, 0xfcb); // a2d420
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_JumpOnFalse, 0x102, 0x121, 0x1b7, 0x1df, 0x2d9, 0x334, 0x337, 0x3bf, 0x3c8, 0x3fd, 0x43c, 0x510, 0x521, 0x615, 0x6a7, 0x6dd, 0x728, 0x824, 0x953, 0xa55, 0xb4f, 0xe4a, 0xedd, 0xfc3); // a2dc00
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_SafeCreateLocalVariables, 0x101, 0x2c3, 0x2f3, 0x41d, 0x565, 0x577, 0x5b5, 0x625, 0x802, 0x835, 0x8cb, 0xb02, 0xc0e, 0xd45, 0xdd9); // a2f8d0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_ScriptThreadCall, 0xbf, 0xe4, 0xee, 0x100, 0x350, 0x35f, 0x36a, 0x497, 0x5aa, 0x715, 0xabb, 0xb37, 0xc1d, 0xc66, 0xeff, 0xf58); // a31e30
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_EvalLocalVariableCached, 0x99, 0x140, 0x205, 0x246, 0x2b4, 0x2be, 0x3e6, 0x475, 0x4e8, 0x504, 0x50a, 0x624, 0x6bd, 0x7de, 0x7ed, 0x85e, 0xa1d, 0xa45, 0xbcb, 0xbef, 0xbf9, 0xcba, 0xd50, 0xdbe, 0xdcc, 0xe5a, 0xe63, 0xebc, 0xfa7, 0xfb1); // a34620
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_EvalLocalVariableCachedSafe, 0x15d, 0x2ee, 0x484, 0x606, 0x73a, 0x9c5, 0xa7a, 0xaba, 0xacc, 0xc01, 0xd6c, 0xe9e); // a35420
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_SetVariableField, 0x7e, 0xd1, 0x1d6, 0x34b, 0x4c2, 0x61d, 0x786, 0x862, 0x922, 0x9cc, 0xa2c, 0xa66, 0xc81, 0xeb5); // a35730
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_CreateArray, 0x381, 0x4ed, 0x568, 0x585, 0x5a9, 0x638, 0x665, 0x6b2, 0x810, 0x81c, 0x975, 0x9e5, 0xa6b, 0xa95, 0xab6, 0xaf2, 0xc22, 0xc3c, 0xd09, 0xe42, 0xe49); // a32d80
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_SetLocalVariableCached, 0xb7, 0x376, 0x394, 0x408, 0x412, 0x470, 0x4e7, 0x5cd, 0x5e6, 0x61b, 0x697, 0x6b1, 0x8e0, 0x8ef, 0x8f5, 0x921, 0x9e3, 0xa6c, 0xa82, 0xa8e, 0xb65, 0xbf7, 0xca5, 0xd0c, 0xdc0, 0xf55, 0xf6c, 0xf87); // a344c0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GetString, 0x12, 0x11f, 0x153, 0x364, 0x3f8, 0x434, 0x5c4, 0x612, 0x626, 0x634, 0x68d, 0x6fa, 0x902, 0x9b2, 0xb15, 0xc30, 0xca7, 0xe95); // a2d530
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_T9_EvalLocalVariableCachedDouble, 0x98, 0xae, 0x277, 0x306, 0x4f3, 0x52b, 0x59e, 0x5a6, 0x6f6, 0x7ac, 0x884, 0x8fa, 0x95c, 0xc0f, 0xc4a, 0xd3c, 0xdc9, 0xea7, 0xfc0); // a340e0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_SizeOf, 0xf6, 0x295, 0x298, 0x29c, 0x2ff, 0x3c4, 0x49b, 0x4d0, 0x602, 0x609, 0x65a, 0x6f3, 0x762, 0x850, 0x9d0, 0xd04, 0xd2f, 0xe52, 0xf3b); // a357d0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_JumpOnGreaterThan, 0x26, 0x307, 0x37a, 0x3e2, 0x3e5, 0x502, 0x52a, 0x57e, 0x5c8, 0x5d6, 0x6da, 0x74c, 0x79e, 0x7ad, 0x9da, 0xa15, 0xb5d, 0xb78, 0xcdf, 0xce2, 0xd88, 0xe38, 0xfac); // a2df20
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_EvalLocalVariableRefCached, 0x6b, 0x8c, 0x2bf, 0x44a, 0x45e, 0x6ce, 0x6f1, 0x794, 0x7c1, 0x85d, 0x90a, 0xa3f, 0xb3e, 0xbce, 0xd2b, 0xd6a, 0xfe6); // a345e0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Jump, 0x1f6, 0x290, 0x2f6, 0x39d, 0x3f7, 0x925, 0x957, 0xb0c, 0xc2f, 0xd3a, 0xddf, 0xe1c, 0xe78, 0xe9a, 0xf64, 0xf6d, 0xf8f, 0xfb5); // a2de90
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_T9_EvalArrayCached, 0x106, 0x137, 0x1e7, 0x1f5, 0x203, 0x325, 0x338, 0x354, 0x3da, 0x423, 0x496, 0x525, 0x57c, 0x581, 0x69e, 0x733, 0x73b, 0x80e, 0x9ad, 0x9e2, 0xa5e, 0xb96, 0xd65, 0xd68, 0xe24, 0xe75); // a34520
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Plus, 0xc4, 0xeb, 0x17b, 0x1e0, 0x2e9, 0x3ae, 0x4a9, 0x4f1, 0x4f8, 0x501, 0x590, 0x878, 0x8d6, 0x939, 0x943, 0x946, 0x9c7, 0x9ef, 0xa90, 0xc23, 0xc44, 0xd21, 0xd6f, 0xe3d, 0xf0f); // a2e2d0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Return, 0x9a, 0x144, 0x275, 0x3ab, 0x415, 0x6ad, 0x8d4, 0x974, 0xb17, 0xbb9, 0xc02, 0xca9, 0xcc9, 0xccf, 0xfd9, 0xff1); // a2f6b0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_T9_IncLocalVariableCached, 0xf2, 0x155, 0x175, 0x1ae, 0x21f, 0x225, 0x244, 0x35b, 0x361, 0x413, 0x445, 0x4a5, 0x4b2, 0x4bd, 0x589, 0x680, 0x71a, 0x785, 0x8f0, 0x8f2, 0xa30, 0xa78, 0xd32, 0xd4d, 0xe44, 0xf92, 0xfe1, 0xfe7); // a34420
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_EvalLocalVariableDefined, 0x29, 0x245, 0x28f, 0x385, 0x4fc, 0x557, 0x653, 0x82f, 0x9cb, 0xa72, 0xaa7, 0xaef, 0xafd, 0xb10, 0xb6f, 0xbec); // a34200
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_BoolNot, 0x1a2, 0x226, 0x46e, 0x582, 0x583, 0x687, 0x6fd, 0x7fb, 0x8b6, 0x961, 0x9e9, 0xa53, 0xab9, 0xb8a, 0xc4b, 0xc57, 0xd01, 0xe5e, 0xe8d, 0xf00, 0xf97, 0xfa6); // a2ce70
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_JumpOnTrueExpr, 0x9d, 0xb3, 0x207, 0x21a, 0x315, 0x3c9, 0x640, 0x889, 0x992, 0xb30, 0xb5b, 0xc64, 0xd0b, 0xe8f, 0xf74, 0xffa); // a2dd10
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_CastBool, 0x65, 0x249, 0x276, 0x346, 0x34d, 0x404, 0x447, 0x611, 0x62d, 0x727, 0x754, 0x79b, 0x7af, 0x7fe, 0x888, 0x8bd, 0xa9c, 0xbe8, 0xbea, 0xd05, 0xdd3, 0xdff, 0xe81, 0xeab); // a2ceb0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GetUnsignedInteger, 0x14, 0xea, 0xfb, 0x388, 0x3d6, 0x410, 0x43e, 0x482, 0x4c6, 0x599, 0x5bc, 0x690, 0x874, 0x937, 0x9d2, 0xa54, 0xa81, 0xbd6, 0xcb3, 0xd96, 0xdb9, 0xe6d, 0xe94, 0xeb8, 0xf8d, 0xfe5); // a2d640
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GetFloat, 0x4d, 0xbd, 0xc6, 0x2b7, 0x300, 0x3d9, 0x4b9, 0x526, 0x5e3, 0x63a, 0x827, 0x838, 0x88a, 0x8be, 0x941, 0x9af, 0x9c4, 0x9c6, 0x9ff, 0xaf3, 0xb3b, 0xbba, 0xc06, 0xca3, 0xcf8, 0xd6d, 0xe02, 0xf12, 0xf84); // a2d300
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_WaitFrame, 0x189, 0x29e, 0x2ac, 0x2fa, 0x47b, 0x635, 0x688, 0x804, 0x893, 0x8e9, 0x910, 0x9d1, 0xaa1, 0xb76, 0xba2, 0xc50, 0xd00); // a36810
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_ScriptMethodCall, 0x11a, 0x177, 0x433, 0x451, 0x548, 0x594, 0x616, 0x661, 0x686, 0x6a0, 0x919, 0xa52, 0xbb2, 0xbc0, 0xc34, 0xc9d, 0xf0e, 0xfa4); // a30db0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Wait, 0x36, 0x7f, 0xca, 0xd5, 0xde, 0x186, 0x200, 0x386, 0x584, 0x6e5, 0x711, 0x778, 0x815, 0x963, 0x985, 0xab3, 0xac2, 0xc7e, 0xd8d, 0xdfc, 0xe7f, 0xf13, 0xfc5); // a383b0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GreaterThanOrEqualTo, 0xe5, 0x31e, 0x331, 0x3a8, 0x4c3, 0x756, 0x788, 0x7a2, 0xb13, 0xc43, 0xc82, 0xd9f, 0xe23, 0xe97, 0xecc, 0xf71, 0xf9a); // a2d920
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_LessThanOrEqualTo, 0xac, 0xf0, 0x113, 0x12d, 0x14b, 0x427, 0x5ff, 0x829, 0x832, 0x891, 0xa00, 0xa25, 0xa3e, 0xa7f, 0xaa6, 0xc1e, 0xc41, 0xcb5, 0xec4, 0xeea, 0xf6f); // a2e050
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_NotEqual, 0x9f, 0x117, 0x138, 0x18c, 0x256, 0x2dc, 0x2e6, 0x3ed, 0x494, 0x4b3, 0x622, 0x69d, 0x716, 0x79a, 0xa3c, 0xa42, 0xb47, 0xc18, 0xc4d, 0xc6e); // a2e270
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_CastAndEvalFieldVariable, 0xaa, 0x382, 0x3ea, 0x569, 0x6c7, 0x6f5, 0x71b, 0x7e2, 0x844, 0x97d, 0xb92, 0xbd0, 0xd7b, 0xe7c, 0xf44, 0xf56, 0xfc7); // a32b10
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Vector, 0x22f, 0x2c2, 0x312, 0x35e, 0x459, 0x468, 0x64c, 0x7ee, 0xa03, 0xa22, 0xa47, 0xb11, 0xb38, 0xc7a, 0xeed, 0xf2f, 0xfa8); // a2ea00
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_JumpOnLessThan, 0x4c, 0x5f, 0x6a, 0x183, 0x1d0, 0x253, 0x267, 0x2c0, 0x552, 0x566, 0x56f, 0x59c, 0x5b0, 0x60b, 0x76a, 0x7f5, 0x825, 0x8cc, 0x905, 0xa3d, 0xae4, 0xae9, 0xb18, 0xbac, 0xbb1, 0xbda, 0xcfd, 0xde7, 0xeeb); // a2d7f0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Multiply, 0x3c, 0x16c, 0x294, 0x368, 0x41c, 0x43d, 0x4c4, 0x54d, 0x845, 0x87b, 0x8ea, 0x960, 0xafe, 0xc5f, 0xceb, 0xcf7, 0xda2, 0xdc7, 0xeb1, 0xef3, 0xff7); // a2e1f0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_GetSelf, 0x33, 0x47, 0xef, 0x229, 0x265, 0x430, 0x564, 0x574, 0x5b2, 0x650, 0x6c6, 0x826, 0x8bf, 0xb29, 0xb62, 0xc7f, 0xc91, 0xd85, 0xe11, 0xf16); // a35070
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_T9_IteratorKey, 0x16, 0x25, 0x2a2, 0x2e2, 0x2ec, 0x725, 0x774, 0x797, 0x8e4, 0x945, 0x9fa, 0xa89, 0xec0); // a34b90
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_T9_IteratorVal, 0xa5, 0x52f, 0x667, 0x6b3, 0x6dc, 0x72a, 0x746, 0x8ec, 0x928, 0xb5f, 0xb66, 0xd58, 0xdb2); // a32f50
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_FirstArrayKey, 0x1c8, 0x449, 0x4a1, 0x4aa, 0x823, 0x970, 0x97a, 0x995, 0x9f7, 0xb55, 0xba5, 0xcee, 0xecb, 0xfbd); // a34720

			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x17, 0x136, 0x1ee, 0x3af, 0x3d7, 0x61f, 0x675, 0x82e, 0x8b5, 0xc6a, 0xce3, 0xdca); // a2cce0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x75, 0x95, 0x11b, 0x372, 0x4b8, 0x705, 0x924, 0x9cf, 0xcfa, 0xe53, 0xe9d, 0xf6b); // a2cd20
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0xf9, 0x1c0, 0x21e, 0x2e1, 0x52c, 0x5c9, 0x766, 0x9be, 0xb05, 0xb28, 0xc55, 0xd1a, 0xe01, 0xe7d, 0xf49, 0xfb9); // a2cd80
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x17e, 0x1fe, 0x2af, 0x4ef, 0x77a, 0x7a4, 0x979, 0xb6b, 0xc85, 0xce4, 0xd2a, 0xd98, 0xe12, 0xfa3); // a2cde0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x107, 0x1e8, 0x261, 0x3c5, 0x505, 0x528, 0x558, 0x672, 0x68f, 0x69c, 0x87e, 0x904, 0xb00, 0xf2b); // a2ce30
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x56, 0xe3, 0xf8, 0x15b, 0x2cb, 0x308, 0x641, 0x993, 0xa51, 0xc77, 0xd97, 0xf36); // a2cef0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x292, 0x343, 0x519, 0x657, 0x724, 0x782, 0x7d8, 0x915, 0x997, 0x9f3, 0xb03, 0xc11, 0xd08, 0xd8a, 0xe7a, 0xfdb); // a2cf30
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x63, 0x120, 0x19d, 0x1a5, 0x1ab, 0x25a, 0x3a4, 0x3c2, 0x3db, 0x481, 0x48f, 0x5be, 0x5cc, 0x6ca, 0x748, 0x77f, 0x7a9, 0x8a4, 0x8c8, 0x8cf, 0x907, 0xcc0, 0xccc, 0xd93, 0xf7c, 0xfbe); // a2cf70
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0xba, 0x42f, 0x4c9, 0x655, 0x695, 0x83b, 0xc37, 0xcb1, 0xd72, 0xe69, 0xe6b); // a2d180
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0xa4, 0x195, 0x1c3, 0x242, 0x36d, 0x396, 0x39e, 0x540, 0x7d6, 0x7f0, 0x875, 0x8f3, 0xaf4, 0xbc7, 0xbdd, 0xc00, 0xc60, 0xee4); // a2d1c0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x172, 0x192, 0x1dc, 0x1fd, 0x309, 0x406, 0x414, 0x417, 0x466, 0x61e, 0x67d, 0x775, 0x790, 0x8a6, 0x940, 0xa1f, 0xa98, 0xb39, 0xda8, 0xed0, 0xed3, 0xefe, 0xf8c, 0xf91, 0xfce, 0xfcf); // a2d3c0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x2c, 0x72, 0xe6, 0x122, 0x23c, 0x23d, 0x293, 0x30c, 0x340, 0x375, 0x500, 0x5ec, 0x64e, 0x66a, 0x6ac, 0x6b6, 0x934, 0x973, 0x9ae, 0x9fe, 0xb0e, 0xb9c, 0xc2a, 0xcb0, 0xd06, 0xd29, 0xdb1, 0xe70, 0xf9b, 0xf9c); // a2d470
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x22, 0x1c5, 0x2a0, 0x2e3, 0x365, 0x391, 0x579, 0x6c0, 0x6ed, 0x741, 0x817, 0x9fd, 0xa43, 0xb7d, 0xcd2, 0xe85, 0xf78); // a2d4d0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x52, 0x12f, 0x13a, 0x1a0, 0x214, 0x26c, 0x2a5, 0x2fc, 0x363, 0x387, 0x69a, 0x6b9, 0x75c, 0x8c5, 0xa6f, 0xa76, 0xb1c, 0xba8, 0xbc2, 0xc1a, 0xd17, 0xdc2, 0xdda, 0xdf6, 0xe5f, 0xf40, 0xf42, 0xf88); // a2d5a0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x66, 0x32a, 0x46a, 0x5d7, 0x6d9, 0x913, 0xa40, 0xaee, 0xb79, 0xc08, 0xe1f, 0xe3e, 0xe4d, 0xe9c, 0xf07); // a2d700
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x7d, 0x88, 0xf4, 0x10e, 0x270, 0x3d3, 0x55c, 0x637, 0x648, 0x6c2, 0x760, 0x8c6, 0x931, 0xc4c, 0xc62, 0xc84, 0xc88, 0xcc4, 0xf2a, 0xf98); // a2d9a0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x2b, 0xa6, 0x38c, 0x4f9, 0x62e, 0x701, 0x99b, 0xb49, 0xf02, 0xfa0); // a2d9f0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x45, 0x93, 0xc0, 0x185, 0x2bb, 0x345, 0x395, 0x43f, 0x4dd, 0x592, 0x5a3, 0x67a, 0x72f, 0x75b, 0x7d9, 0x7f3, 0x86c, 0x872, 0x935, 0xa08, 0xc63, 0xcaa, 0xda9, 0xdc1, 0xde1, 0xfc9); // a2db60
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0xda, 0x178, 0x1cb, 0x297, 0x2f9, 0x384, 0x3fa, 0x4ff, 0x5b7, 0x68b, 0x750, 0x86d, 0x881, 0x89b, 0x9d5, 0xa1c, 0xa26, 0xb45, 0xb8c, 0xb94, 0xbf0, 0xce0, 0xd30, 0xe1a, 0xe50); // a2e0d0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x37, 0xcb, 0x180, 0x27a, 0x32b, 0x330, 0x38a, 0x39b, 0x441, 0x515, 0x517, 0x639, 0x779, 0xa8b, 0xacb, 0xaec, 0xbc8, 0xbd3, 0xd38, 0xd47, 0xd82, 0xdba, 0xe61, 0xf4e, 0xf68); // a2e190
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x1a1, 0x1a3, 0x29a, 0x3d8, 0x53b, 0x542, 0x9eb, 0xc9b, 0xce7, 0xf90); // a2e330
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0xe7, 0x147, 0x23e, 0x279, 0x2de, 0x313, 0x467, 0x4ba, 0x5f9, 0x77b, 0x859, 0x898, 0x92e, 0xa28, 0xad2, 0xb3f, 0xc3a, 0xcdd, 0xd07, 0xdae, 0xdc6, 0xdc8, 0xe09, 0xe4b, 0xe84, 0xec9, 0xf45, 0xf4a, 0xfc1); // a2e390
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x1f2, 0x237, 0x2f7, 0x3b0, 0x478, 0x4a6, 0x5a0, 0x800, 0x8ff, 0x9ab, 0xa2f, 0xa68); // a2e410
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x38, 0xc2, 0x1f1, 0x211, 0x48e, 0x490, 0x4ee, 0x5f6, 0x68c, 0x72d, 0x828, 0x83c, 0x920, 0x99d, 0xa09, 0xaa9, 0xaac, 0xae0, 0xc61, 0xd9a, 0xe0c, 0xeb2, 0xffd); // a2e490
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0xcf, 0x1a4, 0x228, 0x2bc, 0x4e6, 0x5a7, 0x776, 0x7f7, 0x849, 0x964, 0xa32, 0xac6, 0xc56, 0xcda, 0xd87); // a2e540
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x4e, 0xa9, 0x13f, 0x1f7, 0x1ff, 0x20c, 0x24f, 0x274, 0x27f, 0x28e, 0x356, 0x3e3, 0x3f5, 0x40f, 0x485, 0x511, 0x539, 0x5a4, 0x5ab, 0x65e, 0x81f, 0x8ce, 0x9f0, 0xa70, 0xa8d, 0xa9f, 0xd1e, 0xda6, 0xdd4); // a2e760
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x87, 0x1db, 0x1f3, 0x3ac, 0x3ef, 0x729, 0x8f1, 0xa9b, 0xaa5, 0xc6b, 0xc97, 0xe07, 0xe27, 0xe43, 0xe88); // a2e7a0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x67, 0x135, 0x43a, 0x4ea, 0x55d, 0x5ca, 0x796, 0x906, 0x948, 0x95f, 0x987, 0xa88, 0xab7, 0xb2e, 0xcdc, 0xd53, 0xdaa, 0xea1, 0xeef, 0xf1a); // a2e8a0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x8a, 0xa0, 0x16e, 0x2c1, 0x4fb, 0x623, 0x6a5, 0x71f, 0x7bf, 0x7ce, 0x82a, 0x8dd, 0x95a, 0xa4d, 0xd80, 0xf05, 0xf70, 0xff8); // a2fd40
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x20, 0x90, 0xaf, 0xe0, 0x161, 0x165, 0x1da, 0x1f0, 0x2ea, 0x348, 0x4a3, 0x4c5, 0x5e0, 0x717, 0x7ab, 0x908, 0x96d, 0xa9d, 0xac5, 0xb27, 0xb63, 0xb6d, 0xc74, 0xd77, 0xdf5, 0xe0e, 0xe47, 0xf6a, 0xfe4, 0xff3); // a2ffb0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x40, 0x163, 0x208, 0x3a0, 0x40c, 0x4af, 0x5af, 0x6f8, 0x7f6, 0x831, 0x89c, 0x8c9, 0xc42, 0xcd8); // a30240
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x43, 0xd0, 0x21d, 0x2c7, 0x3b2, 0x458, 0x4a8, 0x54f, 0x593, 0x649, 0x64f, 0x654, 0x670, 0x789, 0x980, 0xa8c, 0xa96, 0xaf7, 0xb1b, 0xb98, 0xbc1, 0xbe7, 0xc7d, 0xd43, 0xe48, 0xee3); // a304a0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x7b, 0x151, 0x33b, 0x47c, 0x544, 0x58b, 0x8ca, 0x8d7, 0x93e, 0x97e, 0xa0c, 0xd9c, 0xdd7, 0xe86, 0xee5, 0xf0b); // a306b0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x116, 0x247, 0x2ce, 0x38b, 0x3a5, 0x6e1, 0x82c, 0x8fb, 0xa99, 0xaa0, 0xacd, 0xbd2, 0xbdc, 0xd52, 0xef1, 0xfa9); // a30b30
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0xcc, 0x109, 0x1b6, 0x268, 0x30f, 0x587, 0x62a, 0x684, 0x765, 0x869, 0x8b3, 0x90c, 0xad0, 0xb01, 0xc89, 0xd35, 0xf81, 0xfcd); // a30fb0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x49, 0x10b, 0x125, 0x12b, 0x1c1, 0x24b, 0x33a, 0x36c, 0x389, 0x44c, 0x4cb, 0x503, 0x51e, 0x721, 0x7b9, 0x7eb, 0x7fd, 0xa44, 0xa49, 0xba3, 0xd57, 0xd84, 0xea2, 0xea9, 0xeca, 0xf85, 0xfd2, 0xfdf); // a31240
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x194, 0x1b2, 0x1c2, 0x1e2, 0x25b, 0x284, 0x31c, 0x36f, 0x633, 0x70e, 0x854, 0x971, 0xa86, 0xb08, 0xc69, 0xcf1, 0xeb7, 0xf46); // a31490
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x2a, 0x79, 0x13b, 0x179, 0x2b1, 0x2e7, 0x2f8, 0x54a, 0x5b8, 0x617, 0x644, 0x6d3, 0x6f0, 0x801, 0x857, 0x903, 0x951, 0x958, 0x9d6, 0xa50, 0xc05, 0xd34, 0xde4, 0xe2b, 0xe45, 0xe5b, 0xef8); // a31710
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x114, 0x11e, 0x28d, 0x303, 0x37d, 0x51b, 0x5eb, 0x7df, 0x86a, 0x9a0, 0xa83, 0xe64, 0xe6f, 0xf37, 0xf5d); // a31950
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x131, 0x1aa, 0x508, 0x53f, 0x7c6, 0x89a, 0x8df, 0x9f8, 0xb4e, 0xb90, 0xbb6, 0xda0, 0xdfd, 0xeb9, 0xf01, 0xf09); // a31bb0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x35, 0x26f, 0x450, 0x48c, 0x534, 0x63e, 0x693, 0x699, 0x6cd, 0x6d8, 0x76e, 0x784, 0x836, 0x8b0, 0x93a, 0xb74, 0xc07, 0xd66, 0xef4, 0xf0a); // a324f0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x118, 0x2b9, 0x355, 0x3ec, 0x3f3, 0x439, 0x442, 0x630, 0x67c, 0x6ae, 0x6c5, 0x738, 0xa69, 0xa87, 0xbed, 0xc59, 0xc93, 0xc9f, 0xd79, 0xd8f, 0xdaf, 0xdf8, 0xed4, 0xf43, 0xf94, 0xfe0); // a32540
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x15a, 0x1f9, 0x2d7, 0x310, 0x34c, 0x3e7, 0x45b, 0x59f, 0x9b1, 0xa5b, 0xd8b, 0xdbb, 0xe25, 0xe40); // a32750
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0xd2, 0x28a, 0x476, 0x547, 0x5b1, 0x7e7, 0x85b, 0x96c, 0x9cd, 0xaa3, 0xadb, 0xadf, 0xbb3, 0xbc9, 0xd7f, 0xdce, 0xe8a); // a32920
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x92, 0x23f, 0x32e, 0x344, 0x371, 0x477, 0x4b5, 0x553, 0x5fa, 0x6d2, 0x74e, 0x901, 0x966, 0xa2e); // a32c20
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x212, 0x2eb, 0x4cf, 0x5ad, 0x5b6, 0x7a1, 0x83e, 0x8d5, 0x8d8, 0x9ee, 0xa04, 0xa19, 0xa23, 0xa56, 0xad5, 0xc0b, 0xea0, 0xfb2, 0xfd6); // a32ce0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x97, 0xb1, 0x104, 0x1af, 0x235, 0x30d, 0x483, 0x5e8, 0x694, 0x709, 0x7dc, 0x7e6, 0x967, 0xa37, 0xc31, 0xcd4, 0xdbc, 0xdc3, 0xe39, 0xfed); // a32d10
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x59, 0x14d, 0x202, 0x219, 0x2ca, 0x2fb, 0x380, 0x3d4, 0x3de, 0x460, 0x4e2, 0x507, 0x571, 0x5e5, 0x645, 0x668, 0x90e, 0x932, 0x94f, 0xa1b, 0xabd, 0xadc, 0xc1f, 0xc67, 0xc98, 0xccb, 0xd54, 0xdfa, 0xe8c, 0xff6); // a32d40
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x1d, 0x164, 0x199, 0x223, 0x22b, 0x22d, 0x236, 0x2a1, 0x2d2, 0x311, 0x435, 0x461, 0x4ec, 0x551, 0x563, 0x580, 0x6ef, 0x7fc, 0xa35, 0xb04, 0xb0d, 0xd1b, 0xde6, 0xed9, 0xf96); // a32e20
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x21, 0x27, 0xc3, 0x546, 0x9f9, 0xa1e, 0xb6e, 0xba4, 0xcd7, 0xe5c, 0xe80, 0xefc, 0xf72); // a330a0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x168, 0x1e5, 0x27c, 0x3aa, 0x54b, 0x58c, 0x656, 0x7aa, 0x9b3, 0x9c8, 0x9e6, 0xa75, 0xb23, 0xdb0, 0xde0, 0xe72, 0xf47); // a33460
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x27b, 0x3cc, 0x440, 0x6ea, 0x85f, 0x8e5, 0xa2a, 0xca6, 0xdd1, 0xe19, 0xf50, 0xfb3); // a33710
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x44, 0x94, 0x13e, 0x1cc, 0x23a, 0x25e, 0x2ad, 0x3b5, 0x54c, 0x5d4, 0x755, 0x8d1, 0xa18, 0xabf, 0xb60, 0xcde, 0xd95, 0xe55, 0xf39, 0xfd4); // a33770
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x13d, 0x240, 0x263, 0x366, 0x64b, 0x712, 0x73e, 0x837, 0x840, 0x86f, 0x91b, 0x93c, 0x9a8, 0xa84, 0xa8a, 0xbbf, 0xbe2, 0xd49, 0xdf2, 0xe1d, 0xe2e, 0xe66, 0xf4b); // a33890
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x19, 0xb9, 0x105, 0x1de, 0x1e1, 0x227, 0x25c, 0x2b3, 0x498, 0x57d, 0x66d, 0x6db, 0x718, 0x7be, 0x89e, 0xa79, 0xa85, 0xc8f, 0xca4, 0xe2c, 0xe67, 0xe91, 0xf75, 0xf9e, 0xfd1); // a339d0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x8d, 0x132, 0x33d, 0x44f, 0x4d7, 0x598, 0x607, 0x6c4, 0x78a, 0xb1d, 0xfec); // a33a60
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x8e, 0xb5, 0xed, 0x1ad, 0x2d1, 0x314, 0x37e, 0x45c, 0x506, 0x560, 0x66b, 0x6bf, 0x86b, 0x91e, 0x9a6, 0xb40, 0xc2b, 0xef2, 0xf41); // a33b40
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x5e, 0x18d, 0x3b6, 0x3b8, 0x41f, 0x4e5, 0x52d, 0x52e, 0x533, 0x555, 0x56e, 0x767, 0x76b, 0x78d, 0x7e4, 0x7e9, 0x8ba, 0xa07, 0xac8, 0xb5a, 0xbf6, 0xc1c, 0xc6f, 0xc9c, 0xec2, 0xf5a, 0xffc); // a33d10
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x13, 0xb6, 0x3ce, 0x46c, 0x5fb, 0x60f, 0x65b, 0x73d, 0x745, 0x764, 0x780, 0x99e, 0x9a9, 0xae2, 0xb3a, 0xc38, 0xcbb, 0xff0); // a33e60
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0xd8, 0x13c, 0x210, 0x22a, 0x339, 0x48a, 0x516, 0x62f, 0x77c, 0x77e, 0xb35, 0xd70, 0xd78, 0xe8b, 0xe90, 0xeae); // a34020
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x41, 0xa3, 0xdb, 0x1b5, 0x1d8, 0x257, 0x32c, 0x469, 0x5f1, 0x614, 0x6df, 0x6ee, 0x70f, 0x7b8, 0x7c9, 0x7cc, 0x916, 0x99a, 0xad9, 0xb3c, 0xb58, 0xbd7, 0xcb9, 0xd0a, 0xd2d, 0xd3b, 0xf8e); // a34380
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x3d, 0x4a, 0x5c, 0xa1, 0x378, 0x424, 0x6de, 0x74b, 0x7c2, 0x7ea, 0x812, 0x87a, 0x8af, 0xa92, 0xb34, 0xb4d, 0xb61, 0xc5c, 0xd9b, 0xdac, 0xe3f, 0xf03); // a346c0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x158, 0x24e, 0x318, 0x3ee, 0x4bf, 0x6b4, 0x6e0, 0x7e5, 0x84e, 0x895, 0xa3b, 0xb56, 0xb99, 0xba0, 0xbe6, 0xcbd, 0xce9, 0xd39, 0xd5e, 0xe03, 0xf3a, 0xf5c, 0xf63); // a34a70
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x2e, 0x84, 0x215, 0x26a, 0x26d, 0x2b8, 0x3b1, 0x84d, 0x949, 0xc94, 0xeec, 0xf27); // a34ae0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_T9_IteratorNext, 0x152, 0x201, 0x233, 0x291, 0x444, 0x4be, 0x4d4, 0x554, 0x559, 0x5ba, 0x5d0, 0x5d9, 0x643, 0x662, 0x6e3, 0x720, 0x8bb, 0x8da, 0x9b7, 0xa11, 0xb21, 0xb24, 0xb9d, 0xbf8, 0xdb4, 0xed2, 0xfb6); // a34cc0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x18, 0xe9, 0xec, 0x12c, 0x319, 0x320, 0x49f, 0x4dc, 0x629, 0x692, 0x783, 0x803, 0x805, 0x87c, 0x98b, 0xb46, 0xc6d, 0xcf4, 0xd76, 0xde5, 0xdfb, 0xf34, 0xfd5); // a34e60
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x15, 0x24, 0x74, 0x96, 0x12e, 0x26b, 0x296, 0x3b9, 0x53e, 0x56d, 0x5f2, 0x76d, 0x7b0, 0x7d5, 0x858, 0x94c, 0x9bf, 0xaa4, 0xb86, 0xbe9, 0xc25, 0xc95, 0xcfc, 0xd61, 0xe56, 0xe73, 0xf11); // a34fc0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x1d4, 0x30b, 0x429, 0x730, 0x933, 0x9e8, 0x9f2, 0xbe4, 0xcd9, 0xf32); // a35110
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x20b, 0x2df, 0x31a, 0x383, 0x419, 0x597, 0x59a, 0x65f, 0x7c4, 0x9dc, 0xc2d, 0xc3e, 0xc65, 0xcd6, 0xf33, 0xf4d, 0xf62); // a352d0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x21c, 0x258, 0x2f1, 0x397, 0x3a1, 0x3c7, 0x438, 0x455, 0x4d1, 0x536, 0x56c, 0x573, 0x67e, 0x696, 0x841, 0x97c, 0xa59, 0xb69, 0xbeb, 0xc04, 0xce6, 0xd02, 0xd3e, 0xd6b, 0xf1c); // a354f0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x54, 0xc7, 0x1bc, 0x255, 0x357, 0x44d, 0x47e, 0x4b4, 0x509, 0x706, 0x787, 0x8c3, 0x8d9, 0x952, 0xb6c, 0xc33, 0xdc4, 0xdee, 0xe21, 0xe8e, 0xec6, 0xed8, 0xf99); // a355b0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0xdf, 0x166, 0x28b, 0x2ab, 0x2da, 0x333, 0x37c, 0x3be, 0x443, 0x4ab, 0x4b7, 0x4c0, 0x4da, 0x51c, 0x81e, 0x9a7, 0x9b4, 0x9ba, 0xa31, 0xcb2, 0xe2f, 0xed1, 0xfa2); // a35630
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x55, 0x20a, 0x2ed, 0x352, 0x700, 0x9d4, 0xaad, 0xbca, 0xc27, 0xc46, 0xfea); // a35850
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x170, 0x550, 0x7ec, 0x879, 0x896, 0x8a0, 0x93b, 0xae5, 0xb7f, 0xb85, 0xd13, 0xd33, 0xd37, 0xd9e, 0xe58, 0xee0, 0xf06, 0xfbf, 0xfcc); // a35cb0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x32, 0x1a9, 0x243, 0x37f, 0x3ba, 0x3ff, 0x5df, 0x671, 0x6bb, 0x6ec, 0x77d, 0x795, 0x80c, 0x834, 0x91d, 0x956, 0x990, 0xab8, 0xd6e, 0xe76, 0xed5); // a360f0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x4f, 0x115, 0x12a, 0x39a, 0x3b3, 0x3f1, 0x53d, 0x603, 0x683, 0x6b7, 0x6b8, 0x713, 0x78b, 0x8a1, 0x8f4, 0x90f, 0x97f, 0x9a1, 0xadd, 0xbb8, 0xbde, 0xca2, 0xf54); // a365c0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x1e9, 0x2d0, 0x456, 0x71d, 0x8c2, 0xa73, 0xaf0, 0xafc, 0xbaf, 0xe31, 0xe99, 0xf25, 0xff2); // a36940
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x1b, 0x5d, 0x9c, 0x15f, 0x19f, 0x33f, 0x56a, 0x5d5, 0x601, 0x6af, 0x848, 0x8ac, 0xa1a, 0xa6d, 0xc39, 0xcfb, 0xee6, 0xf18, 0xfa5); // a36b30
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x2f, 0x2fe, 0x301, 0x358, 0x3d2, 0x4bc, 0x5f5, 0x851, 0x885, 0x897, 0xaa8, 0xb6a, 0xc0d, 0xe06, 0xe65, 0xef6, 0xf2c, 0xfc4); // a371e0
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0xcd, 0xfd, 0x127, 0x336, 0x347, 0x3e0, 0x4cd, 0x4e3, 0x57f, 0x5dd, 0x5de, 0x78c, 0x7d3, 0x7fa, 0x870, 0x959, 0x98f, 0x9d3, 0xa36, 0xb59, 0xd7c, 0xeb6, 0xf59); // a37840
			RegisterOpCode(VM_T937, PLATFORM_PC, OPCODE_Undefined, 0x14e, 0x176, 0x1d1, 0x24d, 0x2f4, 0x3a9, 0x55f, 0x927, 0x98c, 0xb93, 0xcb7, 0xd91, 0xf52, 0xf66, 0xfda, 0xfde, 0xfe9); // a37eb0

			RegisterVM(VM_T9, "Call of Duty: Black ops Cold War", "t9", VmFlags::VMF_OPCODE_U16 | VmFlags::VMF_ALIGN | VmFlags::VMF_INV_ADD_TO_OBJECT | VmFlags::VMF_CLIENT_VM);
			RegisterVMPlatform(VM_T9, PLATFORM_PC);
			SetMaxOpCode(VM_T9, 0xFFF);
			RegisterVMGlobalVariable(VM_T9, "level");
			RegisterVMGlobalVariable(VM_T9, "game");
			RegisterVMGlobalVariable(VM_T9, "classes");
			RegisterVMGlobalVariable(VM_T9, "mission");
			RegisterVMGlobalVariable(VM_T9, "anim");
			RegisterVMGlobalVariable(VM_T9, "world");
			RegisterVMGlobalVariable(VM_T9, "sharedstructs");
			RegisterVMGlobalVariable(VM_T9, "memory");
			RegisterVMOperatorFunction(VM_T9, "profilestart", "profilestart()", OPCODE_ProfileStart, VPFD_NONE, 0, 0);
			RegisterVMOperatorFunction(VM_T9, "profilestop", "profilestop()", OPCODE_ProfileStop, VPFD_NONE, 0, 0);
			RegisterVMOperatorFunction(VM_T9, "isdefined", "isdefined(object) -> bool", OPCODE_IsDefined, VPFD_RETURN_VALUE, 1, 1);
			RegisterVMOperatorFunction(VM_T9, "notify", "<caller> notify(event, param*)", OPCODE_Notify, VPFD_SELF_PARAM | VPFD_USE_PRE_SCRIPT_CALL, 1);
			RegisterVMOperatorFunction(VM_T9, "endon", "<caller> endon(event+)", OPCODE_EndOn, VPFD_SELF_PARAM | VPFD_USE_COUNT, 1);
			RegisterVMOperatorFunction(VM_T9, "endoncallback", "<caller> endoncallback(func, event+)", OPCODE_EndOnCallback, VPFD_SELF_PARAM | VPFD_USE_COUNT, 2);
			RegisterVMOperatorFunction(VM_T9, "endoncallbackparam", "<caller> endoncallback(func, param, event+)", OPCODE_T9_EndOnCallbackParam, VPFD_SELF_PARAM | VPFD_USE_COUNT, 3);
			RegisterVMOperatorFunction(VM_T9, "vectorscale", "vectorscale(vector, factor) -> vector", OPCODE_VectorScale, VPFD_RETURN_VALUE, 2, 2);
			RegisterVMOperatorFunction(VM_T9, "waittill", "<caller> waittill(event) -> struct", OPCODE_WaitTill, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 1);
			RegisterVMOperatorFunction(VM_T9, "waittillmatch", "<caller> waittillmatch(event, match) -> struct", OPCODE_WaitTillMatch, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 2);
			RegisterVMOperatorFunction(VM_T9, "waittillmatchtimeout", "<caller> waittillmatchtimeout(event, match, timeout) -> struct", OPCODE_WaitTillMatchTimeout, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 3);
			RegisterVMOperatorFunction(VM_T9, "waittilltimeout", "<caller> waittilltimeout(event, timeout) -> struct", OPCODE_WaittillTimeout, VPFD_SELF_PARAM | VPFD_USE_COUNT | VPFD_RETURN_VALUE, 2);
			RegisterVMOperatorFunction(VM_T9, "wait", "wait(time)", OPCODE_Wait, VPFD_NONE, 1, 1);
			RegisterVMOperatorFunction(VM_T9, "waitframe", "waitframe(frames)", OPCODE_WaitFrame, VPFD_NONE, 1, 1);
			RegisterVMOperatorFunction(VM_T9, "waittillframeend", "waittillframeend()", OPCODE_WaitTillFrameEnd, VPFD_NONE, 0, 0);
			RegisterVMHashOPCode(VM_T9, '#', OPCODE_GetHash, 8, [](const char* str) { return hash::Hash64Pattern(str); });
			RegisterDevCall(VM_T9, "assert", "assertmsg", "errormsg", "throw", "println");

			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknown0, 0x0);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknown1, 0x1);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknown2, 0x2);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknown3, 0x3);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknown4, 0x4);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknown5, 0x5);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknown6, 0x6);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknown7, 0x7);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalLocalVariableCachedDebug, 0x8);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalLocalVariableRefCachedDebug, 0x9);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknowna, 0xa);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknownb, 0xb);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ClearParams, 0xc);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_CheckClearParams, 0xd);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_PreScriptCall, 0xe);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_CallBuiltinFunction, 0xf);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_CallBuiltinMethod, 0x10);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_End, 0x11);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0x13, 0x14, 0x18, 0x1b, 0x1e, 0x1f, 0x22, 0x24, 0x25, 0x29, 0x2b, 0x2e, 0x2f, 0x30, 0x35, 0x38, 0x3b, 0x3c, 0x47, 0x48, 0x4b, 0x4c, 0x4e, 0x52, 0x53, 0x56, 0x59, 0x5d, 0x60, 0x65, 0x76, 0x78, 0x7c, 0x83, 0x85, 0x87, 0x8a, 0x8e, 0x95, 0x9a, 0x9f, 0xa0, 0xa4, 0xa6, 0xab, 0xad, 0xb0, 0xb3, 0xb4, 0xb9, 0xc3, 0xc5, 0xcc, 0xcf, 0xd3, 0xd4, 0xd9, 0xda, 0xdf, 0xef, 0xf4, 0xf7, 0xf9, 0xfe, 0x102, 0x105, 0x106, 0x10a, 0x10f, 0x114, 0x115, 0x118, 0x119, 0x11b, 0x11d, 0x12c, 0x12d, 0x131, 0x136, 0x13e, 0x13f, 0x142, 0x14c, 0x14f, 0x154, 0x155, 0x159, 0x15b, 0x15c, 0x164, 0x165, 0x168, 0x16c);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0x16d, 0x170, 0x17e, 0x17f, 0x180, 0x181, 0x184, 0x186, 0x187, 0x189, 0x18a, 0x18d, 0x18e, 0x190, 0x192, 0x193, 0x195, 0x197, 0x199, 0x19c, 0x19e, 0x1a8, 0x1ab, 0x1ac, 0x1af, 0x1b0, 0x1b3, 0x1b6, 0x1c5, 0x1c7, 0x1c8, 0x1ca, 0x1d5, 0x1d6, 0x1da, 0x1e4, 0x1e5, 0x1e6, 0x1e8, 0x1ef, 0x1f2, 0x1f3, 0x1f5, 0x1f9, 0x1fb, 0x1fd, 0x202, 0x206, 0x207, 0x208, 0x20e, 0x20f, 0x210, 0x215, 0x218, 0x219, 0x21a, 0x21b, 0x21c, 0x22e, 0x230, 0x239, 0x23c, 0x23e, 0x242, 0x247, 0x249, 0x24c, 0x24e, 0x251, 0x25c, 0x25f, 0x260, 0x261, 0x262, 0x266, 0x267, 0x26c, 0x26f, 0x272, 0x27c, 0x283, 0x284, 0x285, 0x286, 0x287, 0x289, 0x28e, 0x293, 0x294, 0x298);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0x29a, 0x29b, 0x29e, 0x2a0, 0x2a7, 0x2ad, 0x2af, 0x2b5, 0x2b6, 0x2bb, 0x2c0, 0x2c5, 0x2c7, 0x2cd, 0x2cf, 0x2d2, 0x2d4, 0x2da, 0x2dc, 0x2de, 0x2df, 0x2e1, 0x2e7, 0x2e9, 0x2ea, 0x2f3, 0x2f4, 0x2fa, 0x2fb, 0x2fe, 0x2ff, 0x301, 0x303, 0x304, 0x307, 0x30a, 0x311, 0x315, 0x31d, 0x320, 0x321, 0x324, 0x325, 0x32b, 0x32e, 0x330, 0x331, 0x334, 0x339, 0x341, 0x343, 0x348, 0x34a, 0x34d, 0x34f, 0x352, 0x356, 0x357, 0x358, 0x35b, 0x35c, 0x362, 0x363, 0x36f, 0x370, 0x371, 0x373, 0x374, 0x375, 0x378, 0x37d, 0x37e, 0x381, 0x382, 0x385, 0x387, 0x389, 0x391, 0x393, 0x39a, 0x39e, 0x3a1, 0x3a2, 0x3a4, 0x3a6, 0x3b5, 0x3b6, 0x3b7, 0x3b9, 0x3bc, 0x3c2);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0x3c5, 0x3c6, 0x3c8, 0x3c9, 0x3ca, 0x3d2, 0x3d4, 0x3e0, 0x3e2, 0x3e8, 0x3ed, 0x3ee, 0x3f0, 0x3f1, 0x3f5, 0x3f8, 0x3fb, 0x3ff, 0x404, 0x405, 0x406, 0x40a, 0x40b, 0x415, 0x416, 0x419, 0x41a, 0x420, 0x422, 0x423, 0x424, 0x429, 0x42e, 0x435, 0x436, 0x43a, 0x43b, 0x43c, 0x43e, 0x440, 0x441, 0x443, 0x448, 0x452, 0x456, 0x459, 0x45d, 0x45f, 0x462, 0x464, 0x465, 0x469, 0x46b, 0x46c, 0x46e, 0x471, 0x474, 0x477, 0x47a, 0x47d, 0x483, 0x484, 0x485, 0x486, 0x48c, 0x496, 0x497, 0x49e, 0x4a0, 0x4a6, 0x4a8, 0x4aa, 0x4ab, 0x4ae, 0x4b4, 0x4be, 0x4c0, 0x4c3, 0x4cf, 0x4d3, 0x4db, 0x4dd, 0x4e5, 0x4e8, 0x4ea, 0x4ec, 0x4ee, 0x4f3, 0x4f5, 0x500, 0x505);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0x508, 0x509, 0x50d, 0x512, 0x51a, 0x51b, 0x51d, 0x51f, 0x522, 0x525, 0x527, 0x52a, 0x52c, 0x52f, 0x530, 0x531, 0x532, 0x533, 0x536, 0x538, 0x53a, 0x53c, 0x53d, 0x540, 0x546, 0x547, 0x548, 0x54b, 0x556, 0x557, 0x558, 0x55d, 0x55f, 0x560, 0x562, 0x565, 0x569, 0x56e, 0x571, 0x572, 0x573, 0x57d, 0x581, 0x586, 0x58e, 0x59b, 0x59d, 0x5a2, 0x5a5, 0x5ab, 0x5ac, 0x5ae, 0x5b2, 0x5b4, 0x5b5, 0x5b8, 0x5b9, 0x5bc, 0x5c7, 0x5cf, 0x5d1, 0x5d2, 0x5d6, 0x5d7, 0x5d9, 0x5da, 0x5db, 0x5dd, 0x5de, 0x5df, 0x5e6, 0x5ec, 0x5ee, 0x5f3, 0x5f7, 0x5f8, 0x5fc, 0x5fd, 0x601, 0x602, 0x606, 0x609, 0x60f, 0x61d, 0x61f, 0x624, 0x626, 0x627, 0x628, 0x629, 0x62c);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0x631, 0x634, 0x635, 0x638, 0x63a, 0x63e, 0x641, 0x646, 0x649, 0x650, 0x656, 0x65d, 0x665, 0x669, 0x66a, 0x66d, 0x66f, 0x674, 0x675, 0x67a, 0x67b, 0x680, 0x686, 0x68f, 0x695, 0x696, 0x697, 0x698, 0x69a, 0x69b, 0x69c, 0x69e, 0x6a2, 0x6ab, 0x6ac, 0x6ae, 0x6af, 0x6b6, 0x6b9, 0x6bd, 0x6bf, 0x6c3, 0x6c4, 0x6cd, 0x6d0, 0x6d3, 0x6d7, 0x6db, 0x6e2, 0x6e4, 0x6e5, 0x6e6, 0x6e7, 0x6e9, 0x6ec, 0x6ef, 0x6f2, 0x6f4, 0x6f5, 0x6ff, 0x704, 0x706, 0x709, 0x70b, 0x70c, 0x70e, 0x70f, 0x710, 0x711, 0x715, 0x717, 0x71a, 0x71c, 0x720, 0x725, 0x726, 0x72a, 0x72c, 0x72f, 0x742, 0x748, 0x74b, 0x74d, 0x754, 0x755, 0x759, 0x75b, 0x75d, 0x75e, 0x763, 0x764);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0x765, 0x769, 0x76a, 0x76c, 0x774, 0x777, 0x77c, 0x782, 0x783, 0x787, 0x78d, 0x78e, 0x791, 0x792, 0x793, 0x795, 0x796, 0x79e, 0x7a5, 0x7a8, 0x7a9, 0x7ab, 0x7ae, 0x7af, 0x7b1, 0x7b3, 0x7b7, 0x7bc, 0x7c1, 0x7c9, 0x7cb, 0x7cc, 0x7ce, 0x7d8, 0x7db, 0x7dc, 0x7e1, 0x7e4, 0x7f0, 0x7f6, 0x7fb, 0x7fc, 0x7fe, 0x802, 0x804, 0x80b, 0x80f, 0x811, 0x812, 0x815, 0x816, 0x81b, 0x81e, 0x829, 0x82e, 0x830, 0x832, 0x839, 0x842, 0x844, 0x848, 0x849, 0x84e, 0x84f, 0x85b, 0x85c, 0x85e, 0x860, 0x864, 0x865, 0x867, 0x871, 0x873, 0x879, 0x87e, 0x87f, 0x883, 0x885, 0x886, 0x88c, 0x88d, 0x88f, 0x894, 0x897, 0x89a, 0x89c, 0x8a0, 0x8a6, 0x8a9, 0x8ad, 0x8ae);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0x8b1, 0x8b7, 0x8b8, 0x8b9, 0x8bc, 0x8be, 0x8c0, 0x8c3, 0x8c6, 0x8c8, 0x8ca, 0x8cb, 0x8d0, 0x8d1, 0x8d5, 0x8d7, 0x8d8, 0x8db, 0x8df, 0x8e1, 0x8e2, 0x8e4, 0x8f1, 0x8f3, 0x8f5, 0x8fe, 0x900, 0x902, 0x903, 0x905, 0x90c, 0x90e, 0x90f, 0x910, 0x91c, 0x91d, 0x926, 0x92a, 0x92d, 0x93b, 0x93d, 0x944, 0x945, 0x946, 0x947, 0x948, 0x94d, 0x94e, 0x951, 0x956, 0x957, 0x95d, 0x960, 0x968, 0x96a, 0x96e, 0x970, 0x975, 0x97c, 0x97e, 0x97f, 0x980, 0x983, 0x984, 0x987, 0x988, 0x98f, 0x990, 0x993, 0x998, 0x999, 0x99f, 0x9a5, 0x9ad, 0x9af, 0x9b0, 0x9b1, 0x9bc, 0x9bf, 0x9c7, 0x9c8, 0x9c9, 0x9cb, 0x9cd, 0x9ce, 0x9d1, 0x9d4, 0x9d8, 0x9d9, 0x9da, 0x9e4);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0x9e7, 0x9ea, 0x9ef, 0x9f5, 0x9f8, 0x9f9, 0x9fc, 0xa03, 0xa11, 0xa1b, 0xa1c, 0xa1d, 0xa1f, 0xa24, 0xa25, 0xa2c, 0xa2f, 0xa37, 0xa40, 0xa42, 0xa43, 0xa45, 0xa47, 0xa4b, 0xa4f, 0xa50, 0xa59, 0xa5b, 0xa5c, 0xa60, 0xa73, 0xa74, 0xa77, 0xa7d, 0xa80, 0xa81, 0xa82, 0xa86, 0xa88, 0xa8c, 0xa8e, 0xa92, 0xa94, 0xa96, 0xa98, 0xa9b, 0xa9f, 0xaa1, 0xaa5, 0xaa6, 0xaa9, 0xaad, 0xaae, 0xab1, 0xab5, 0xab7, 0xab8, 0xabe, 0xac0, 0xac2, 0xac5, 0xac6, 0xacf, 0xadb, 0xadc, 0xae5, 0xae6, 0xae9, 0xaef, 0xaf1, 0xaf3, 0xafc, 0xb05, 0xb06, 0xb07, 0xb0b, 0xb0c, 0xb0e, 0xb14, 0xb18, 0xb1a, 0xb1c, 0xb1d, 0xb1f, 0xb21, 0xb24, 0xb29, 0xb2e, 0xb33, 0xb36, 0xb3c);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0xb42, 0xb45, 0xb46, 0xb47, 0xb4a, 0xb4f, 0xb53, 0xb55, 0xb5a, 0xb61, 0xb68, 0xb6a, 0xb6e, 0xb6f, 0xb70, 0xb71, 0xb74, 0xb76, 0xb80, 0xb83, 0xb85, 0xb8f, 0xb91, 0xb95, 0xb97, 0xb9a, 0xb9d, 0xba2, 0xba6, 0xbac, 0xbad, 0xbaf, 0xbb1, 0xbb5, 0xbba, 0xbbd, 0xbbe, 0xbbf, 0xbc2, 0xbc3, 0xbcb, 0xbcf, 0xbd3, 0xbdb, 0xbdf, 0xbe2, 0xbe4, 0xbe6, 0xbf0, 0xbf2, 0xbf3, 0xbf8, 0xbfa, 0xbff, 0xc08, 0xc09, 0xc10, 0xc13, 0xc14, 0xc15, 0xc1d, 0xc1e, 0xc1f, 0xc26, 0xc2a, 0xc30, 0xc32, 0xc33, 0xc34, 0xc45, 0xc46, 0xc49, 0xc4d, 0xc4f, 0xc53, 0xc54, 0xc5a, 0xc5b, 0xc5d, 0xc5e, 0xc5f, 0xc60, 0xc63, 0xc64, 0xc65, 0xc66, 0xc67, 0xc6b, 0xc73, 0xc75, 0xc81);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0xc84, 0xc86, 0xc89, 0xc8d, 0xc91, 0xc94, 0xc97, 0xc98, 0xc9e, 0xca2, 0xca4, 0xca8, 0xca9, 0xcac, 0xcb0, 0xcb1, 0xcb2, 0xcb6, 0xcb9, 0xcbb, 0xcbc, 0xcc3, 0xcc4, 0xcc8, 0xccd, 0xcd1, 0xcd3, 0xce1, 0xce2, 0xce8, 0xced, 0xcf8, 0xcf9, 0xcfb, 0xcfd, 0xcff, 0xd00, 0xd05, 0xd0d, 0xd18, 0xd1a, 0xd1b, 0xd1f, 0xd22, 0xd24, 0xd2e, 0xd31, 0xd34, 0xd35, 0xd38, 0xd3a, 0xd3d, 0xd3e, 0xd42, 0xd44, 0xd46, 0xd4b, 0xd4d, 0xd4f, 0xd51, 0xd54, 0xd5f, 0xd62, 0xd66, 0xd69, 0xd6b, 0xd6c, 0xd74, 0xd75, 0xd78, 0xd7a, 0xd7b, 0xd7c, 0xd7d, 0xd81, 0xd86, 0xd8e, 0xd8f, 0xd9a, 0xda0, 0xdb4, 0xdbc, 0xdbd, 0xdbe, 0xdc1, 0xdd0, 0xdd2, 0xdd5, 0xdd6, 0xddc, 0xddd);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0xdde, 0xde2, 0xdeb, 0xdf6, 0xdfe, 0xe00, 0xe06, 0xe0b, 0xe12, 0xe14, 0xe18, 0xe19, 0xe1d, 0xe1f, 0xe20, 0xe21, 0xe22, 0xe23, 0xe2b, 0xe2d, 0xe2f, 0xe30, 0xe33, 0xe38, 0xe39, 0xe3f, 0xe40, 0xe41, 0xe48, 0xe4c, 0xe4d, 0xe50, 0xe55, 0xe5a, 0xe5f, 0xe62, 0xe63, 0xe6b, 0xe6e, 0xe70, 0xe78, 0xe7c, 0xe7d, 0xe7e, 0xe7f, 0xe81, 0xe86, 0xe87, 0xe88, 0xe8c, 0xe92, 0xe93, 0xe94, 0xe95, 0xe96, 0xe9b, 0xe9c, 0xe9e, 0xea2, 0xea5, 0xea6, 0xeb2, 0xebd, 0xec1, 0xec6, 0xecb, 0xece, 0xed5, 0xedc, 0xee1, 0xee2, 0xee5, 0xee6, 0xee8, 0xee9, 0xeee, 0xeef, 0xef1);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Nop, 0xef6, 0xefb, 0xefc, 0xefe, 0xf08, 0xf0a, 0xf10, 0xf14, 0xf15, 0xf16, 0xf1d, 0xf20, 0xf24, 0xf29, 0xf2a, 0xf2e, 0xf33, 0xf34, 0xf36, 0xf37, 0xf38, 0xf39, 0xf3b, 0xf3f, 0xf41, 0xf43, 0xf47, 0xf49, 0xf51, 0xf52, 0xf53, 0xf54, 0xf5b, 0xf5d, 0xf60, 0xf61, 0xf63, 0xf66, 0xf6d, 0xf6e, 0xf70, 0xf72, 0xf75, 0xf76, 0xf7f, 0xf80, 0xf84, 0xf85, 0xf86, 0xf89, 0xf8a, 0xf8d, 0xf8f, 0xf90, 0xf94, 0xf95, 0xf99, 0xf9a, 0xf9d, 0xf9f, 0xfa5, 0xfab, 0xfac, 0xfae, 0xfb1, 0xfb2, 0xfb6, 0xfb7, 0xfb9, 0xfbb, 0xfcb, 0xfce, 0xfd0, 0xfd9, 0xfdb, 0xfe8, 0xfeb, 0xfed, 0xff6, 0xff7, 0xff9, 0xffd, 0xffe, 0xfff);

			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_AddToArray, 0x15, 0x68, 0x18c, 0x2d1, 0x30d, 0x37c, 0x37f, 0x399, 0x3f2, 0x445, 0x44f, 0x482, 0x56f, 0x6eb, 0x7ff, 0x800, 0x92b, 0xafa, 0xb25, 0xb44, 0xb51, 0xbee, 0xc0c, 0xcfe, 0xd30, 0xd59, 0xdc3, 0xfbd, 0xff1);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_AddToStruct, 0x36, 0xf6, 0x125, 0x15d, 0x166, 0x282, 0x2bf, 0x35a, 0x39f, 0x4bc, 0x4d8, 0x524, 0x53b, 0x909, 0x94b, 0x9b4, 0xb1e, 0xb69, 0xbc7, 0xc9f, 0xcc9, 0xd67, 0xe0e, 0xe68);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Bit_Or, 0x16, 0xe7, 0xf0, 0x112, 0x126, 0x1c6, 0x1dc, 0x1f6, 0x2f6, 0x344, 0x4b8, 0x4ca, 0x537, 0x59e, 0x735, 0x7d1, 0x7d7, 0x813, 0xa33, 0xac1, 0xb89, 0xca1, 0xccc, 0xd27, 0xdec, 0xe31, 0xede, 0xff8);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Bit_And, 0x3d7, 0x3dd, 0x461, 0x49a, 0x4bb, 0x4c9, 0x4d1, 0xc43, 0xc8f, 0xd8d, 0xd92, 0xecc, 0xf98);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Bit_Xor, 0x23, 0x100, 0x25a, 0x2bd, 0x2c1, 0x2f7, 0x47f, 0x7d0, 0x821, 0x88a, 0x8fb, 0xb00, 0xb03, 0xb39, 0xb4c, 0xbab, 0xce4, 0xcec, 0xdd9, 0xe43, 0xe91);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_BoolComplement, 0x74, 0x173, 0x1d1, 0x1e7, 0x479, 0x6a9, 0x6d2, 0x71d, 0x7b9, 0x805, 0xa62, 0xab0, 0xac3, 0xc51, 0xd57, 0xdac, 0xf48, 0xf91);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_BoolNot, 0x1c2, 0x3e3, 0x3e4, 0x478, 0x965, 0xa6b, 0xadf, 0xafb, 0xb10, 0xbe3, 0xc74, 0xd89, 0xe1e, 0xed9);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_CastAndEvalFieldVariable, 0x3d, 0xb6, 0xea, 0xf3, 0x234, 0x2a5, 0x359, 0x3cd, 0x473, 0x513, 0x55a, 0x671, 0x6b2, 0x7a6, 0x7c8, 0x9b8, 0x9e6, 0xad7, 0xb7c, 0xc1a, 0xc21, 0xc6e, 0xc93, 0xcc7, 0xd93, 0xd95, 0xe08, 0xf3d);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_CastBool, 0x8f, 0x487, 0x4f2, 0x607, 0x6bc, 0x82b, 0x8ea, 0xa75, 0xc16, 0xc7c, 0xe3a);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_CastCanon, 0xcd, 0x104, 0x161, 0x26b, 0x34b, 0x4b1, 0x4bf, 0x62b, 0x657, 0x756, 0x79b, 0x817, 0x943, 0xae3, 0xba5, 0xbb3, 0xc19, 0xcba, 0xd7e, 0xd7f, 0xe97, 0xfc5, 0xfc9);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_CastFieldObject, 0x51, 0x156, 0x25e, 0x302, 0x33e, 0x475, 0x490, 0x506, 0x554, 0x727, 0x749, 0x7ea, 0x84b, 0x8bb, 0x923, 0x94a, 0xac4, 0xc2c, 0xe6c, 0xf0f, 0xf17, 0xf22);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ClassFunctionCall, 0x9e, 0x217, 0x2c2, 0x2c6, 0x32f, 0x335, 0x426, 0x46d, 0x52b, 0x728, 0x809, 0x80a, 0x84c, 0x8bf, 0x929, 0x991, 0xb08, 0xbcd, 0xccf, 0xd0a, 0xfaf, 0xfec);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ClassFunctionThreadCall, 0x33, 0x50, 0x108, 0x22b, 0x555, 0x64b, 0x68a, 0x721, 0x73d, 0x9c4, 0xa69, 0xab3, 0xaf2, 0xbd2, 0xc25, 0xd96, 0xe80, 0xed0);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ClassFunctionThreadCallEndOn, 0x27, 0xc1, 0x13b, 0x14e, 0x1f8, 0x297, 0x2be, 0x319, 0x386, 0x40e, 0x4c4, 0x4f4, 0x5fa, 0x797, 0x820, 0x825, 0x8a4, 0x962, 0xa68, 0xb7e, 0xc0e, 0xc95, 0xd88, 0xdad, 0xee4, 0xffc);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ClearArray, 0x72, 0x93, 0x130, 0x2aa, 0x2d0, 0x397, 0x517, 0x610, 0x62a, 0x7f9, 0xa6c, 0xa76, 0xad4, 0xaff, 0xb65, 0xb86, 0xcaa, 0xcd6, 0xcf7, 0xd13, 0xddb, 0xe05, 0xfc4, 0xfd4);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ClearFieldVariable, 0x4f, 0xd1, 0x288, 0x434, 0x54a, 0x630, 0x68d, 0x79f, 0x81f, 0x83f, 0x9c0, 0xb5f, 0xbf5, 0xcb5, 0xd02, 0xd52, 0xd5c, 0xdd1, 0xe6a, 0xfad, 0xfb4, 0xfd1);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ClearFieldVariableOnStack, 0x127, 0x143, 0x14d, 0x3be, 0x449, 0x4d2, 0x57b, 0x599, 0x5c6, 0x5eb, 0x61b, 0x658, 0x666, 0x6d1, 0x718, 0x719, 0x959, 0x9d5, 0x9f7, 0xa38, 0xa93, 0xace, 0xb7f, 0xde7, 0xe5b, 0xf1e, 0xf35);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_CreateArray, 0x236, 0x402, 0x44b, 0x4b2, 0xb3d, 0xc7a, 0xc9c, 0xd8b, 0xe65, 0xed4, 0xf56);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_CreateStruct, 0x1e9, 0x2c3, 0x3a9, 0x425, 0x42f, 0x4b6, 0x543, 0x54c, 0x676, 0x68c, 0x6ce, 0x78c, 0x7cf, 0x86c, 0x8a3, 0x907, 0x92c, 0x935, 0x9f0, 0xa67, 0xc3c, 0xd5b, 0xed7, 0xed8, 0xf19, 0xf3a, 0xf44);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Dec, 0x268, 0x2ca, 0x2eb, 0x318, 0x351, 0x3c0, 0x52e, 0x535, 0x59f, 0x64c, 0x67e, 0x730, 0x739, 0x77a, 0x8fa, 0x901, 0x98b, 0x9ca, 0x9eb, 0xa7e, 0xaca, 0xc50, 0xcae, 0xcce, 0xcdc, 0xd0c, 0xd25, 0xf59, 0xff4);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_DecTop, 0x109, 0x292, 0x61c, 0x642, 0x655, 0x6c9, 0x6cb, 0x6f3, 0x723, 0x780, 0x7ad, 0x82f, 0x87c, 0x88e, 0x927, 0x928, 0xa16, 0xa83, 0xaa3, 0xb16, 0xc05, 0xce5, 0xcfa, 0xd16, 0xd2f, 0xe4b, 0xed1, 0xf62, 0xfbe);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_DevblockBegin, 0x12f, 0x1b2, 0x1ed, 0x243, 0x2d8, 0x5ef, 0x619, 0x673, 0x6a8, 0x779, 0x7a1, 0x931, 0x936, 0xae4, 0xbe0, 0xbeb, 0xc8c, 0xcb7, 0xcde, 0xd39, 0xd4c, 0xda2, 0xda4, 0xe3b, 0xec9);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Divide, 0xb5, 0x216, 0x233, 0x4f9, 0x564, 0x65c, 0x681, 0x6fa, 0x733, 0x884, 0x8a8, 0x96f, 0xa58, 0xac8, 0xbfc, 0xd40, 0xd55, 0xe5c, 0xf0c, 0xf92);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EmptyArray, 0x97, 0x25d, 0x31f, 0x3ac, 0x3ea, 0x4fd, 0x592, 0x5a0, 0x63d, 0x69f, 0x707, 0x737, 0x738, 0x7c4, 0x890, 0x9a1, 0xa35, 0xa3b, 0xb1b, 0xb28, 0xb32, 0xb99, 0xdb0, 0xe64);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EndOn, 0x58, 0xeb, 0xfa, 0xfd, 0x11e, 0x1b9, 0x35e, 0x3ae, 0x3ba, 0x4a4, 0x4e2, 0x507, 0x57c, 0x652, 0x6da, 0x758, 0x7d6, 0x836, 0x912, 0x95c, 0xa01, 0xa5a, 0xa5d, 0xaaf, 0xabf, 0xad3, 0xb4b, 0xcc0, 0xcf4, 0xd0f);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EndOnCallback, 0x41, 0x6e, 0xbc, 0x342, 0x450, 0x493, 0x63f, 0x679, 0x691, 0x7f4, 0xa2e, 0xa49, 0xa84, 0xacb, 0xada, 0xb87, 0xbd1, 0xc4c, 0xd4e, 0xe34);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EndSwitch, 0x160, 0x270, 0x2ae, 0x2e8, 0x4a1, 0x4df, 0x4e9, 0x57e, 0x5c0, 0x654, 0x8f0, 0x904, 0xa0c, 0xa54, 0xac9, 0xb94, 0xc99, 0xf83);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Equal, 0x6b, 0x80, 0xba, 0xc8, 0x10e, 0x1b5, 0x1ec, 0x30f, 0x58d, 0x5cb, 0x67f, 0x6f1, 0x801, 0x961, 0x9a8, 0x9ae, 0x9ee, 0xbcc, 0xcd2, 0xd98, 0xda9, 0xdc0, 0xdf8, 0xeae, 0xeb7, 0xf81, 0xfd6);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalArray, 0x96, 0x162, 0x163, 0x229, 0x23f, 0x2b3, 0x309, 0x460, 0x523, 0x58b, 0x600, 0x604, 0x6a5, 0x790, 0x79a, 0x92e, 0x9b7, 0xaa8, 0xb31, 0xba8, 0xbb0, 0xdbb, 0xdbf, 0xea1, 0xebb, 0xf4c, 0xfc6, 0xfcf, 0xfea);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalArrayRef, 0x1d3, 0x2e3, 0x32d, 0x603, 0x915, 0x958, 0xa28, 0xa3e, 0xa72, 0xc9b, 0xd77, 0xecf, 0xf18, 0xf2b, 0xf77, 0xf9b);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalFieldObjectFromRef, 0x89, 0xd0, 0xe4, 0x148, 0x198, 0x327, 0x3c3, 0x3ec, 0x41d, 0x810, 0x893, 0x95a, 0x9a0, 0xa2a, 0xc77, 0xcdf, 0xdff, 0xe77, 0xf01, 0xf5a, 0xfca);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalFieldVariableOnStack, 0x7d, 0x86, 0x101, 0x279, 0x355, 0x467, 0x570, 0x69d, 0x744, 0x845, 0x86d, 0x891, 0x8ee, 0xb59, 0xc00, 0xd20, 0xe10, 0xe37, 0xf00, 0xffa);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalFieldVariableOnStackRef, 0x1a4, 0x1be, 0x1bf, 0x2b9, 0x369, 0x41e, 0x662, 0x682, 0x7a3, 0x7e7, 0x932, 0x9a2, 0xa79, 0xaf8, 0xc01, 0xc57, 0xccb, 0xcd8, 0xcf3, 0xe3d, 0xe8b);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalFieldVariableRef, 0x395, 0x3a3, 0x58f, 0x670, 0x6c0, 0x6ee, 0x708, 0x74e, 0x750, 0x851, 0x922, 0x967, 0xae0, 0xb38, 0xbda, 0xc9a, 0xce0, 0xd64, 0xd80, 0xdb5, 0xe24, 0xec3, 0xf4d);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalGlobalObjectFieldVariable, 0xe2, 0x26d, 0x372, 0x5dc, 0x67d, 0x70a, 0x81d, 0xc6f, 0xe0a, 0xe49, 0xe53, 0xeed, 0xf13, 0xfb5);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalLocalVariableCached, 0x43, 0x1e0, 0x480, 0x541, 0x6fb, 0x72b, 0x746, 0x77e, 0x7d5, 0x7ed, 0x89d, 0x921, 0x939, 0x9e5, 0xa1a, 0xa3c, 0xa65, 0xab9, 0xad9, 0xaee, 0xb5d, 0xdc2, 0xe54, 0xfde);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalLocalVariableCachedSafe, 0x8d, 0x1ce, 0x21d, 0x295, 0x4d0, 0x616, 0x653, 0x6c7, 0x838, 0x93e, 0x97b, 0xb78, 0xcf2, 0xee3, 0xf5e, 0xffb);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalLocalVariableDefined, 0xd2, 0x121, 0x235, 0x2a1, 0x2d7, 0x37a, 0x47e, 0x49d, 0x841, 0x8a7, 0xc87);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalLocalVariableRefCached, 0x354, 0x407, 0x559, 0x5c1, 0x5e5, 0x61e, 0x7a2, 0x8c7, 0x920, 0xa9a, 0xbf6, 0xdab, 0xe44, 0xf2f, 0xf97);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_EvalSelfFieldVariable, 0x3e, 0xa1, 0xfb, 0x134, 0x191, 0x221, 0x22d, 0x388, 0x410, 0x5bd, 0x632, 0x747, 0x7da, 0x87a, 0x8e0, 0x969, 0xb7b, 0xead, 0xf40, 0xfa1);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_FirstArrayKey, 0x34, 0x244, 0x3d0, 0x454, 0x5fb, 0x65f, 0x74c, 0x930, 0xad0, 0xc6c, 0xf04);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetByte, 0xca, 0x1a5, 0x1cb, 0x240, 0x317, 0x4af, 0x53e, 0x5a1, 0x5a4, 0x8d2, 0x96d, 0x9e2, 0xa6e, 0xa7c, 0xa9e, 0xaaa, 0xb30, 0xb49, 0xd10, 0xd28, 0xd2c, 0xf42, 0xf87);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetFloat, 0x16b, 0x291, 0x305, 0x313, 0x59c, 0x5ca, 0x78a, 0x908, 0x973, 0xdc4, 0xdf2, 0xe42, 0xe8e, 0xec5);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetFunction, 0x1c4, 0x31b, 0x3bd, 0x4a3, 0x4e0, 0x4f6, 0x56d, 0x83e, 0x84d, 0x888, 0x8f9, 0x906, 0xaba, 0xb02, 0xbe7, 0xc8b, 0xd1d, 0xd8c, 0xe0d, 0xee7, 0xef8, 0xf0e, 0xf25, 0xf82);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetGlobal, 0x5f, 0xf2, 0x11f, 0x12e, 0x213, 0x2cb, 0x38d, 0x545, 0x772, 0x98e, 0x99c, 0x9fd, 0xa22, 0xbfb, 0xc2d, 0xc3b, 0xc68, 0xcfc, 0xd6a, 0xdf4, 0xe1b, 0xf30);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetGlobalObject, 0xb7, 0x11c, 0x17a, 0x323, 0x332, 0x50f, 0x608, 0x643, 0x659, 0x942, 0x97d, 0xa29, 0xa2d, 0xbc8, 0xca3, 0xd0b, 0xe9a);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetHash, 0x29d, 0x336, 0x367, 0x3b1, 0x4d5, 0x50b, 0x580, 0x664, 0x702, 0x79c, 0x892, 0x8af, 0x99a, 0x9de, 0xa14, 0xa70, 0xab2, 0xb98, 0xbc9, 0xbed, 0xe2c, 0xe60, 0xe8a, 0xf2d, 0xf4f, 0xfd7);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetUnsignedInteger, 0xc7, 0xf5, 0xff, 0x103, 0x1a6, 0x20c, 0x250, 0x253, 0x277, 0x2a4, 0x3d6, 0x40d, 0x42b, 0x4ce, 0x4d7, 0x56c, 0x589, 0x5a9, 0x620, 0x6f0, 0x92f, 0xa15, 0xa31, 0xa34, 0xd79, 0xdb8, 0xe76, 0xf09, 0xf7d, 0xfa6);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetLongInteger, 0x63, 0xd8, 0x10c, 0x13a, 0x15e, 0x19b, 0x1fc, 0x3fc, 0x60b, 0x617, 0x760, 0x786, 0x875, 0x88b, 0x934, 0x9cf, 0xa56, 0xb26, 0xc6d, 0xe36, 0xe57, 0xf6c);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetNegByte, 0xc6, 0x116, 0x463, 0x7fd, 0x8eb, 0x90d, 0x977, 0x978, 0x9b9, 0x9fe, 0x9ff, 0xaa0, 0xb6d, 0xd72);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetNegUnsignedInteger, 0xee, 0x252, 0x27b, 0x394, 0x4ff, 0x5f2, 0x65e, 0x6a7, 0x6c5, 0x794, 0x7c7, 0x7e3, 0x85f, 0x87d, 0x8f7, 0xa23, 0xa85, 0xaac, 0xca7, 0xd19, 0xed2);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetNegUnsignedShort, 0x5e, 0x75, 0x188, 0x23a, 0x255, 0x259, 0x33c, 0x3e1, 0x585, 0x623, 0x64a, 0x688, 0x6e1, 0x81c, 0x976, 0xbc5, 0xd6d, 0xeb6);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetObjectType, 0x44, 0x107, 0x265, 0x3fd, 0x694, 0x785, 0x7c3, 0x81a, 0x89e, 0x8c2, 0x996, 0xa09, 0xa57, 0xa61, 0xc4a, 0xd5e, 0xdb2, 0xdea, 0xe1a, 0xe29);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetResolveFunction, 0x88, 0x299, 0x347, 0x3dc, 0x3f6, 0x401, 0x41b, 0x605, 0x683, 0x6f9, 0x789, 0x7c5, 0x8c1, 0xbb2, 0xbe1, 0xc59, 0xc88, 0xeaf, 0xeb0);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetSelf, 0x19, 0x5b, 0x280, 0x310, 0x31a, 0x39d, 0x4cb, 0x542, 0x612, 0x6ca, 0x7ca, 0x881, 0x911, 0x91f, 0x9e1, 0x9f4, 0xafd, 0xb12, 0xc42, 0xda1);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetSelfObject, 0x70, 0xc9, 0x140, 0x153, 0x157, 0x1d8, 0x264, 0x383, 0x3cc, 0x453, 0x470, 0x4c2, 0x4c7, 0x594, 0x618, 0x6ea, 0x8f2, 0xa7f, 0xa89, 0xa8d, 0xad6, 0xaea, 0xb60, 0xb6c, 0xb72, 0xbd5, 0xbf1, 0xd09, 0xedf);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetString, 0xd7, 0x411, 0x492, 0x4a9, 0x515, 0x5ad, 0x611, 0x62f, 0x663, 0x6d8, 0xad2, 0xce9, 0xd82, 0xd90, 0xe72, 0xea7);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetTime, 0x19f, 0x1aa, 0x232, 0x241, 0x258, 0x3f3, 0x42c, 0x476, 0x4c1, 0x672, 0x6bb, 0x713, 0x925, 0x981, 0x992, 0x9f2, 0xaf5, 0xb0a, 0xb41, 0xb56, 0xbb7, 0xc7d, 0xcbe, 0xcc2, 0xcda, 0xd9d, 0xdce, 0xf3e, 0xf45, 0xfa3);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetUIntPtr, 0xe5, 0x329, 0x38e, 0x50e, 0x54e, 0x5ff, 0x6dc, 0x8f4, 0x9be, 0x9fb, 0xb2a, 0xb9c, 0xba3, 0xbce, 0xbec, 0xc03, 0xc48, 0xc70, 0xcb3, 0xe45, 0xe56, 0xeaa, 0xed6, 0xfd3);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetUndefined, 0x37, 0x55, 0x10b, 0x182, 0x245, 0x27a, 0x2cc, 0x3c1, 0x447, 0x722, 0x76b, 0x7a4, 0xa30, 0xa4e, 0xb11, 0xcd7, 0xddf, 0xf68, 0xfaa, 0xfc0);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetUndefined, 0x39, 0x185, 0x365, 0x3af, 0x41c, 0x45e, 0x47c, 0x49b, 0x4e7, 0x550, 0x61a, 0x731, 0x762, 0x7e9, 0x7ef, 0x828, 0x82a, 0x8e6, 0x9e8, 0xa20, 0xab4, 0xabd, 0xb15, 0xb82, 0xbbc, 0xc11, 0xc29, 0xd45, 0xde8);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetUnsignedShort, 0x67, 0x7e, 0xe1, 0x135, 0x174, 0x226, 0x2a2, 0x4ba, 0x614, 0x6df, 0x7bd, 0x824, 0x916, 0x9e3, 0xa1e, 0xbde, 0xcad, 0xd73, 0xef5);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetVector, 0x10d, 0x27e, 0x2f5, 0x353, 0x368, 0x37b, 0x458, 0x5c8, 0x615, 0x6b4, 0x7a7, 0x8f8, 0xa53, 0xae7, 0xb8a, 0xbfe, 0xc90, 0xca0, 0xcd9, 0xdb3, 0xde9, 0xdf1, 0xe1c, 0xe82, 0xeba, 0xf6f);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GetZero, 0x6a, 0x16e, 0x432, 0x5c9, 0x6a1, 0x6fd, 0xa4a, 0xacd, 0xb50, 0xba4, 0xbfd, 0xc18, 0xcf6, 0xe8d);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GreaterThan, 0x132, 0x15f, 0x16f, 0x1fe, 0x2fd, 0x3ab, 0x3e5, 0x4a7, 0x591, 0x5c5, 0x7fa, 0x87b, 0x90b, 0x99d, 0xaa2, 0xac7, 0xbbb, 0xdc9, 0xdf5, 0xe07, 0xe32, 0xf1a);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_GreaterThanOrEqualTo, 0x66, 0x98, 0x15a, 0x2a8, 0x2f9, 0x333, 0x3c4, 0x489, 0x6ba, 0x75f, 0x79d, 0x7e8, 0x870, 0x964, 0xa41, 0xb09, 0xb27, 0xcc5, 0xd9c, 0xdfd, 0xe09, 0xe5e, 0xedd, 0xf50);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Inc, 0x1b8, 0x1df, 0x360, 0x3d5, 0x5f4, 0x6aa, 0x6cf, 0x6fe, 0xa36, 0xae2, 0xc7f, 0xd3f, 0xde5, 0xf27);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_IsDefined, 0x45, 0x64, 0xcb, 0xce, 0x27d, 0x2b2, 0x2d3, 0x33a, 0x4c5, 0x54d, 0x63c, 0x6c1, 0x7b8, 0x7df, 0x855, 0x868, 0x8e9, 0x997, 0xa3f, 0xa4c, 0xa63, 0xa6a, 0xb2c, 0xb48, 0xb81, 0xbf7, 0xd6e, 0xd76, 0xdc5, 0xde1);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Jump, 0xbd, 0xe0, 0xe9, 0x149, 0x19a, 0x408, 0x431, 0x553, 0x67c, 0x80c, 0x819, 0x835, 0xaeb, 0xcab, 0xcea, 0xdb1, 0xecd, 0xeec, 0xfa7, 0xff5);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_JumpOnFalse, 0x28, 0x11a, 0x22c, 0x22f, 0x4f7, 0x4fa, 0x534, 0x58a, 0x637, 0x64f, 0x74a, 0x7b5, 0x924, 0xa48, 0xae8, 0xaf4, 0xaf6, 0xc07, 0xc4b, 0xdca, 0xdd8, 0xf31);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_JumpOnFalseExpr, 0xbb, 0xc2, 0x1ea, 0x204, 0x2c4, 0x2ef, 0x340, 0x574, 0x645, 0x647, 0x660, 0x76d, 0x784, 0xb7a, 0xb8c, 0xbaa, 0xd58, 0xd60, 0xd63, 0xdd7, 0xec4, 0xf07, 0xf9e, 0xfe5, 0xfe7);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_JumpOnGreaterThan, 0x21, 0x1b4, 0x1cd, 0x2ec, 0x3a5, 0x3ce, 0x86a, 0x86e, 0x89f, 0x8c4, 0x9d0, 0xc0b, 0xd83, 0xfd2);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_JumpOnLessThan, 0xd6, 0xdc, 0x14a, 0x1f7, 0x2b4, 0x46f, 0x4cd, 0x4f8, 0x504, 0x52d, 0x567, 0x5ed, 0x701, 0x71f, 0x7c6, 0x83b, 0x880, 0x898, 0xb9e, 0xc36, 0xc76, 0xcb8, 0xd99, 0xe01, 0xe5d, 0xe7b, 0xf1c, 0xfb8, 0xfbf, 0xfc8);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_JumpOnTrue, 0x17, 0x5a, 0x6f, 0x4d9, 0x598, 0x6a6, 0x847, 0x94c, 0xd3c, 0xe16, 0xeb5);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_JumpOnTrueExpr, 0x18f, 0x194, 0x224, 0x225, 0x23d, 0x2f8, 0x361, 0x3da, 0x433, 0x481, 0x5e9, 0x65b, 0x78b, 0x913, 0x93a, 0x985, 0x9cc, 0xa05, 0xad5, 0xaf0, 0xb35, 0xb3b, 0xba1, 0xc83, 0xd21, 0xdf3, 0xefa, 0xfa9);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_JumpPush, 0x21e, 0x27f, 0x3bb, 0x3f7, 0x575, 0x667, 0x8ef, 0x9c1, 0xacc, 0xb66, 0xd36, 0xf28);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_LessThan, 0x12, 0x2d, 0x7f, 0xc0, 0x147, 0x1b7, 0x223, 0x29c, 0x3e9, 0x3f4, 0x495, 0x4a2, 0x4e1, 0x578, 0x59a, 0x668, 0x729, 0x8da, 0xb22, 0xba7, 0xba9, 0xc62, 0xce3, 0xe67, 0xf21, 0xfd5, 0xfdf);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_LessThanOrEqualTo, 0x117, 0x396, 0x451, 0x48e, 0x62e, 0x8a2, 0x8d6, 0x950, 0x95b, 0xa51, 0xb58, 0xc55, 0xcd0, 0xec2);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Minus, 0xc4, 0x124, 0x178, 0x1dd, 0x364, 0x3db, 0x579, 0x5ea, 0x77f, 0x9df, 0xa4d, 0xa91, 0xa99, 0xbd0, 0xc35, 0xd0e, 0xda5, 0xe46, 0xe61, 0xea3, 0xec7, 0xed3, 0xfb0);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Modulus, 0x4a, 0x6c, 0x81, 0x92, 0xec, 0x129, 0x12a, 0x227, 0x28f, 0x48d, 0x64e, 0x743, 0x7ac, 0x843, 0xa9c, 0xb4e, 0xcbf, 0xd07);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Multiply, 0x9d, 0xb2, 0x290, 0x3bf, 0x568, 0x640, 0x7eb, 0x91a, 0xaa4, 0xb8e, 0xc3a, 0xc56, 0xcb4, 0xe13, 0xf0d, 0xfa4);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_NotEqual, 0x172, 0x1e2, 0x211, 0x2f2, 0x390, 0x43f, 0x49c, 0x4ef, 0x625, 0x8a1, 0x8ba, 0x8d9, 0x8ec, 0x94f, 0x953, 0x96c, 0x995, 0xb73, 0xb79, 0xc2e, 0xc4e, 0xd03, 0xe4f, 0xe6d, 0xe71, 0xe98, 0xea0, 0xf9c, 0xfe1, 0xfe2);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Notify, 0x91, 0xaa, 0xdb, 0x1d0, 0x31e, 0x349, 0x350, 0x41f, 0x5e3, 0x6e3, 0x752, 0x7f1, 0x7f2, 0x80d, 0x99b, 0xa27, 0xa5f, 0xbae, 0xbea, 0xc1b, 0xc1c, 0xc24, 0xc58, 0xd41, 0xd5d, 0xfcd, 0xfe0);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Plus, 0x20, 0xed, 0x120, 0x12b, 0x205, 0x40f, 0x44e, 0x4d4, 0x4e3, 0x4fc, 0x518, 0x588, 0x7f8, 0x823, 0x84a, 0x853, 0x882, 0xa6d, 0xc12, 0xc2f, 0xc71, 0xc92, 0xcef, 0xcf5, 0xdaa, 0xeab, 0xec0, 0xee0, 0xfdd);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ProfileNamedEnd, 0x3f, 0x8b, 0x1f0, 0x35f, 0x38a, 0x3b4, 0x494, 0x502, 0x510, 0x5d5, 0x689, 0x72e, 0xa0e, 0xaf7, 0xb01, 0xc04, 0xcca, 0xdc8, 0xe52, 0xfd8);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ProfileNamedStart, 0x49, 0x8c, 0x139, 0x146, 0x1eb, 0x278, 0x2ce, 0x384, 0x3a7, 0x3a8, 0x414, 0x5d3, 0x741, 0x86f, 0x89b, 0x8c9, 0x95e, 0x963, 0x9fa, 0xbd8, 0xc78, 0xcc6, 0xd56, 0xf7e, 0xfda);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ProfileStart, 0x1ff, 0x499, 0x528, 0x6d6, 0x705, 0x71b, 0x8e5, 0x9d7, 0xbb4, 0xd6f, 0xe6f, 0xf4e);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ProfileStop, 0x1d9, 0x20b, 0x28b, 0x521, 0x56a, 0x577, 0x633, 0x700, 0x834, 0x83c, 0x846, 0x8b0, 0xa7a, 0xb20, 0xbd4, 0xbdd, 0xc02, 0xc27, 0xd32);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Return, 0x1a, 0x150, 0x1a9, 0x2b1, 0x2d9, 0x308, 0x437, 0x457, 0x4e4, 0x549, 0x590, 0x597, 0x5e2, 0x5f0, 0x6b7, 0x751, 0x7f3, 0x827, 0x866, 0x8b2, 0x8cf, 0x98c, 0x9ec, 0xc40, 0xd53, 0xd85, 0xdd3, 0xea8);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_SafeCreateLocalVariables, 0x6d, 0xe3, 0xe6, 0x1d7, 0x1db, 0x20d, 0x22a, 0x2a3, 0x2c8, 0x36e, 0x466, 0x576, 0x58c, 0x6fc, 0x714, 0x72d, 0x837, 0x861, 0xb93, 0xbb6, 0xc20, 0xd17, 0xd84, 0xe0c, 0xe17);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_SafeDecTop, 0x1b1, 0x275, 0x2b0, 0x314, 0x4ad, 0x7d2, 0x852, 0x856, 0x8e8, 0x8ff, 0x9a7, 0x9ed, 0xa02, 0xafe, 0xb75, 0xbef, 0xc22, 0xc23, 0xc7b, 0xc85, 0xd1c, 0xd43, 0xd8a, 0xe03, 0xebc, 0xf11, 0xff2);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptFunctionCall, 0x2c, 0x113, 0x3d9, 0x3e6, 0x539, 0x685, 0x778, 0x8b6, 0xb5c, 0xb84, 0xc96, 0xda6, 0xe9f);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptFunctionCallPointer, 0xae, 0x128, 0x158, 0x177, 0x1bb, 0x1f4, 0x28d, 0x366, 0x38b, 0x3aa, 0x3ad, 0x491, 0x5f1, 0x6b8, 0x76e, 0x9aa, 0xa12, 0xb13, 0xb5b, 0xde4, 0xe25, 0xf7b, 0xfc7);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptMethodCall, 0xbe, 0xdd, 0x111, 0x122, 0x175, 0x256, 0x2ee, 0x39b, 0x3b2, 0x403, 0x46a, 0x4f1, 0x593, 0x690, 0x712, 0x86b, 0x8dc, 0x972, 0x9bd, 0x9f3, 0xa64, 0xd91, 0xda7, 0xdb7, 0xe7a, 0xeac, 0xef2, 0xf69, 0xfa8);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptMethodCallPointer, 0x3a, 0x169, 0x1ae, 0x376, 0x516, 0x519, 0x56b, 0x7f7, 0x806, 0x9db, 0xcbd, 0xe11, 0xfc3);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptMethodThreadCall, 0xaf, 0xf8, 0x220, 0x2ba, 0x417, 0x55b, 0x5b0, 0x699, 0x768, 0x83d, 0x8de, 0x93c, 0xbe9, 0xc39, 0xcaf, 0xcdb, 0xd12, 0xda3, 0xebf, 0xfe6);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptMethodThreadCallEndOn, 0x1bc, 0x28a, 0x3cf, 0x511, 0x5e7, 0x613, 0x651, 0x940, 0xa32, 0xbc0, 0xc41, 0xc6a, 0xeca);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptMethodThreadCallPointer, 0x2a, 0x7a, 0x42d, 0x55e, 0x7d4, 0x840, 0x8e3, 0xaab, 0xadd, 0xc0d, 0xef0);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptMethodThreadCallPointerEndOn, 0x19d, 0x200, 0x274, 0x33d, 0x3d1, 0x3d8, 0x3f9, 0x5e4, 0x6b0, 0x6c6, 0x878, 0x899, 0x8ed, 0xa5e, 0xb34, 0xd1e, 0xeeb, 0xf5c, 0xff3);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptThreadCall, 0x7b, 0x9c, 0x1a1, 0x209, 0x44d, 0x4b7, 0x582, 0x5e0, 0x6f8, 0x876, 0x887, 0x8ce, 0x9ab, 0x9c5, 0xa04, 0xab6, 0xb2d, 0xb40, 0xb43, 0xc28, 0xceb, 0xdaf, 0xe3e, 0xe66, 0xf32, 0xfc1);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptThreadCallEndOn, 0x4fe, 0x566, 0x57a, 0x596, 0x622, 0x889, 0x8e7, 0x95f, 0xa55, 0xa87, 0xb3a, 0xbb9, 0xc69, 0xd71, 0xf03, 0xf57, 0xf5f, 0xf71, 0xf96, 0xfef);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptThreadCallPointer, 0x61, 0x9b, 0xa2, 0x13d, 0x16a, 0x254, 0x25b, 0x4b3, 0x5a6, 0x5cc, 0x6a0, 0x814, 0x82d, 0x854, 0x917, 0xb77, 0xc79, 0xc8e, 0xd47, 0xd5a, 0xd9b, 0xf1b, 0xf93);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ScriptThreadCallPointerEndOn, 0x1d, 0x32, 0xa7, 0xd5, 0x17b, 0x24a, 0x2b7, 0x400, 0x472, 0x498, 0x53f, 0x60c, 0x6c2, 0x7b6, 0x859, 0x896, 0x8dd, 0x954, 0x986, 0xa0f, 0xa3a, 0xa3d, 0xa44, 0xa46, 0xa8b, 0xd37, 0xded, 0xe73, 0xe83, 0xedb);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_SetLocalVariableCached, 0x69, 0x99, 0xb8, 0x138, 0x1ba, 0x201, 0x2ab, 0x430, 0x68b, 0x770, 0x77b, 0x7bb, 0x7c2, 0x863, 0x874, 0x8d3, 0x9f6, 0xa39, 0xa95, 0xb0f, 0xb88, 0xca5, 0xd65, 0xd9e, 0xdfb, 0xe4a, 0xf02, 0xf4a);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_SetVariableField, 0x40, 0xf1, 0x133, 0x1fa, 0x231, 0x2b8, 0x300, 0x337, 0x50c, 0x520, 0x6cc, 0x6d9, 0x6ed, 0x7e0, 0x857, 0x8cd, 0x9a9, 0xa00, 0xa66, 0xb4d, 0xbf4, 0xd68, 0xde3, 0xe15, 0xfc2);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_SetVariableFieldRef, 0x18b, 0x1f1, 0x273, 0x2ed, 0x33b, 0x36b, 0x4f0, 0x773, 0x96b, 0xa7b, 0xc5c, 0xd50, 0xf8c);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ShiftLeft, 0xfc, 0x17c, 0x24f, 0x398, 0x3b8, 0x4ac, 0x5c2, 0x5f9, 0x724, 0x7b4, 0x7c0, 0x808, 0x93f, 0x989, 0x9b6, 0x9c6, 0xc06, 0xcd4, 0xd14, 0xf79);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_ShiftRight, 0x57, 0x1d2, 0x248, 0x30c, 0x380, 0x392, 0x3e7, 0x412, 0x446, 0x44a, 0x5bf, 0x5c3, 0x5c4, 0x64d, 0x740, 0x7b0, 0x7d3, 0x8a5, 0x90a, 0x952, 0x97a, 0xa17, 0xa52, 0xb6b, 0xbca, 0xd01, 0xd15, 0xd61, 0xdc6);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_SizeOf, 0xb1, 0x14b, 0x1cf, 0x222, 0x238, 0x2fc, 0x4e6, 0x85a, 0xb19, 0xc37, 0xd33, 0xdb6, 0xdef, 0xf74, 0xfb3);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_SuperEqual, 0x5c, 0xa5, 0x176, 0x237, 0x2e4, 0x2e5, 0x3d3, 0x4b9, 0x693, 0x818, 0x862, 0xa26, 0xaf9, 0xb3e, 0xbdc, 0xc44, 0xc8a, 0xca6, 0xd06, 0xdf7, 0xe74, 0xf3c);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_SuperNotEqual, 0x46, 0x322, 0x49f, 0x4b0, 0x561, 0x5d4, 0x66e, 0x781, 0x9f1, 0xa06, 0xa21, 0xa8f, 0xaa7, 0xc52, 0xdd4, 0xe27, 0xe3c, 0xea9, 0xf8e);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Switch, 0xac, 0x13c, 0x151, 0x1c0, 0x203, 0x26a, 0x3fa, 0x409, 0x427, 0x45b, 0x4b5, 0x6be, 0x6d5, 0x703, 0x7bf, 0x9bb, 0xcd5, 0xd4a, 0xdc7);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Vector, 0x183, 0x1a3, 0x263, 0x2e6, 0x2f0, 0x32c, 0x455, 0x47b, 0x526, 0x54f, 0x5a8, 0x5ba, 0x8cc, 0x918, 0xa19, 0xba0, 0xbd6, 0xc0a, 0xce6, 0xef9);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_VectorConstant, 0x171, 0x271, 0x29f, 0x50a, 0x6d4, 0x745, 0x822, 0x8ac, 0x994, 0xd97, 0xf55, 0xf67, 0xff0);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_VectorScale, 0x1d4, 0x3cb, 0x639, 0x6b3, 0x807, 0xa18, 0xae1, 0xcf0, 0xdcc, 0xeda, 0xeff);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Wait, 0x144, 0x3eb, 0x6a3, 0x6dd, 0x732, 0x83a, 0x98a, 0xdf9, 0xe85, 0xe89, 0xfba);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_WaitFrame, 0x90, 0x1a2, 0x1c1, 0x345, 0x644, 0x6f6, 0x949, 0xb2b, 0xd94, 0xe8f);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_WaitTill, 0x54, 0x137, 0x43d, 0x5b6, 0x636, 0x661, 0x7ee, 0x971, 0xb8b, 0xb8d, 0xc31, 0xc3f, 0xd3b);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_WaitTillFrameEnd, 0x71, 0xa3, 0x1ad, 0x1ee, 0x24b, 0x3b0, 0x3fe, 0x488, 0x4a5, 0x692, 0x6c8, 0x7e2, 0xa0d, 0xc17, 0xc38, 0xdae, 0xfe3);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_WaitTillMatch, 0x31c, 0x544, 0x734, 0x8fd, 0xa78, 0xb96, 0xd11, 0xda8, 0xdcd, 0xe58, 0xeb4, 0xeea, 0xf46);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_WaitTillMatchTimeout, 0x2f1, 0x30e, 0x33f, 0x36a, 0x4de, 0x55c, 0x7e5, 0xb17, 0xc80, 0xe02, 0xe26, 0xec8);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_WaittillTimeout, 0x1e3, 0x346, 0x4fb, 0x5bb, 0x5fe, 0x60a, 0x66b, 0x6a4, 0x71e, 0x75c, 0x7aa, 0x7b2, 0x7de, 0x7f5, 0x9d3, 0xa10, 0xabc, 0xbd7, 0xdf0, 0xea4, 0xf05);

			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_DecLocalVariableCached, 0xa8, 0x110, 0x17d, 0x1a7, 0x26e, 0x2db, 0x2e2, 0x35d, 0x3ef, 0x421, 0x428, 0x51c, 0x587, 0x60e, 0x621, 0x6b1, 0x73b, 0x78f, 0x798, 0x82c, 0x9a4, 0xb3f, 0xbd9, 0xc72, 0xc7e, 0xe35, 0xe75, 0xeb8);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_EndOnCallbackParam, 0x77, 0x214, 0x2bc, 0x2c9, 0x2d5, 0x36c, 0x4eb, 0x501, 0x775, 0x826, 0x8aa, 0x91b, 0xad1, 0xcdd, 0xcf1, 0xd08, 0xdfa, 0xfcc);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_EvalArrayCached, 0x276, 0x40c, 0x45c, 0x4bd, 0x5b7, 0x767, 0x8b5, 0x974, 0x9d2, 0xb62, 0xd23, 0xd9f, 0xdcb, 0xdcf, 0xde0, 0xf58, 0xfe4);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_EvalFieldVariableFromGlobalObject, 0x23b, 0x583, 0x584, 0x5b3, 0x5e8, 0x716, 0x7ec, 0x966, 0xa13, 0xa90, 0xd29, 0xd2a, 0xe99, 0xf6a, 0xf7c);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_EvalFieldVariableFromObjectCached, 0x26, 0xde, 0x316, 0x444, 0x514, 0x5ce, 0x73a, 0x75a, 0x799, 0x8bd, 0x9a3, 0xb2f, 0xd04, 0xf8b, 0xfdc);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_EvalFieldVariableFromObjectFromRef, 0x1c3, 0x1c9, 0x269, 0x38f, 0x4cc, 0x4d6, 0x5cd, 0x68e, 0x6f7, 0x766, 0x788, 0x8fc, 0x9e9, 0xd26, 0xe28, 0xf26);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_EvalLocalVariableCachedDouble, 0x31, 0x73, 0x152, 0x196, 0x1bd, 0x2a9, 0x34e, 0x418, 0x442, 0x5af, 0x5b1, 0x757, 0x761, 0x7cd, 0x914, 0x98d, 0x9c3, 0x9d6, 0x9dd, 0xb9b, 0xcee, 0xd48, 0xf73);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_GetVarRef, 0x42, 0x79, 0x167, 0x179, 0x1cc, 0x212, 0x246, 0x438, 0x468, 0x5be, 0x60d, 0x66c, 0x736, 0x77d, 0x833, 0x9c2, 0xb54, 0xb7d, 0xbf9, 0xc3e, 0xdda, 0xdfc, 0xe59, 0xe69, 0xef3, 0xf6b, 0xf7a);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_IncLocalVariableCached, 0xe8, 0x2a6, 0x2d6, 0x32a, 0x5aa, 0x5d8, 0x6e8, 0x73c, 0x776, 0x7e6, 0x831, 0x933, 0x955, 0x9ba, 0xa0b, 0xad8, 0xb37, 0xdb9, 0xe84, 0xfe9);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_IteratorKey, 0x4d, 0x94, 0x123, 0x145, 0x281, 0x3de, 0x48f, 0x563, 0x5d0, 0x63b, 0x687, 0x7ba, 0x7d9, 0x8f6, 0x9a6, 0x9dc, 0xa6f, 0xabb, 0xb9f, 0xbe5, 0xc2b, 0xc61, 0xdba, 0xe2a, 0xef7, 0xf06, 0xf64, 0xf65);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_IteratorNext, 0x1de, 0x20a, 0x21f, 0x306, 0x379, 0x38c, 0x39c, 0x57f, 0x5a7, 0x5e1, 0x895, 0xa07, 0xa08, 0xade, 0xb0d, 0xbc6, 0xbe8, 0xc0f, 0xd2b, 0xeb1, 0xefd, 0xf12, 0xf4b, 0xfbc);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_IteratorVal, 0x1c, 0x82, 0x141, 0x228, 0x326, 0x34c, 0x5a3, 0x6b5, 0x70d, 0x877, 0xb92, 0xbc4, 0xe04);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_SetFieldVariableFromObjectFromRef, 0x24d, 0x377, 0x4da, 0x529, 0x552, 0x5f5, 0x648, 0x677, 0x803, 0x85d, 0x869, 0x8c5, 0x8d4, 0x91e, 0xa0a, 0xa97, 0xb64, 0xc82, 0xce7, 0xd70, 0xdee, 0xe4e, 0xe51, 0xebe, 0xfa0);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T9_SetVariableFieldFromEvalArrayRef, 0x28c, 0x3df, 0x439, 0x503, 0x595, 0x7dd, 0x8b3, 0x8b4, 0x938, 0x9b2, 0x9b5, 0xb04, 0xb67, 0xbb8, 0xc47, 0xde6, 0xef4, 0xf0b, 0xf1f, 0xf2c, 0xfee);

			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_T8C_GetLazyFunction, 0x13);

			// unused?
			// 084 : 1bbd040 -> {0x84, 0x257, 0x2ac, 0x2e0, 0x328, 0x36d, 0x44c, 0x45a, 0x48b, 0x4c8, 0x551, 0x684, 0x73e, 0x7be, 0x80e, 0x872, 0x941, 0x9ac, 0x9e0, 0xa8a, 0xaec, 0xaed, 0xb5e, 0xc9d, 0xcc1, 0xe47, 0xe79, 0xeb3, 0xf78}
			// 1e1 : 1bb67b0 -> {0x1e1, 0x296, 0x2dd, 0x3b3, 0x3c7, 0x42a, 0x678, 0x6ad, 0x74f, 0x850, 0x8ab, 0x937, 0x979, 0x982, 0x9b3, 0xa2b, 0xa71, 0xb23, 0xb90, 0xbc1, 0xd49, 0xd87, 0xe0f, 0xeb9, 0xf23, 0xf88}

			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknown10e, 0x62, 0xbf, 0x1a0, 0x30b, 0x312, 0x48a, 0x4c6, 0x4dc, 0x51e, 0x5f6, 0x62d, 0x73f, 0x753, 0x771, 0x99e, 0xa9d, 0xb52, 0xb63, 0xe90, 0xe9d);
			RegisterOpCode(VM_T9, PLATFORM_PC, OPCODE_Unknown126, 0xa9, 0x338, 0x3a0, 0x413, 0x4ed, 0x65a, 0x6de, 0x6e0, 0x76f, 0x7a0, 0x858, 0x919, 0xb57, 0xc3d, 0xd2d, 0xe2e, 0xfa2);

			RegisterVMPlatform(VM_T9, PLATFORM_PLAYSTATION);

			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Unknown0, 0x0);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Unknown1, 0x1);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Unknown2, 0x2);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Unknown3, 0x3);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Unknown4, 0x4);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Unknown5, 0x5);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Unknown6, 0x6);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Unknown7, 0x7);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_EvalLocalVariableCachedDebug, 0x8);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_EvalLocalVariableRefCachedDebug, 0x9);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Unknowna, 0xa);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Unknownb, 0xb);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_ClearParams, 0xc);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_CheckClearParams, 0xd);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_PreScriptCall, 0xe);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_CallBuiltinFunction, 0xf);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_CallBuiltinMethod, 0x10);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_End, 0x11);

			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x13, 0x14, 0x17, 0x20, 0x21, 0x39, 0x3c, 0x3d, 0x41, 0x44, 0x45, 0x4a, 0x4b, 0x58, 0x59, 0x5e, 0x5f, 0x66, 0x73, 0x77, 0x7a, 0x82, 0x85, 0x8f, 0x90, 0x92, 0x93, 0x97, 0x98, 0x9c, 0x9d, 0x9e, 0x9f, 0xa3, 0xa6, 0xaa, 0xad, 0xb1, 0xb2, 0xb5, 0xb8, 0xba, 0xbc, 0xbe, 0xc1, 0xc6, 0xcb, 0xcd, 0xce, 0xcf, 0xd0, 0xd5, 0xd9, 0xda, 0xdb, 0xdf, 0xe2, 0xe8, 0xec, 0xed, 0xf6, 0xfa, 0xff, 0x104, 0x106, 0x107, 0x10a, 0x10b, 0x10d, 0x10e, 0x10f, 0x114, 0x116, 0x118, 0x11a, 0x11c, 0x11d, 0x124, 0x125, 0x126, 0x129, 0x12a, 0x12e, 0x134, 0x137, 0x139, 0x13c, 0x13e, 0x13f, 0x143, 0x147, 0x14a, 0x154, 0x15b, 0x15c, 0x15d, 0x160, 0x167, 0x169);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x16a, 0x16d, 0x16f, 0x172, 0x174, 0x175, 0x176, 0x17c, 0x17e, 0x181, 0x189, 0x18f, 0x190, 0x192, 0x193, 0x19a, 0x19b, 0x19c, 0x19e, 0x19f, 0x1a2, 0x1a3, 0x1a6, 0x1a7, 0x1a9, 0x1ad, 0x1af, 0x1b1, 0x1ba, 0x1bb, 0x1bf, 0x1c4, 0x1c6, 0x1cf, 0x1d0, 0x1d5, 0x1d9, 0x1de, 0x1e1, 0x1e5, 0x1e7, 0x1e9, 0x1ea, 0x1eb, 0x1ee, 0x1f1, 0x1f3, 0x1f5, 0x1f7, 0x1f8, 0x1fa, 0x1fc, 0x1fd, 0x201, 0x202, 0x208, 0x209, 0x20c, 0x20e, 0x216, 0x219, 0x21a, 0x21b, 0x21d, 0x220, 0x222, 0x229, 0x22c, 0x22e, 0x230, 0x231, 0x234, 0x235, 0x238, 0x23c, 0x23f, 0x240, 0x247, 0x248, 0x24a, 0x24f, 0x250, 0x251, 0x256, 0x25b, 0x25d, 0x265, 0x267, 0x268, 0x26c);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x275, 0x27f, 0x283, 0x286, 0x287, 0x289, 0x28a, 0x28b, 0x28c, 0x28e, 0x28f, 0x293, 0x296, 0x298, 0x29b, 0x29f, 0x2a5, 0x2a9, 0x2ae, 0x2b5, 0x2b8, 0x2b9, 0x2be, 0x2bf, 0x2c5, 0x2c9, 0x2cb, 0x2cd, 0x2ce, 0x2d3, 0x2db, 0x2e4, 0x2e6, 0x2e9, 0x2f1, 0x2f2, 0x2f3, 0x2f5, 0x2f8, 0x2fc, 0x300, 0x301, 0x302, 0x307, 0x309, 0x30b, 0x30c, 0x30d, 0x310, 0x311, 0x317, 0x319, 0x31d, 0x31e, 0x326, 0x328, 0x329, 0x32a, 0x32c, 0x32e, 0x331, 0x335, 0x33d, 0x340, 0x344, 0x348, 0x349, 0x34d, 0x34f, 0x350, 0x354, 0x356, 0x357, 0x359, 0x361, 0x365, 0x367, 0x36f, 0x370, 0x374, 0x377, 0x37e, 0x382, 0x384, 0x386, 0x38a, 0x38d, 0x38f, 0x394, 0x395);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x397, 0x39e, 0x3a4, 0x3a7, 0x3a8, 0x3ac, 0x3ae, 0x3b5, 0x3b9, 0x3bb, 0x3bc, 0x3bf, 0x3c0, 0x3c1, 0x3c6, 0x3c9, 0x3cc, 0x3ce, 0x3cf, 0x3d1, 0x3d2, 0x3d4, 0x3d7, 0x3d9, 0x3e1, 0x3e3, 0x3e9, 0x3ea, 0x3ec, 0x3ed, 0x3f0, 0x3f7, 0x3fa, 0x3fb, 0x3ff, 0x406, 0x408, 0x40d, 0x413, 0x416, 0x417, 0x41c, 0x423, 0x426, 0x428, 0x42c, 0x42d, 0x430, 0x432, 0x433, 0x435, 0x437, 0x43b, 0x43e, 0x441, 0x442, 0x445, 0x446, 0x449, 0x44c, 0x44f, 0x450, 0x451, 0x456, 0x45f, 0x460, 0x462, 0x463, 0x464, 0x465, 0x468, 0x469, 0x46c, 0x46e, 0x46f, 0x470, 0x472, 0x476, 0x479, 0x47d, 0x47f, 0x486, 0x487, 0x48d, 0x493, 0x494, 0x496, 0x498, 0x49c, 0x4a0);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x4a3, 0x4a7, 0x4ad, 0x4af, 0x4b1, 0x4b3, 0x4b4, 0x4b5, 0x4b6, 0x4ba, 0x4bc, 0x4bd, 0x4be, 0x4c1, 0x4c2, 0x4c7, 0x4ca, 0x4cf, 0x4d1, 0x4d3, 0x4d5, 0x4da, 0x4dc, 0x4df, 0x4e4, 0x4e5, 0x4e7, 0x4eb, 0x4ef, 0x4f6, 0x4fe, 0x501, 0x502, 0x503, 0x504, 0x50a, 0x50f, 0x512, 0x513, 0x514, 0x515, 0x517, 0x51b, 0x520, 0x522, 0x526, 0x528, 0x52b, 0x52e, 0x52f, 0x533, 0x534, 0x536, 0x537, 0x544, 0x546, 0x547, 0x548, 0x54a, 0x54d, 0x54f, 0x55a, 0x55f, 0x562, 0x564, 0x566, 0x567, 0x569, 0x56a, 0x56d, 0x572, 0x579, 0x57e, 0x57f, 0x582, 0x585, 0x588, 0x58f, 0x590, 0x592, 0x59d, 0x5a1, 0x5a2, 0x5a5, 0x5a6, 0x5a9, 0x5ad, 0x5ae, 0x5af, 0x5b5);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x5b6, 0x5b8, 0x5b9, 0x5bb, 0x5bc, 0x5bd, 0x5be, 0x5bf, 0x5c0, 0x5c3, 0x5c4, 0x5ce, 0x5d0, 0x5d6, 0x5d8, 0x5df, 0x5e4, 0x5e6, 0x5e9, 0x5ec, 0x5f6, 0x5f8, 0x5f9, 0x5fc, 0x5fe, 0x600, 0x603, 0x60b, 0x60c, 0x60e, 0x610, 0x612, 0x614, 0x619, 0x61e, 0x624, 0x62b, 0x62f, 0x632, 0x633, 0x637, 0x638, 0x63b, 0x63c, 0x63d, 0x63f, 0x642, 0x644, 0x646, 0x64a, 0x64e, 0x653, 0x655, 0x659, 0x65c, 0x65f, 0x66a, 0x66c, 0x66f, 0x674, 0x675, 0x677, 0x678, 0x67f, 0x680, 0x683, 0x688, 0x68b, 0x68e, 0x68f, 0x699, 0x69e, 0x69f, 0x6a2, 0x6a5, 0x6ab, 0x6b1, 0x6b4, 0x6b7, 0x6ba, 0x6be, 0x6c0, 0x6cc, 0x6cf, 0x6d0, 0x6d2, 0x6d3, 0x6d8, 0x6d9, 0x6e1);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x6e3, 0x6eb, 0x6ef, 0x6f4, 0x6f6, 0x6f7, 0x6f8, 0x6fc, 0x6fe, 0x702, 0x709, 0x70d, 0x713, 0x714, 0x716, 0x719, 0x71a, 0x721, 0x722, 0x724, 0x728, 0x731, 0x733, 0x734, 0x736, 0x737, 0x73a, 0x73b, 0x73c, 0x73e, 0x741, 0x747, 0x74b, 0x74f, 0x757, 0x75c, 0x75e, 0x763, 0x765, 0x767, 0x76c, 0x76d, 0x76e, 0x770, 0x772, 0x779, 0x77a, 0x77e, 0x780, 0x78c, 0x78e, 0x790, 0x797, 0x799, 0x79c, 0x7a1, 0x7a3, 0x7a5, 0x7a8, 0x7aa, 0x7ad, 0x7ae, 0x7b1, 0x7b2, 0x7b3, 0x7bc, 0x7c0, 0x7c2, 0x7ca, 0x7cb, 0x7cc, 0x7cd, 0x7db, 0x7dd, 0x7df, 0x7e1, 0x7e4, 0x7e6, 0x7e7, 0x7ea, 0x7eb, 0x7ed, 0x7ee, 0x7f0, 0x7f3, 0x7fd, 0x7fe, 0x804, 0x808, 0x809);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x80f, 0x814, 0x817, 0x81f, 0x829, 0x82d, 0x832, 0x835, 0x839, 0x83d, 0x842, 0x846, 0x848, 0x84a, 0x84b, 0x84d, 0x84e, 0x854, 0x855, 0x856, 0x85a, 0x868, 0x86d, 0x86f, 0x875, 0x879, 0x87f, 0x882, 0x885, 0x88b, 0x88d, 0x890, 0x894, 0x895, 0x896, 0x898, 0x89c, 0x89e, 0x8a3, 0x8a5, 0x8aa, 0x8ae, 0x8b1, 0x8b5, 0x8b7, 0x8b9, 0x8bb, 0x8be, 0x8c0, 0x8c3, 0x8c7, 0x8c9, 0x8ca, 0x8cf, 0x8d1, 0x8d4, 0x8db, 0x8dc, 0x8de, 0x8e0, 0x8e1, 0x8e8, 0x8ea, 0x8ec, 0x8f0, 0x8f4, 0x8f5, 0x8f8, 0x8fc, 0x901, 0x905, 0x906, 0x907, 0x908, 0x90b, 0x911, 0x912, 0x913, 0x916, 0x919, 0x91f, 0x927, 0x929, 0x934, 0x939, 0x93e, 0x942, 0x945, 0x948, 0x94a);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0x94b, 0x94c, 0x94d, 0x94e, 0x953, 0x95c, 0x95e, 0x95f, 0x960, 0x962, 0x965, 0x966, 0x975, 0x976, 0x977, 0x978, 0x97b, 0x97e, 0x97f, 0x983, 0x984, 0x986, 0x98e, 0x990, 0x993, 0x997, 0x998, 0x999, 0x99b, 0x99c, 0x9a0, 0x9a2, 0x9a6, 0x9aa, 0x9ab, 0x9b1, 0x9b4, 0x9b6, 0x9bd, 0x9bf, 0x9c0, 0x9c3, 0x9c4, 0x9c5, 0x9c6, 0x9ca, 0x9ce, 0x9d8, 0x9da, 0x9e0, 0x9e1, 0x9e4, 0x9e8, 0x9f0, 0x9f3, 0x9f7, 0x9f8, 0x9f9, 0x9fa, 0x9fd, 0x9ff, 0xa00, 0xa03, 0xa08, 0xa09, 0xa0a, 0xa0c, 0xa0f, 0xa13, 0xa14, 0xa15, 0xa1b, 0xa22, 0xa23, 0xa2b, 0xa2c, 0xa2d, 0xa31, 0xa32, 0xa33, 0xa37, 0xa38, 0xa3c, 0xa44, 0xa45, 0xa47, 0xa49, 0xa4e, 0xa50, 0xa58);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xa5a, 0xa5f, 0xa64, 0xa6a, 0xa6b, 0xa70, 0xa78, 0xa79, 0xa7b, 0xa7c, 0xa80, 0xa81, 0xa82, 0xa83, 0xa85, 0xa87, 0xa8a, 0xa8b, 0xa8c, 0xa8f, 0xa94, 0xa95, 0xa97, 0xa99, 0xa9c, 0xa9d, 0xaa0, 0xaa1, 0xaa2, 0xaa4, 0xaa5, 0xaa6, 0xaa7, 0xaaa, 0xaaf, 0xab3, 0xabc, 0xac0, 0xac2, 0xac4, 0xac8, 0xad3, 0xad4, 0xad6, 0xad7, 0xadc, 0xade, 0xae0, 0xae3, 0xae6, 0xae7, 0xae9, 0xaee, 0xaef, 0xaf1, 0xaf2, 0xaf3, 0xaf6, 0xafe, 0xb01, 0xb05, 0xb06, 0xb08, 0xb09, 0xb0b, 0xb0c, 0xb0e, 0xb12, 0xb13, 0xb17, 0xb1a, 0xb1d, 0xb23, 0xb24, 0xb27, 0xb2a, 0xb2d, 0xb2f, 0xb32, 0xb34, 0xb39, 0xb3b, 0xb3d, 0xb43, 0xb46, 0xb48, 0xb4c, 0xb4d, 0xb4e, 0xb58);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xb5a, 0xb5e, 0xb60, 0xb69, 0xb6f, 0xb70, 0xb71, 0xb73, 0xb7c, 0xb81, 0xb85, 0xb88, 0xb8c, 0xb94, 0xb98, 0xb99, 0xb9a, 0xb9b, 0xb9c, 0xb9d, 0xb9e, 0xba2, 0xba4, 0xba8, 0xbad, 0xbaf, 0xbb1, 0xbb8, 0xbc2, 0xbc5, 0xbc7, 0xbce, 0xbcf, 0xbd3, 0xbd6, 0xbd7, 0xbd9, 0xbda, 0xbdb, 0xbe2, 0xbe5, 0xbe8, 0xbe9, 0xbea, 0xbef, 0xbf1, 0xbf3, 0xbf7, 0xbfd, 0xbff, 0xc01, 0xc04, 0xc08, 0xc0e, 0xc0f, 0xc10, 0xc11, 0xc14, 0xc17, 0xc1b, 0xc1f, 0xc20, 0xc27, 0xc28, 0xc29, 0xc2a, 0xc2b, 0xc2e, 0xc38, 0xc3e, 0xc3f, 0xc42, 0xc45, 0xc51, 0xc53, 0xc54, 0xc59, 0xc5a, 0xc5b, 0xc5e, 0xc5f, 0xc64, 0xc6b, 0xc6c, 0xc70, 0xc74, 0xc77, 0xc78, 0xc7b, 0xc80);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xc81, 0xc83, 0xc89, 0xc8d, 0xc93, 0xc99, 0xca0, 0xca6, 0xca8, 0xca9, 0xcaa, 0xcad, 0xcb1, 0xcb4, 0xcb7, 0xcbd, 0xcbe, 0xcc9, 0xcca, 0xcd0, 0xcd1, 0xcd3, 0xcd5, 0xcd9, 0xcda, 0xcdd, 0xcdf, 0xce1, 0xce4, 0xce5, 0xce6, 0xce8, 0xcef, 0xcf0, 0xcf2, 0xcf7, 0xcf9, 0xcfa, 0xcfd, 0xcfe, 0xd00, 0xd03, 0xd05, 0xd07, 0xd0c, 0xd0d, 0xd0e, 0xd13, 0xd16, 0xd1d, 0xd1f, 0xd23, 0xd26, 0xd27, 0xd29, 0xd2a, 0xd2b, 0xd2e, 0xd30, 0xd34, 0xd35, 0xd3a, 0xd3b, 0xd42, 0xd46, 0xd49, 0xd4d, 0xd4e, 0xd4f, 0xd50, 0xd52, 0xd58, 0xd5a, 0xd5b, 0xd5d, 0xd60, 0xd61, 0xd62, 0xd65, 0xd68, 0xd6a, 0xd6b, 0xd6e, 0xd73, 0xd78, 0xd79, 0xd7a, 0xd7c, 0xd7e, 0xd84);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xd85, 0xd86, 0xd88, 0xd8b, 0xd90, 0xd94, 0xd95, 0xd9a, 0xd9c, 0xda0, 0xda3, 0xdab, 0xdb1, 0xdb2, 0xdb5, 0xdbb, 0xdbc, 0xdbd, 0xdbf, 0xdc2, 0xdc3, 0xdc6, 0xdc7, 0xdc9, 0xdca, 0xdcc, 0xdd1, 0xdd4, 0xdda, 0xddb, 0xdde, 0xde0, 0xde3, 0xde8, 0xde9, 0xdea, 0xdec, 0xded, 0xdee, 0xdf2, 0xdf5, 0xdf7, 0xdf8, 0xdfa, 0xdff, 0xe07, 0xe0c, 0xe0f, 0xe11, 0xe13, 0xe14, 0xe17, 0xe1b, 0xe22, 0xe25, 0xe28, 0xe36, 0xe39, 0xe3e, 0xe3f, 0xe42, 0xe45, 0xe47, 0xe48, 0xe4f, 0xe61, 0xe63, 0xe66, 0xe68, 0xe69, 0xe6a, 0xe74, 0xe75, 0xe77, 0xe78, 0xe79, 0xe81, 0xe86, 0xe89, 0xe8a, 0xe8c, 0xe94, 0xe97, 0xe99, 0xe9a, 0xe9e, 0xea0, 0xea5, 0xea6, 0xea7);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xea8, 0xeaf, 0xeb6, 0xebc, 0xebd, 0xec1, 0xec2, 0xec8, 0xeca, 0xece, 0xed2, 0xed3, 0xed5, 0xede, 0xedf, 0xee2, 0xee3, 0xee5, 0xeeb, 0xef2, 0xefc, 0xf03, 0xf04, 0xf05, 0xf08, 0xf09, 0xf0a, 0xf0d, 0xf11, 0xf12, 0xf16, 0xf19, 0xf1a, 0xf1c, 0xf1e, 0xf25, 0xf29, 0xf2a, 0xf2d, 0xf2e, 0xf30, 0xf31, 0xf32, 0xf33, 0xf38, 0xf3b, 0xf44, 0xf45, 0xf46, 0xf47, 0xf4a, 0xf5a, 0xf5e, 0xf63, 0xf64, 0xf66, 0xf68, 0xf6d, 0xf6e, 0xf6f, 0xf74, 0xf7a, 0xf7f, 0xf80, 0xf81, 0xf85, 0xf86, 0xf89, 0xf93, 0xf9a, 0xf9d, 0xf9f, 0xfa9, 0xfaa, 0xfac, 0xfb0, 0xfb3, 0xfb5, 0xfbd, 0xfbe, 0xfc3, 0xfc7, 0xfca, 0xfcb, 0xfd1, 0xfd2, 0xfd3, 0xfda, 0xfde, 0xfe5);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Nop, 0xfe7, 0xfeb, 0xfef, 0xff2, 0xff4, 0xff8, 0xffd);

			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_GetZero, 0x34, 0x5b1, 0x5ff, 0x74d, 0x985, 0xa26, 0xa7e, 0xc00, 0xdb6, 0xe73, 0xf17);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_Return, 0x16, 0x30, 0xc0, 0xfe, 0x183, 0x1b7, 0x1ce, 0x2f6, 0x3bd, 0x6e8, 0x6ee, 0xad1, 0xb15, 0xcfc, 0xeb3, 0xfce);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_SafeCreateLocalVariables, 0x3b, 0x179, 0x306, 0x314, 0x387, 0x3b1, 0x52a, 0x5c5, 0x5c6, 0x5d4, 0x718, 0x7fa, 0x803, 0x9de, 0xa0d, 0xa17, 0xa35, 0xa63, 0xc63, 0xc8a, 0xd31, 0xd67, 0xe05, 0xe83, 0xebf, 0xfcd);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_GetString, 0x32, 0x9a, 0x22b, 0x27d, 0x436, 0x676, 0x729, 0x9ac, 0xaf0, 0xb57, 0xb87, 0xe19, 0xe2a, 0xf42);
			RegisterOpCode(VM_T9, PLATFORM_PLAYSTATION, OPCODE_GetByte, 0xe9, 0x18b, 0x2e2, 0x30a, 0x5e8, 0x654, 0x67c, 0x6bd, 0x876, 0x884, 0x90e, 0xab0, 0xacc, 0xb75, 0xe65, 0xe6c, 0xe98, 0xee1, 0xef3, 0xf53);
			
			// stuff some people don't want public (as a bo4 pc/xbox player idc, but whatever)
	#ifdef PS4_INCLUDES
			ps4::opcodes::RegisterPS4OpCodes();
	#endif
			RegisterVM(VM_MW23, "Call of Duty: Modern Warfare III", "jup", VmFlags::VMF_HASH64 | VmFlags::VMF_NO_VERSION | VmFlags::VMF_NO_PARAM_FLAGS | VmFlags::VMF_FULL_FILE_NAMESPACE | VmFlags::VMF_HASH_IW | VmFlags::VMF_CALL_NO_PARAMS | VmFlags::VMF_IW_CALLS);
			RegisterVMPlatform(VM_MW23, PLATFORM_PC);
			RegisterVMGlobalVariable(VM_MW23, "level", OPCODE_IW_GetLevel);
			RegisterVMGlobalVariable(VM_MW23, "game", OPCODE_IW_GetGame);
			RegisterVMGlobalVariable(VM_MW23, "anim", OPCODE_IW_GetAnim);
			RegisterVMOperatorFunction(VM_MW23, "waittill", "<caller> waittill(event, var*)", OPCODE_IW_SingleWaitTill, VPFD_SELF_PARAM | VPFD_UNPACK, 1);
			RegisterVMOperatorFunction(VM_MW23, "isdefined", "isdefined(object) -> bool", OPCODE_IsDefined, VPFD_RETURN_VALUE, 1, 1);
			RegisterVMOperatorFunction(VM_MW23, "notify", "<caller> notify(event, param*)", OPCODE_IW_Notify, VPFD_SELF_PARAM | VPFD_USE_PRE_SCRIPT_CALL, 1);
			RegisterVMOperatorFunction(VM_MW23, "endon", "<caller> endon(event)", OPCODE_IW_SingleEndon, VPFD_SELF_PARAM, 1, 1);
			RegisterVMOperatorFunction(VM_MW23, "wait", "wait(time)", OPCODE_Wait, VPFD_NONE, 1, 1);
			RegisterVMOperatorFunction(VM_MW23, "waitframe", "waitframe()", OPCODE_IW_WaitFrame, VPFD_NONE, 0, 0);
			RegisterVMOperatorFunction(VM_MW23, "getthread", "getthread() -> thread", OPCODE_IW_GetThread, VPFD_RETURN_VALUE, 0, 0);
			RegisterVMOperatorFunction(VM_MW23, "istrue", "istrue(object) -> bool", OPCODE_IW_IsTrue, VPFD_RETURN_VALUE, 1, 1);
			RegisterVMHashOPCode(VM_MW23, '#', OPCODE_GetHash, 8, [](const char* str) { return hash::Hash64Pattern(str); });
			RegisterVMHashOPCode(VM_MW23, '@', OPCODE_IW_GetDVarHash, 8, [](const char* str) { return hash::HashPattern(str); });
			RegisterVMHashOPCode(VM_MW23, '%', OPCODE_IW_GetUnk9, 8, [](const char* str) { return hash::Hash64Pattern(str, 0x47F5817A5EF961BA); });
			RegisterVMHashOPCode(VM_MW23, 't', OPCODE_IW_GetUnkb, 4, [](const char* str) { return hash::Hash64Pattern(str, 0x811C9DC5, 0x1000193) & 0xFFFFFFFF; });
			RegisterDevCall(VM_MW23, "assert", "assertmsg", "assertex", "println");

			RegisterVM(VM_MW23B, "Call of Duty: Modern Warfare III (8B)", "jup8b", VmFlags::VMF_HASH64 | VmFlags::VMF_NO_VERSION | VmFlags::VMF_NO_PARAM_FLAGS | VmFlags::VMF_FULL_FILE_NAMESPACE | VmFlags::VMF_HASH_IW | VmFlags::VMF_CALL_NO_PARAMS | VmFlags::VMF_IW_CALLS);
			RegisterVMPlatform(VM_MW23B, PLATFORM_PC);
			RegisterVMGlobalVariable(VM_MW23B, "level", OPCODE_IW_GetLevel);
			RegisterVMGlobalVariable(VM_MW23B, "game", OPCODE_IW_GetGame);
			RegisterVMGlobalVariable(VM_MW23B, "anim", OPCODE_IW_GetAnim);
			RegisterVMOperatorFunction(VM_MW23B, "waittill", "<caller> waittill(event, var*)", OPCODE_IW_SingleWaitTill, VPFD_SELF_PARAM | VPFD_UNPACK, 1);
			RegisterVMOperatorFunction(VM_MW23B, "isdefined", "isdefined(object) -> bool", OPCODE_IsDefined, VPFD_RETURN_VALUE, 1, 1);
			RegisterVMOperatorFunction(VM_MW23B, "notify", "<caller> notify(event, param*)", OPCODE_IW_Notify, VPFD_SELF_PARAM | VPFD_USE_PRE_SCRIPT_CALL, 1);
			RegisterVMOperatorFunction(VM_MW23B, "endon", "<caller> endon(event)", OPCODE_IW_SingleEndon, VPFD_SELF_PARAM, 1, 1);
			RegisterVMOperatorFunction(VM_MW23B, "wait", "wait(time)", OPCODE_Wait, VPFD_NONE, 1, 1);
			RegisterVMOperatorFunction(VM_MW23B, "waitframe", "waitframe()", OPCODE_IW_WaitFrame, VPFD_NONE, 0, 0);
			RegisterVMOperatorFunction(VM_MW23B, "getthread", "getthread() -> thread", OPCODE_IW_GetThread, VPFD_RETURN_VALUE, 0, 0);
			RegisterVMOperatorFunction(VM_MW23B, "istrue", "istrue(object) -> bool", OPCODE_IW_IsTrue, VPFD_RETURN_VALUE, 1, 1);
			RegisterVMHashOPCode(VM_MW23B, '#', OPCODE_GetHash, 8, [](const char* str) { return hash::Hash64Pattern(str); });
			RegisterVMHashOPCode(VM_MW23B, '@', OPCODE_IW_GetDVarHash, 8, [](const char* str) { return hash::HashPattern(str); });
			RegisterVMHashOPCode(VM_MW23B, '%', OPCODE_IW_GetUnk9, 8, [](const char* str) { return hash::Hash64Pattern(str, 0x47F5817A5EF961BA); });
			RegisterVMHashOPCode(VM_MW23B, 't', OPCODE_IW_GetUnkb, 4, [](const char* str) { return hash::Hash64Pattern(str, 0x811C9DC5, 0x1000193) & 0xFFFFFFFF; });
			RegisterDevCall(VM_MW23B, "assert", "assertmsg", "assertex", "println");
	#ifdef SP23_INCLUDES
			sp23::opcodes::RegisterMW23OpCodes();
	#endif

			RegisterVM(VM_T7, "Call of Duty: Black ops 3", "t7", VmFlags::VMF_CLIENT_VM | VmFlags::VMF_NO_FILE_NAMESPACE | VmFlags::VMF_OPCODE_U16 | VmFlags::VMF_ALIGN);
			RegisterVMPlatform(VM_T7, PLATFORM_PC);
			RegisterVMGlobalVariable(VM_T7, "level", OPCODE_IW_GetLevel);
			RegisterVMGlobalVariable(VM_T7, "game", OPCODE_IW_GetGame);
			RegisterVMGlobalVariable(VM_T7, "anim", OPCODE_IW_GetAnim);
			RegisterVMGlobalVariable(VM_T7, "world", OPCODE_GetWorld);
			RegisterVMGlobalVariable(VM_T7, "classes", OPCODE_GetClasses);
			RegisterVMHashOPCode(VM_T7, '#', OPCODE_GetHash32, 4, [](const char* str) { return hashutils::HashT7(str); });
			RegisterDevCall(VM_T7, "assert", "assertmsg", "errormsg", "throw", "println");
			SetMaxOpCode(VM_T7, 0x1FFF);

			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x12, 0x14, 0x16, 0x17, 0x1a, 0x1d, 0x1f, 0x21, 0x29, 0x2f, 0x32, 0x34, 0x37, 0x38, 0x3b, 0x3d, 0x40, 0x48, 0x51, 0x52, 0x55, 0x56, 0x58, 0x5c, 0x5e, 0x65, 0x6d, 0x6e, 0x6f, 0x71, 0x73, 0x74, 0x7b, 0x7c, 0x7f, 0x80, 0x81, 0x85, 0x87, 0x88, 0x8d, 0x8e, 0x91, 0x92, 0x93, 0x94, 0x97, 0x99, 0x9a, 0xa4, 0xa5, 0xac, 0xb5, 0xb8, 0xb9, 0xba, 0xbd, 0xc3, 0xc5, 0xcb, 0xcd, 0xcf, 0xd1, 0xd3, 0xd6, 0xde, 0xe1, 0xe2, 0xe6, 0xe7, 0xe8, 0xee, 0xf3, 0xf8, 0xf9, 0xfa, 0xfd, 0x101, 0x10a, 0x10f, 0x113, 0x114, 0x119, 0x11e, 0x11f, 0x120, 0x121, 0x127, 0x129, 0x12a, 0x12d, 0x130, 0x134, 0x135, 0x138, 0x139, 0x13c, 0x142, 0x148, 0x14d, 0x151, 0x154);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x159, 0x15c, 0x15d, 0x160, 0x165, 0x168, 0x169, 0x16f, 0x171, 0x175, 0x177, 0x17b, 0x17c, 0x17d, 0x17e, 0x181, 0x183, 0x184, 0x186, 0x187, 0x189, 0x18b, 0x18c, 0x18d, 0x19c, 0x19e, 0x1a0, 0x1a1, 0x1ad, 0x1b1, 0x1b3, 0x1b4, 0x1b8, 0x1b9, 0x1bc, 0x1bd, 0x1be, 0x1c1, 0x1c2, 0x1c3, 0x1c6, 0x1ca, 0x1cd, 0x1ce, 0x1cf, 0x1d0, 0x1d7, 0x1dc, 0x1de, 0x1e1, 0x1e7, 0x1eb, 0x1ee, 0x1f1, 0x1f2, 0x1f3, 0x1f4, 0x1f5, 0x1f7, 0x1f9, 0x1fb, 0x1fc, 0x1fe, 0x200, 0x201, 0x202, 0x217, 0x218, 0x220, 0x221, 0x224, 0x227, 0x239, 0x23a, 0x23c, 0x23f, 0x240, 0x24b, 0x250, 0x251, 0x252, 0x254, 0x257, 0x258, 0x259, 0x25b, 0x25c, 0x25d, 0x262, 0x263, 0x269);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x26a, 0x26d, 0x26f, 0x270, 0x275, 0x279, 0x27b, 0x27e, 0x283, 0x286, 0x28a, 0x28c, 0x28e, 0x28f, 0x290, 0x293, 0x297, 0x2a2, 0x2a5, 0x2a6, 0x2a7, 0x2af, 0x2b4, 0x2b8, 0x2b9, 0x2bc, 0x2c8, 0x2c9, 0x2cb, 0x2d0, 0x2d2, 0x2d3, 0x2d5, 0x2d8, 0x2d9, 0x2dd, 0x2e1, 0x2e3, 0x2ea, 0x2eb, 0x2ec, 0x2ed, 0x2f8, 0x2f9, 0x2fb, 0x2fe, 0x2ff, 0x302, 0x305, 0x306, 0x30c, 0x310, 0x312, 0x319, 0x31d, 0x31e, 0x328, 0x331, 0x334, 0x337, 0x338, 0x33a, 0x33d, 0x33e, 0x348, 0x34a, 0x34c, 0x355, 0x358, 0x35a, 0x35c, 0x35d, 0x360, 0x361, 0x364, 0x365, 0x36a, 0x36e, 0x373, 0x374, 0x376, 0x379, 0x37b, 0x37c, 0x37d, 0x37e, 0x37f, 0x380, 0x381, 0x384, 0x38c);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x393, 0x395, 0x398, 0x39d, 0x39f, 0x3a0, 0x3a4, 0x3b1, 0x3b3, 0x3b4, 0x3b6, 0x3be, 0x3c0, 0x3c2, 0x3c4, 0x3c9, 0x3ca, 0x3cb, 0x3ce, 0x3d9, 0x3dd, 0x3e1, 0x3e5, 0x3e8, 0x3e9, 0x3ea, 0x3ec, 0x3f0, 0x3f1, 0x3f7, 0x3f8, 0x3f9, 0x400, 0x408, 0x40d, 0x411, 0x412, 0x413, 0x414, 0x415, 0x418, 0x41b, 0x41c, 0x41f, 0x422, 0x42b, 0x431, 0x432, 0x435, 0x43b, 0x43d, 0x43e, 0x43f, 0x440, 0x443, 0x447, 0x44a, 0x44e, 0x451, 0x454, 0x456, 0x458, 0x460, 0x46a, 0x46c, 0x46d, 0x46e, 0x470, 0x471, 0x473, 0x475, 0x47b, 0x47c, 0x482, 0x484, 0x489, 0x493, 0x495, 0x497, 0x49a, 0x49c, 0x4a0, 0x4a2, 0x4a3, 0x4a4, 0x4a7, 0x4a9, 0x4ab, 0x4ac, 0x4ad, 0x4ae);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x4af, 0x4b5, 0x4b7, 0x4ba, 0x4be, 0x4c2, 0x4c4, 0x4ca, 0x4cb, 0x4cf, 0x4d4, 0x4d9, 0x4e0, 0x4e1, 0x4e6, 0x4e7, 0x4e9, 0x4ec, 0x4ee, 0x4f1, 0x4f5, 0x4f8, 0x4f9, 0x4fb, 0x4ff, 0x501, 0x509, 0x50d, 0x511, 0x51a, 0x51e, 0x51f, 0x521, 0x522, 0x528, 0x52b, 0x52e, 0x532, 0x536, 0x53e, 0x53f, 0x543, 0x544, 0x546, 0x547, 0x549, 0x54c, 0x551, 0x558, 0x559, 0x55f, 0x563, 0x564, 0x569, 0x56b, 0x56c, 0x570, 0x57a, 0x57c, 0x57e, 0x582, 0x586, 0x588, 0x58c, 0x58f, 0x591, 0x593, 0x598, 0x599, 0x59a, 0x59b, 0x59c, 0x5a1, 0x5a4, 0x5a5, 0x5a9, 0x5ad, 0x5b1, 0x5b7, 0x5bc, 0x5be, 0x5c3, 0x5c4, 0x5c9, 0x5cb, 0x5d1, 0x5d4, 0x5d7, 0x5dd, 0x5ea, 0x5eb);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x5ed, 0x5ef, 0x5f0, 0x5f1, 0x5f2, 0x5f9, 0x604, 0x607, 0x609, 0x60b, 0x60e, 0x611, 0x612, 0x618, 0x61a, 0x61b, 0x61f, 0x622, 0x624, 0x625, 0x627, 0x62a, 0x62f, 0x632, 0x635, 0x636, 0x638, 0x63e, 0x641, 0x644, 0x646, 0x649, 0x64c, 0x64e, 0x651, 0x654, 0x65b, 0x663, 0x665, 0x666, 0x667, 0x66a, 0x66f, 0x673, 0x676, 0x677, 0x67b, 0x67d, 0x681, 0x687, 0x68a, 0x690, 0x693, 0x694, 0x697, 0x69d, 0x6a0, 0x6a1, 0x6a2, 0x6a4, 0x6a6, 0x6a8, 0x6ab, 0x6ae, 0x6b1, 0x6b2, 0x6b6, 0x6b8, 0x6b9, 0x6be, 0x6c7, 0x6c8, 0x6ca, 0x6cf, 0x6d1, 0x6d3, 0x6d5, 0x6d6, 0x6d9, 0x6e0, 0x6e3, 0x6e6, 0x6e7, 0x6e9, 0x6ed, 0x6f0, 0x6f4, 0x6f7, 0x6f8, 0x6fc, 0x6fd);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x700, 0x707, 0x70b, 0x713, 0x714, 0x71b, 0x723, 0x724, 0x72a, 0x72c, 0x72e, 0x730, 0x737, 0x73a, 0x73c, 0x73e, 0x73f, 0x741, 0x745, 0x747, 0x748, 0x74a, 0x74c, 0x750, 0x751, 0x752, 0x759, 0x75a, 0x75e, 0x760, 0x761, 0x765, 0x766, 0x76b, 0x770, 0x772, 0x773, 0x77e, 0x780, 0x782, 0x786, 0x78a, 0x78b, 0x78c, 0x793, 0x7a2, 0x7a4, 0x7ac, 0x7b5, 0x7b6, 0x7b7, 0x7b8, 0x7b9, 0x7bb, 0x7bc, 0x7bf, 0x7c6, 0x7c7, 0x7ca, 0x7cb, 0x7d9, 0x7da, 0x7de, 0x7e0, 0x7e1, 0x7e4, 0x7e7, 0x7ec, 0x7ef, 0x7f5, 0x7fb, 0x7ff, 0x801, 0x804, 0x80a, 0x80e, 0x80f, 0x812, 0x816, 0x818, 0x81c, 0x820, 0x821, 0x823, 0x824, 0x826, 0x82a, 0x830, 0x832, 0x834, 0x838);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x83b, 0x83c, 0x83d, 0x841, 0x843, 0x846, 0x847, 0x852, 0x855, 0x85c, 0x85d, 0x85e, 0x85f, 0x862, 0x863, 0x866, 0x867, 0x869, 0x86a, 0x86b, 0x86c, 0x86f, 0x875, 0x877, 0x878, 0x87e, 0x880, 0x881, 0x883, 0x884, 0x886, 0x888, 0x892, 0x89a, 0x89b, 0x89d, 0x89e, 0x8a2, 0x8a5, 0x8ae, 0x8af, 0x8b1, 0x8b2, 0x8b5, 0x8b9, 0x8bb, 0x8c1, 0x8c4, 0x8c6, 0x8ca, 0x8ce, 0x8d0, 0x8d2, 0x8d4, 0x8d5, 0x8d8, 0x8d9, 0x8da, 0x8dd, 0x8e0, 0x8ed, 0x8f1, 0x8f3, 0x8f8, 0x8fb, 0x8fd, 0x8ff, 0x900, 0x901, 0x904, 0x906, 0x907, 0x908, 0x90a, 0x90c, 0x90d, 0x914, 0x915, 0x918, 0x91b, 0x91f, 0x925, 0x92b, 0x932, 0x936, 0x937, 0x939, 0x93a, 0x93d, 0x942, 0x944);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x947, 0x94c, 0x952, 0x956, 0x95c, 0x95d, 0x960, 0x962, 0x965, 0x974, 0x976, 0x977, 0x97a, 0x97c, 0x97e, 0x981, 0x989, 0x991, 0x996, 0x999, 0x99c, 0x99d, 0x9a1, 0x9a2, 0x9a6, 0x9ab, 0x9ac, 0x9b6, 0x9be, 0x9bf, 0x9c9, 0x9ca, 0x9cf, 0x9d0, 0x9d1, 0x9d2, 0x9d6, 0x9da, 0x9de, 0x9e0, 0x9e1, 0x9e3, 0x9e4, 0x9e5, 0x9e6, 0x9e7, 0x9f9, 0x9fb, 0x9fd, 0x9fe, 0x9ff, 0xa02, 0xa04, 0xa05, 0xa06, 0xa0f, 0xa14, 0xa17, 0xa19, 0xa1a, 0xa22, 0xa23, 0xa27, 0xa28, 0xa2a, 0xa32, 0xa33, 0xa37, 0xa3c, 0xa3d, 0xa48, 0xa4b, 0xa4d, 0xa4f, 0xa50, 0xa54, 0xa5b, 0xa5f, 0xa61, 0xa62, 0xa68, 0xa69, 0xa6a, 0xa6c, 0xa6e, 0xa72, 0xa78, 0xa7b, 0xa80, 0xa81, 0xa84);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0xa85, 0xa87, 0xa91, 0xaa7, 0xaa8, 0xaac, 0xab6, 0xabd, 0xabe, 0xac0, 0xac5, 0xac8, 0xac9, 0xaca, 0xacc, 0xace, 0xacf, 0xad1, 0xad4, 0xad6, 0xad9, 0xada, 0xadf, 0xae0, 0xae3, 0xae4, 0xae6, 0xae9, 0xaed, 0xaee, 0xaf5, 0xafa, 0xafb, 0xb01, 0xb02, 0xb11, 0xb12, 0xb14, 0xb15, 0xb1e, 0xb1f, 0xb20, 0xb26, 0xb2c, 0xb2d, 0xb32, 0xb37, 0xb3e, 0xb40, 0xb41, 0xb44, 0xb46, 0xb48, 0xb49, 0xb4f, 0xb50, 0xb5b, 0xb63, 0xb65, 0xb6b, 0xb6d, 0xb6f, 0xb72, 0xb73, 0xb77, 0xb7a, 0xb7f, 0xb85, 0xb88, 0xb8a, 0xb8c, 0xb91, 0xb92, 0xb93, 0xb9b, 0xb9f, 0xba3, 0xba6, 0xbad, 0xbb0, 0xbb3, 0xbb9, 0xbba, 0xbbc, 0xbbe, 0xbc3, 0xbc7, 0xbd7, 0xbd8, 0xbda, 0xbdb);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0xbe1, 0xbe2, 0xbe3, 0xbe6, 0xbe8, 0xbe9, 0xbef, 0xbf6, 0xbfc, 0xbfe, 0xc00, 0xc02, 0xc0a, 0xc0d, 0xc11, 0xc13, 0xc15, 0xc19, 0xc1e, 0xc1f, 0xc21, 0xc23, 0xc29, 0xc2e, 0xc31, 0xc36, 0xc3a, 0xc3b, 0xc41, 0xc42, 0xc48, 0xc4c, 0xc53, 0xc54, 0xc59, 0xc63, 0xc66, 0xc68, 0xc69, 0xc6b, 0xc71, 0xc76, 0xc79, 0xc7c, 0xc7e, 0xc80, 0xc82, 0xc84, 0xc88, 0xc8d, 0xc90, 0xc94, 0xc96, 0xc97, 0xc99, 0xc9e, 0xc9f, 0xca0, 0xca1, 0xca6, 0xcab, 0xcaf, 0xcb1, 0xcb5, 0xcb6, 0xcb9, 0xcbb, 0xcbe, 0xcc1, 0xcc4, 0xcc6, 0xcc7, 0xcc8, 0xccb, 0xcce, 0xcd1, 0xcd2, 0xcd3, 0xcda, 0xcdc, 0xcdf, 0xce0, 0xce4, 0xce5, 0xce9, 0xcec, 0xced, 0xcf0, 0xcf6, 0xcfa, 0xd01);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0xd02, 0xd03, 0xd08, 0xd09, 0xd0b, 0xd0c, 0xd10, 0xd11, 0xd13, 0xd14, 0xd15, 0xd16, 0xd1c, 0xd1e, 0xd1f, 0xd20, 0xd22, 0xd23, 0xd25, 0xd26, 0xd2c, 0xd2d, 0xd30, 0xd33, 0xd34, 0xd35, 0xd3c, 0xd3d, 0xd41, 0xd42, 0xd44, 0xd4a, 0xd4d, 0xd52, 0xd53, 0xd54, 0xd58, 0xd59, 0xd5c, 0xd5f, 0xd61, 0xd65, 0xd67, 0xd6a, 0xd6c, 0xd6e, 0xd70, 0xd71, 0xd74, 0xd79, 0xd7a, 0xd7c, 0xd7e, 0xd81, 0xd85, 0xd88, 0xd8a, 0xd8c, 0xd8e, 0xd8f, 0xd90, 0xd93, 0xd95, 0xd96, 0xd97, 0xd99, 0xd9a, 0xd9b, 0xd9c, 0xd9f, 0xda5, 0xda7, 0xda9, 0xdaa, 0xdb1, 0xdb2, 0xdb3, 0xdb4, 0xdbb, 0xdbc, 0xdc2, 0xdc4, 0xdc7, 0xdc8, 0xdda, 0xdde, 0xddf, 0xde3, 0xde6, 0xde8, 0xded);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0xdf0, 0xdf1, 0xdf2, 0xdf4, 0xdf5, 0xdf6, 0xdf7, 0xdf9, 0xdfb, 0xe02, 0xe03, 0xe09, 0xe0b, 0xe0d, 0xe0e, 0xe0f, 0xe12, 0xe1c, 0xe1e, 0xe22, 0xe26, 0xe2c, 0xe33, 0xe44, 0xe47, 0xe48, 0xe49, 0xe4e, 0xe50, 0xe5b, 0xe60, 0xe65, 0xe66, 0xe67, 0xe6b, 0xe6c, 0xe6d, 0xe6e, 0xe70, 0xe72, 0xe73, 0xe74, 0xe77, 0xe7a, 0xe7f, 0xe81, 0xe83, 0xe85, 0xe89, 0xe8b, 0xe8d, 0xe8e, 0xe8f, 0xe90, 0xe93, 0xe95, 0xe98, 0xea3, 0xea7, 0xeac, 0xeb0, 0xeb1, 0xeb2, 0xeb7, 0xebe, 0xec1, 0xec3, 0xec7, 0xec8, 0xecb, 0xecc, 0xecd, 0xecf, 0xede, 0xee5, 0xee7, 0xee9, 0xeea, 0xeeb, 0xef3, 0xefe, 0xf06, 0xf0f, 0xf10, 0xf14, 0xf15, 0xf16, 0xf18, 0xf25, 0xf29, 0xf2a);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0xf2d, 0xf2f, 0xf30, 0xf32, 0xf34, 0xf36, 0xf38, 0xf3b, 0xf3c, 0xf42, 0xf43, 0xf45, 0xf4e, 0xf4f, 0xf52, 0xf59, 0xf5d, 0xf60, 0xf64, 0xf66, 0xf6b, 0xf6c, 0xf6d, 0xf6e, 0xf76, 0xf78, 0xf79, 0xf7e, 0xf80, 0xf81, 0xf8a, 0xf8c, 0xf91, 0xf94, 0xf95, 0xf98, 0xf9a, 0xf9b, 0xf9c, 0xfab, 0xfac, 0xfb1, 0xfb2, 0xfb3, 0xfbd, 0xfbe, 0xfc5, 0xfc6, 0xfcb, 0xfcf, 0xfd7, 0xfdc, 0xfdd, 0xfde, 0xfdf, 0xfe1, 0xfe3, 0xfe4, 0xfe9, 0xfea, 0xfeb, 0xfec, 0xff1, 0xff2, 0xff4, 0xff5, 0xff6, 0xff7, 0xff8, 0xff9, 0xffb, 0xffd, 0xfff, 0x1001, 0x1003, 0x1004, 0x1011, 0x1014, 0x1016, 0x1017, 0x1024, 0x1027, 0x102f, 0x1031, 0x1032, 0x1033, 0x1034, 0x103a, 0x103c);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x103d, 0x103f, 0x1041, 0x1043, 0x1045, 0x1046, 0x1047, 0x1048, 0x1049, 0x104a, 0x104d, 0x1051, 0x1054, 0x1057, 0x1058, 0x105c, 0x105d, 0x105e, 0x105f, 0x1060, 0x1062, 0x1063, 0x1064, 0x1069, 0x1071, 0x1073, 0x1076, 0x1077, 0x107c, 0x107d, 0x1084, 0x1086, 0x1087, 0x108b, 0x108d, 0x108e, 0x1093, 0x1095, 0x1099, 0x109a, 0x109b, 0x10a1, 0x10a4, 0x10a5, 0x10bb, 0x10bd, 0x10c6, 0x10d0, 0x10d1, 0x10d3, 0x10d4, 0x10d7, 0x10d9, 0x10dc, 0x10e6, 0x10e7, 0x10ec, 0x10ef, 0x10f2, 0x10f3, 0x10f5, 0x10f6, 0x110e, 0x1110, 0x1115, 0x111b, 0x1121, 0x1137, 0x113c, 0x113d, 0x1147, 0x114f, 0x1159, 0x1161, 0x1162, 0x1169, 0x116b, 0x1170, 0x1175, 0x1176);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x1177, 0x1178, 0x117e, 0x1180, 0x1186, 0x118a, 0x118e, 0x1195, 0x119f, 0x11a2, 0x11a5, 0x11a9, 0x11ad, 0x11b4, 0x11bf, 0x11c0, 0x11c4, 0x11c5, 0x11c6, 0x11cb, 0x11d2, 0x11d3, 0x11d6, 0x11d9, 0x11db, 0x11dc, 0x11e0, 0x11e2, 0x11e3, 0x11e4, 0x11e6, 0x11e7, 0x11e8, 0x11ed, 0x11f0, 0x11f2, 0x11fa, 0x11fc, 0x11fd, 0x11fe, 0x11ff, 0x1201, 0x1203, 0x1204, 0x1208, 0x1209, 0x120a, 0x120f, 0x1216, 0x1219, 0x121a, 0x121e, 0x1223, 0x1225, 0x1227, 0x1228, 0x122b, 0x122e, 0x122f, 0x1230, 0x1232, 0x1235, 0x1239, 0x123a, 0x123b, 0x1244, 0x1247, 0x124a, 0x124e, 0x124f, 0x125e, 0x1267, 0x1269, 0x1278, 0x1280, 0x1281, 0x1287, 0x1288, 0x128d, 0x128e);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x1292, 0x1296, 0x1297, 0x129a, 0x129e, 0x12a2, 0x12ab, 0x12ac, 0x12ae, 0x12b4, 0x12b8, 0x12bb, 0x12be, 0x12bf, 0x12cb, 0x12ce, 0x12d0, 0x12d1, 0x12d3, 0x12db, 0x12dd, 0x12df, 0x12e5, 0x12e6, 0x12ed, 0x12f2, 0x12f4, 0x12f5, 0x1300, 0x1305, 0x1306, 0x1308, 0x1309, 0x130b, 0x130f, 0x1311, 0x1313, 0x1314, 0x1316, 0x1318, 0x131c, 0x131f, 0x1323, 0x1324, 0x1326, 0x1327, 0x1328, 0x1329, 0x132d, 0x132f, 0x1331, 0x1332, 0x1335, 0x133d, 0x1340, 0x1342, 0x1345, 0x134d, 0x1350, 0x1355, 0x1356, 0x1358, 0x135b, 0x135c, 0x135f, 0x1363, 0x1366, 0x1368, 0x136a, 0x136f, 0x1370, 0x1371, 0x1372, 0x1375, 0x1376, 0x1379, 0x137b, 0x137c, 0x137e, 0x137f);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x1380, 0x1383, 0x1385, 0x138a, 0x138b, 0x138c, 0x1393, 0x1394, 0x1397, 0x1399, 0x139e, 0x13a1, 0x13a2, 0x13a3, 0x13a7, 0x13a9, 0x13aa, 0x13ae, 0x13af, 0x13b2, 0x13b3, 0x13b5, 0x13b7, 0x13b8, 0x13ba, 0x13bf, 0x13c1, 0x13c4, 0x13c8, 0x13c9, 0x13cb, 0x13d0, 0x13d6, 0x13d7, 0x13d9, 0x13da, 0x13db, 0x13dd, 0x13e9, 0x13ea, 0x13eb, 0x13ee, 0x13f2, 0x13f6, 0x13f9, 0x13fa, 0x13fc, 0x13ff, 0x1402, 0x1407, 0x140f, 0x1411, 0x1412, 0x1414, 0x1418, 0x141c, 0x141d, 0x1422, 0x1429, 0x142c, 0x142d, 0x1433, 0x1438, 0x143e, 0x1440, 0x1441, 0x1445, 0x144d, 0x144f, 0x1454, 0x145b, 0x145d, 0x1460, 0x1461, 0x1462, 0x1469, 0x146b, 0x1473, 0x1475, 0x147b);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x147c, 0x147d, 0x147f, 0x1480, 0x1483, 0x1485, 0x1487, 0x148a, 0x148f, 0x1490, 0x1491, 0x1494, 0x1495, 0x1497, 0x149e, 0x14a3, 0x14a7, 0x14a8, 0x14a9, 0x14ae, 0x14b0, 0x14b2, 0x14b5, 0x14c1, 0x14c2, 0x14c3, 0x14c4, 0x14c5, 0x14c6, 0x14cb, 0x14d4, 0x14d7, 0x14d9, 0x14da, 0x14db, 0x14dd, 0x14e2, 0x14e8, 0x14e9, 0x14eb, 0x14ee, 0x14f5, 0x14fc, 0x1508, 0x1509, 0x150b, 0x1510, 0x1514, 0x1518, 0x1519, 0x151e, 0x151f, 0x1524, 0x1525, 0x1527, 0x152a, 0x1531, 0x1537, 0x153a, 0x153d, 0x153e, 0x1541, 0x1543, 0x1544, 0x154c, 0x1551, 0x1558, 0x1559, 0x1561, 0x1562, 0x1563, 0x1565, 0x1566, 0x1568, 0x156a, 0x156f, 0x1570, 0x1572, 0x1577, 0x1578);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x157b, 0x157c, 0x157d, 0x1580, 0x1581, 0x1583, 0x1586, 0x1588, 0x158c, 0x159c, 0x15a4, 0x15a7, 0x15a9, 0x15ad, 0x15b0, 0x15b3, 0x15b9, 0x15ba, 0x15be, 0x15bf, 0x15c7, 0x15c8, 0x15cb, 0x15cc, 0x15cf, 0x15d4, 0x15d5, 0x15d8, 0x15d9, 0x15da, 0x15dc, 0x15dd, 0x15df, 0x15e6, 0x15e7, 0x15ec, 0x15ef, 0x15f0, 0x15f1, 0x15f3, 0x1600, 0x1606, 0x1607, 0x1609, 0x160a, 0x160c, 0x160d, 0x1612, 0x1617, 0x1618, 0x161d, 0x1624, 0x1626, 0x1628, 0x162d, 0x162e, 0x162f, 0x1632, 0x1635, 0x1638, 0x163e, 0x1644, 0x1646, 0x1647, 0x164c, 0x164e, 0x1650, 0x1653, 0x1655, 0x1657, 0x165e, 0x1662, 0x1667, 0x1668, 0x166b, 0x166d, 0x1672, 0x167b, 0x167d, 0x1680);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x1683, 0x1686, 0x168c, 0x168d, 0x168f, 0x1695, 0x1697, 0x169a, 0x169c, 0x169e, 0x16a1, 0x16a9, 0x16ac, 0x16ad, 0x16b2, 0x16b4, 0x16b5, 0x16ba, 0x16bb, 0x16c2, 0x16c4, 0x16c5, 0x16c6, 0x16c7, 0x16cc, 0x16cd, 0x16d1, 0x16d5, 0x16d7, 0x16da, 0x16dc, 0x16de, 0x16df, 0x16e6, 0x16f0, 0x16f3, 0x16f4, 0x16fe, 0x1701, 0x1702, 0x1705, 0x170b, 0x170c, 0x170e, 0x170f, 0x1713, 0x1714, 0x1715, 0x1717, 0x1719, 0x171e, 0x1725, 0x1727, 0x1728, 0x172e, 0x172f, 0x1732, 0x1733, 0x1734, 0x1739, 0x1740, 0x1741, 0x1743, 0x1745, 0x174c, 0x174f, 0x1752, 0x1753, 0x1756, 0x1757, 0x1759, 0x1766, 0x1767, 0x176c, 0x176e, 0x176f, 0x1776, 0x1779, 0x177f, 0x1781);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x1782, 0x1783, 0x1786, 0x1787, 0x1790, 0x1793, 0x1794, 0x179d, 0x17a4, 0x17a5, 0x17b7, 0x17bd, 0x17be, 0x17c0, 0x17c3, 0x17c5, 0x17c7, 0x17c9, 0x17cf, 0x17d3, 0x17d6, 0x17d9, 0x17db, 0x17e4, 0x17e7, 0x17e8, 0x17ef, 0x17f7, 0x17f8, 0x17f9, 0x17fb, 0x17fc, 0x1801, 0x1803, 0x1807, 0x1809, 0x180a, 0x180e, 0x1810, 0x1811, 0x1814, 0x1816, 0x1819, 0x181a, 0x181b, 0x1821, 0x1826, 0x1829, 0x182d, 0x182f, 0x1831, 0x1836, 0x1838, 0x183a, 0x183d, 0x1842, 0x1843, 0x184b, 0x1851, 0x185c, 0x185d, 0x185e, 0x185f, 0x1864, 0x1866, 0x1869, 0x186f, 0x1877, 0x1884, 0x1888, 0x1889, 0x188c, 0x188d, 0x188e, 0x1890, 0x1898, 0x189c, 0x189e, 0x189f, 0x18a6);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x18ab, 0x18ad, 0x18af, 0x18b1, 0x18b4, 0x18b5, 0x18b6, 0x18bb, 0x18bc, 0x18c3, 0x18c5, 0x18c7, 0x18ca, 0x18d4, 0x18d7, 0x18db, 0x18dc, 0x18e2, 0x18e3, 0x18e5, 0x18e6, 0x18e8, 0x18eb, 0x18ed, 0x18ef, 0x18f1, 0x18f2, 0x18f8, 0x18fc, 0x18fe, 0x1907, 0x1908, 0x1909, 0x190d, 0x1910, 0x1914, 0x1918, 0x191b, 0x191c, 0x191d, 0x191f, 0x1922, 0x1925, 0x1926, 0x1928, 0x192d, 0x192e, 0x1930, 0x1935, 0x1938, 0x193c, 0x193e, 0x1940, 0x1942, 0x1943, 0x1946, 0x1948, 0x194a, 0x194c, 0x194d, 0x194f, 0x1957, 0x195c, 0x195e, 0x1964, 0x196a, 0x196d, 0x196e, 0x1971, 0x1972, 0x1973, 0x1975, 0x197a, 0x197b, 0x1981, 0x1983, 0x1984, 0x1985, 0x1987, 0x1988);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x198e, 0x198f, 0x1990, 0x1997, 0x19a0, 0x19a1, 0x19a2, 0x19a3, 0x19a7, 0x19a8, 0x19a9, 0x19aa, 0x19b2, 0x19b4, 0x19b6, 0x19b9, 0x19be, 0x19c7, 0x19cb, 0x19cc, 0x19cd, 0x19cf, 0x19d1, 0x19d2, 0x19d8, 0x19de, 0x19df, 0x19e3, 0x19e8, 0x19ea, 0x19ed, 0x19ef, 0x19f0, 0x19f1, 0x19fd, 0x1a01, 0x1a02, 0x1a03, 0x1a0a, 0x1a0b, 0x1a0d, 0x1a0e, 0x1a14, 0x1a15, 0x1a1a, 0x1a1d, 0x1a1e, 0x1a24, 0x1a25, 0x1a26, 0x1a27, 0x1a2c, 0x1a2d, 0x1a36, 0x1a38, 0x1a3a, 0x1a3c, 0x1a41, 0x1a42, 0x1a47, 0x1a4e, 0x1a5a, 0x1a5d, 0x1a62, 0x1a69, 0x1a6b, 0x1a6d, 0x1a6f, 0x1a70, 0x1a75, 0x1a7c, 0x1a87, 0x1a88, 0x1a8a, 0x1a8b, 0x1a8e, 0x1a92, 0x1a94, 0x1a95, 0x1a97);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x1a9a, 0x1a9e, 0x1aa6, 0x1aaa, 0x1aac, 0x1aae, 0x1ab1, 0x1ab3, 0x1ab4, 0x1ab8, 0x1abd, 0x1ac0, 0x1ac3, 0x1ac7, 0x1ac9, 0x1ad0, 0x1ad1, 0x1ad5, 0x1ad9, 0x1ada, 0x1adb, 0x1adc, 0x1ae2, 0x1ae7, 0x1aec, 0x1af3, 0x1af4, 0x1af5, 0x1b0c, 0x1b12, 0x1b13, 0x1b17, 0x1b1b, 0x1b1c, 0x1b1d, 0x1b1e, 0x1b1f, 0x1b22, 0x1b23, 0x1b24, 0x1b28, 0x1b2e, 0x1b30, 0x1b32, 0x1b33, 0x1b3a, 0x1b3b, 0x1b3d, 0x1b41, 0x1b43, 0x1b44, 0x1b46, 0x1b47, 0x1b49, 0x1b4b, 0x1b52, 0x1b58, 0x1b5c, 0x1b63, 0x1b67, 0x1b68, 0x1b69, 0x1b6c, 0x1b6e, 0x1b70, 0x1b77, 0x1b79, 0x1b7a, 0x1b7e, 0x1b85, 0x1b8a, 0x1b8c, 0x1b90, 0x1b94, 0x1b99, 0x1b9e, 0x1ba0, 0x1ba2, 0x1ba3, 0x1ba7);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x1ba8, 0x1ba9, 0x1bb0, 0x1bb1, 0x1bb5, 0x1bb6, 0x1bbc, 0x1bbe, 0x1bc2, 0x1bcb, 0x1bcc, 0x1bcf, 0x1bd0, 0x1bd2, 0x1bd3, 0x1bda, 0x1bdb, 0x1be0, 0x1be3, 0x1be4, 0x1be7, 0x1beb, 0x1bf0, 0x1bf1, 0x1bf4, 0x1bfc, 0x1c0b, 0x1c0e, 0x1c0f, 0x1c10, 0x1c12, 0x1c14, 0x1c17, 0x1c1b, 0x1c20, 0x1c23, 0x1c27, 0x1c2d, 0x1c2e, 0x1c2f, 0x1c30, 0x1c31, 0x1c39, 0x1c3a, 0x1c3d, 0x1c41, 0x1c42, 0x1c47, 0x1c4e, 0x1c4f, 0x1c50, 0x1c54, 0x1c55, 0x1c57, 0x1c59, 0x1c5c, 0x1c66, 0x1c69, 0x1c6e, 0x1c74, 0x1c75, 0x1c76, 0x1c7a, 0x1c7b, 0x1c83, 0x1c8d, 0x1c8e, 0x1c90, 0x1c92, 0x1c94, 0x1c97, 0x1c99, 0x1c9a, 0x1c9b, 0x1ca0, 0x1ca2, 0x1ca3, 0x1ca9, 0x1cae, 0x1cb0);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x1cb1, 0x1cb7, 0x1cba, 0x1cbd, 0x1cbf, 0x1cc1, 0x1cc8, 0x1cca, 0x1cce, 0x1ccf, 0x1cd5, 0x1cd7, 0x1ce3, 0x1ce7, 0x1ceb, 0x1cec, 0x1cee, 0x1cf1, 0x1cfa, 0x1cfd, 0x1d02, 0x1d03, 0x1d06, 0x1d07, 0x1d0a, 0x1d0e, 0x1d0f, 0x1d10, 0x1d15, 0x1d17, 0x1d19, 0x1d1a, 0x1d1c, 0x1d21, 0x1d22, 0x1d24, 0x1d28, 0x1d2c, 0x1d2d, 0x1d2f, 0x1d31, 0x1d33, 0x1d3d, 0x1d45, 0x1d47, 0x1d48, 0x1d4a, 0x1d4b, 0x1d57, 0x1d59, 0x1d5a, 0x1d5f, 0x1d66, 0x1d67, 0x1d6c, 0x1d6d, 0x1d70, 0x1d71, 0x1d72, 0x1d73, 0x1d75, 0x1d76, 0x1d7b, 0x1d7d, 0x1d80, 0x1d82, 0x1d84, 0x1d87, 0x1d88, 0x1d8d, 0x1d90, 0x1d91, 0x1d95, 0x1d97, 0x1d9d, 0x1d9f, 0x1da2, 0x1da3, 0x1da6, 0x1da8);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x1daa, 0x1dac, 0x1dad, 0x1daf, 0x1db3, 0x1db8, 0x1dbc, 0x1dbd, 0x1dc1, 0x1dc2, 0x1dc4, 0x1dc8, 0x1dca, 0x1dcd, 0x1dd0, 0x1dd1, 0x1dd3, 0x1dd4, 0x1dd6, 0x1de9, 0x1ded, 0x1df5, 0x1dfb, 0x1e03, 0x1e04, 0x1e05, 0x1e09, 0x1e0d, 0x1e0e, 0x1e13, 0x1e19, 0x1e1b, 0x1e1e, 0x1e1f, 0x1e20, 0x1e25, 0x1e2c, 0x1e30, 0x1e32, 0x1e36, 0x1e38, 0x1e3b, 0x1e3e, 0x1e40, 0x1e46, 0x1e47, 0x1e48, 0x1e49, 0x1e4b, 0x1e4c, 0x1e50, 0x1e53, 0x1e54, 0x1e5b, 0x1e5c, 0x1e5e, 0x1e62, 0x1e64, 0x1e67, 0x1e68, 0x1e6e, 0x1e71, 0x1e73, 0x1e74, 0x1e76, 0x1e77, 0x1e79, 0x1e7a, 0x1e7d, 0x1e80, 0x1e81, 0x1e83, 0x1e87, 0x1e95, 0x1e98, 0x1e9e, 0x1ea3, 0x1ea5, 0x1ea7, 0x1eaa);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x1eab, 0x1eae, 0x1eaf, 0x1eb0, 0x1eb5, 0x1eb6, 0x1eb9, 0x1ebb, 0x1ebd, 0x1ec0, 0x1ec6, 0x1ec7, 0x1eca, 0x1ecd, 0x1ed0, 0x1ed1, 0x1ed4, 0x1ed8, 0x1edb, 0x1ee4, 0x1ee8, 0x1eec, 0x1ef3, 0x1ef5, 0x1ef6, 0x1efa, 0x1f02, 0x1f03, 0x1f06, 0x1f08, 0x1f0b, 0x1f15, 0x1f1b, 0x1f1c, 0x1f1d, 0x1f1f, 0x1f20, 0x1f2c, 0x1f31, 0x1f34, 0x1f39, 0x1f41, 0x1f42, 0x1f43, 0x1f44, 0x1f47, 0x1f4f, 0x1f54, 0x1f58, 0x1f5d, 0x1f60, 0x1f62, 0x1f71, 0x1f72, 0x1f74, 0x1f76, 0x1f77, 0x1f78, 0x1f7b, 0x1f7c, 0x1f7e, 0x1f87, 0x1f88, 0x1f89, 0x1f8a, 0x1f8b, 0x1f8d, 0x1f91, 0x1f93, 0x1f96, 0x1f97, 0x1f9c, 0x1f9d, 0x1f9f, 0x1fa1, 0x1fa5, 0x1fa6, 0x1faa, 0x1fae, 0x1fb9);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Nop, 0x1fbb, 0x1fc0, 0x1fc2, 0x1fc3, 0x1fc5, 0x1fcd, 0x1fd0, 0x1fd3, 0x1fd6, 0x1fe1, 0x1fe8, 0x1fe9, 0x1fed, 0x1ff1, 0x1ff2, 0x1ff5);

			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Unknown0, 0x0);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Unknown1, 0x1);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Unknown2, 0x2);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Unknown3, 0x3);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Unknown4, 0x4);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Unknown5, 0x5);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Unknown6, 0x6);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Unknown7, 0x7);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_EvalLocalVariableCachedDebug, 0x8);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_EvalLocalVariableRefCachedDebug, 0x9);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Unknowna, 0xa);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Unknownb, 0xb);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ClearParams, 0xc);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_CheckClearParams, 0xd);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_PreScriptCall, 0xe);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_CallBuiltinFunction, 0xf);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_End, 0x10);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_SafeCreateLocalVariables, 0x1d2, 0x299, 0x2f7, 0x336, 0x3fa, 0x45a, 0x49f, 0x5b3, 0x6a7, 0x7b1, 0x80c, 0x83e, 0x958, 0xa9a, 0xaa1, 0xb17, 0xc67, 0xcd7, 0xcef, 0xe21, 0x1210, 0x1224, 0x1260, 0x12e2, 0x1386, 0x13c3, 0x13ed, 0x15a1, 0x1654, 0x1897, 0x18a4, 0x195f, 0x1995, 0x1b60, 0x1b6b, 0x1c6d, 0x1e3d, 0x1f65, 0x1f6a, 0x1fa9);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ScriptFunctionCall, 0x76, 0xce, 0x1c5, 0x203, 0x213, 0x29a, 0x2cd, 0x392, 0x3d4, 0x463, 0x49b, 0x704, 0x70c, 0x7e9, 0x851, 0xa26, 0xb30, 0xbcf, 0xc10, 0xc7b, 0xcfc, 0xdd7, 0xe08, 0xe3c, 0xed8, 0xeec, 0xf3d, 0xfd4, 0x1025, 0x1215, 0x1218, 0x12e1, 0x1322, 0x1419, 0x145e, 0x14a5, 0x14e7, 0x15a0, 0x16ee, 0x171b, 0x17f5, 0x1892, 0x18aa, 0x18e7, 0x190a, 0x19fb, 0x1b10, 0x1b4d, 0x1bce, 0x1bf6, 0x1c11, 0x1c8f, 0x1ca1, 0x1cd3, 0x1d23, 0x1f2e, 0x1f79);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_DecTop, 0x112, 0x15b, 0x1f0, 0x282, 0x28d, 0x386, 0x83f, 0x865, 0x9cd, 0xa8d, 0xb4d, 0xb53, 0xb64, 0xe84, 0xe87, 0xe8c, 0xea9, 0xeae, 0xf63, 0xf70, 0xfe2, 0x131a, 0x131d, 0x138e, 0x13bc, 0x140a, 0x152e, 0x1545, 0x1556, 0x16bc, 0x17bc, 0x182c, 0x1856, 0x186a, 0x18c8, 0x1982, 0x19c0, 0x1a55, 0x1a72, 0x1c1f, 0x1ce5, 0x1d93, 0x1dd8, 0x1e28, 0x1e7f, 0x1e9c, 0x1f29);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetString, 0x1c, 0x1e, 0x12e, 0x12f, 0x29e, 0x56d, 0x63f, 0x65f, 0x686, 0x6c6, 0x6f2, 0x72b, 0x762, 0x873, 0x8c7, 0x8e5, 0x967, 0xa1b, 0xb67, 0xc06, 0xc25, 0xc64, 0xcd5, 0xdc0, 0xf83, 0x10f0, 0x10fd, 0x1112, 0x1139, 0x1360, 0x1423, 0x144c, 0x14e3, 0x17fa, 0x184c, 0x18ff, 0x19f2, 0x1b14, 0x1c04, 0x1c15, 0x1c28, 0x1cb2, 0x1d6f, 0x1dd7, 0x1eb4, 0x1f2d, 0x1f52, 0x1f53, 0x1fc6);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Bit_And, 0x75, 0x20a, 0x210, 0x3ef, 0x4d5, 0x6ad, 0x9d5, 0xa29, 0xb24, 0xb2f, 0xe56, 0xf1e, 0xfb0, 0x1193, 0x12b6, 0x13cc, 0x13cd, 0x13e2, 0x143a, 0x1468, 0x154e, 0x155c, 0x1598, 0x16e0, 0x1774, 0x178e, 0x196f, 0x1a04, 0x1a8f, 0x1b15, 0x1c01, 0x1c6a, 0x1d53, 0x1f23, 0x1ffe);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Bit_Or, 0x44, 0x4c, 0x4d, 0xab, 0x143, 0x1a3, 0x21d, 0x2b3, 0x2e5, 0x2e9, 0x30a, 0x315, 0x339, 0x351, 0x3b9, 0x46b, 0x49e, 0x5bd, 0x645, 0x66b, 0x788, 0x88c, 0x8ee, 0x9cc, 0x9ed, 0xa0a, 0xa7f, 0xb34, 0xbeb, 0xc81, 0xde9, 0xe41, 0xeb4, 0xeb5, 0xef5, 0xf3a, 0x120e, 0x12ba, 0x12fb, 0x1315, 0x132a, 0x1404, 0x1455, 0x145a, 0x149d, 0x151a, 0x155e, 0x1658, 0x174a, 0x1775, 0x17b2, 0x18cd, 0x18dd, 0x1970, 0x1996, 0x19d0, 0x1a6e, 0x1a78, 0x1aff, 0x1b78, 0x1bc4, 0x1ddb, 0x1ec3, 0x1f0e, 0x1fd5);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Bit_Xor, 0xad, 0x271, 0x341, 0x35b, 0x5f5, 0x701, 0x774, 0x778, 0x8eb, 0xa46, 0xa8a, 0xabb, 0xd87, 0xda2, 0xda6, 0xffa, 0x1002, 0x1006, 0x1105, 0x1191, 0x1192, 0x1248, 0x127c, 0x1349, 0x1382, 0x1405, 0x14fd, 0x1585, 0x1894, 0x1a93, 0x1b59, 0x1cc4, 0x1e26, 0x1e56, 0x1f33, 0x1fc4, 0x1fe2);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_BoolComplement, 0x7a, 0x145, 0x152, 0x20f, 0x231, 0x320, 0x3a5, 0x40f, 0x4cc, 0x504, 0x5ce, 0x5d5, 0x791, 0x8b3, 0x8e7, 0xae7, 0xb19, 0xb25, 0xba2, 0xcdd, 0xe59, 0xe71, 0xef9, 0xf37, 0xf5c, 0x1028, 0x10a3, 0x111d, 0x11a1, 0x11a4, 0x11aa, 0x11cc, 0x13dc, 0x1463, 0x1476, 0x152d, 0x15db, 0x15eb, 0x1603, 0x1633, 0x165f, 0x16a5, 0x177d, 0x179e, 0x17bb, 0x1824, 0x1840, 0x18bd, 0x18d0, 0x18fb, 0x1902, 0x192f, 0x19e1, 0x1a4c, 0x1b36, 0x1b9b, 0x1c48, 0x1d25, 0x1db1, 0x1dc6, 0x1e78, 0x1ec9);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_BoolNot, 0x105, 0x132, 0x176, 0x178, 0x248, 0x265, 0x2cc, 0x30f, 0x48c, 0x58d, 0x5c1, 0x5c7, 0x60f, 0x8e6, 0x933, 0x9a7, 0xc09, 0xc38, 0xd12, 0xd9e, 0xee1, 0x111a, 0x1120, 0x119e, 0x11e1, 0x1258, 0x12cd, 0x12dc, 0x12f6, 0x1369, 0x136d, 0x155a, 0x15c1, 0x15fe, 0x162b, 0x1692, 0x181e, 0x18a0, 0x18f3, 0x196b, 0x1b72, 0x1dbe, 0x1f86);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_EvalLocalVariableCached, 0x57, 0xb0, 0xc8, 0xd4, 0x116, 0x1ed, 0x20b, 0x246, 0x285, 0x287, 0x356, 0x3bb, 0x4ef, 0x4f6, 0x574, 0x596, 0x5d6, 0x664, 0x6ba, 0x75c, 0x767, 0x797, 0x849, 0x88a, 0x890, 0x8a6, 0x98c, 0x9bb, 0xb45, 0xb68, 0xccc, 0xe24, 0xfb6, 0xfd0, 0xfd3, 0x10af, 0x111e, 0x1143, 0x115c, 0x12af, 0x1325, 0x132b, 0x139b, 0x139f, 0x13e4, 0x146a, 0x14a1, 0x14cd, 0x1528, 0x153c, 0x1564, 0x1631, 0x16a6, 0x187c, 0x18c4, 0x1949, 0x1976, 0x1a84, 0x1c26, 0x1cde, 0x1da7, 0x1f4d, 0x1fe4);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_EvalLocalVariableRefCached, 0xc1, 0x194, 0x1ab, 0x274, 0x2bd, 0x3da, 0x439, 0x446, 0x48e, 0x4c3, 0x4cd, 0x518, 0x557, 0x5a8, 0x6e5, 0x815, 0x896, 0x98e, 0x99b, 0x9d9, 0xaa9, 0xbb7, 0xdca, 0xe07, 0xe16, 0xe19, 0xe64, 0xf03, 0xffe, 0x1022, 0x10ce, 0x114c, 0x11d4, 0x1279, 0x127d, 0x12ca, 0x12cf, 0x1351, 0x1458, 0x1592, 0x168e, 0x171d, 0x17f4, 0x1828, 0x1915, 0x1a50, 0x1a86, 0x1b64, 0x1ce4, 0x1d4e, 0x1f66, 0x1f99);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_SetVariableField, 0x110, 0x2a0, 0x433, 0x437, 0x466, 0x48a, 0x55d, 0x58b, 0x5fa, 0x60a, 0x692, 0x6d0, 0x950, 0x97b, 0x9b7, 0xaaf, 0xb07, 0xc0b, 0xd69, 0x10b2, 0x1111, 0x1273, 0x12bc, 0x12da, 0x12e3, 0x14ad, 0x16e3, 0x186b, 0x18a9, 0x1916, 0x1962, 0x1980, 0x19dc, 0x1b95, 0x1c21, 0x1d8a, 0x1e8d, 0x1f0d);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IsDefined, 0x70, 0x111, 0x163, 0x16c, 0x197, 0x284, 0x326, 0x4b4, 0x4c6, 0x4da, 0x5b5, 0x720, 0x73b, 0x79d, 0x879, 0x8bc, 0x912, 0x988, 0xa2f, 0xa55, 0xa90, 0xb35, 0xcf1, 0xcf2, 0xd5a, 0xd6d, 0xe2e, 0xee6, 0xf8b, 0x1030, 0x107f, 0x10c1, 0x10e2, 0x1123, 0x127a, 0x1295, 0x12d6, 0x1333, 0x1403, 0x1416, 0x1471, 0x15b2, 0x15b5, 0x15c9, 0x163a, 0x164a, 0x16a4, 0x16c3, 0x1709, 0x171f, 0x175a, 0x18b7, 0x19ec, 0x1a09, 0x1a21, 0x1a7a, 0x1c40, 0x1de7, 0x1e01, 0x1f50);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_JumpOnTrue, 0x5f, 0x174, 0x19d, 0x1fd, 0x2ee, 0x32d, 0x359, 0x459, 0x4e4, 0x5e5, 0x6ee, 0x78d, 0x810, 0x8b7, 0x917, 0x973, 0xa0b, 0xa7a, 0xb10, 0xba8, 0xbe7, 0xd0d, 0xd63, 0xdbd, 0xdcd, 0xe23, 0xed0, 0xef7, 0x101b, 0x102b, 0x1072, 0x10d2, 0x1156, 0x126a, 0x1276, 0x129b, 0x12c0, 0x1492, 0x14b9, 0x15e9, 0x167a, 0x1955, 0x19d4, 0x1a0c, 0x1aa3, 0x1aa7, 0x1ac8, 0x1af7, 0x1b08, 0x1c36, 0x1dd9, 0x1ddf, 0x1de4, 0x1fe0, 0x1ff8);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_JumpOnFalse, 0x96, 0x15f, 0x17a, 0x1df, 0x1ec, 0x206, 0x20d, 0x2e7, 0x39a, 0x3e0, 0x4aa, 0x54e, 0x648, 0x67f, 0x6b7, 0x6d2, 0x76a, 0x785, 0x8dc, 0x8e8, 0x909, 0x980, 0x9b3, 0xaf7, 0xb57, 0xbf5, 0xcb7, 0xce6, 0x1078, 0x10cf, 0x112d, 0x116c, 0x1212, 0x124c, 0x12c1, 0x1539, 0x159f, 0x1685, 0x16b6, 0x16e5, 0x173b, 0x1785, 0x178a, 0x17fd, 0x1874, 0x187e, 0x1932, 0x1add, 0x1b40, 0x1cb6, 0x1dc3, 0x1e16, 0x1ecc, 0x1ed6, 0x1f19, 0x1fa4);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Jump, 0x22, 0x3c, 0x7d, 0x140, 0x14b, 0x25f, 0x4b9, 0x4fa, 0x541, 0x5ac, 0x652, 0x6c3, 0x6f9, 0x840, 0x89f, 0x945, 0xa95, 0xb1c, 0xb3f, 0xba0, 0xbc9, 0xc3f, 0xc51, 0xc5f, 0xdbf, 0xde4, 0xdee, 0xe51, 0xeb9, 0xf26, 0xf82, 0xfd9, 0x10a9, 0x11c8, 0x1222, 0x1259, 0x12a9, 0x1307, 0x131b, 0x1341, 0x1365, 0x1400, 0x1436, 0x1452, 0x14dc, 0x1735, 0x17a7, 0x184d, 0x18b2, 0x18b3, 0x1b0a, 0x1c22, 0x1c56, 0x1ca5, 0x1cf3, 0x1dc9, 0x1dd2, 0x1e21, 0x1e99, 0x1ebe, 0x1ebf, 0x1ef8, 0x1f22, 0x1f45);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_EmptyArray, 0xfe, 0x185, 0x193, 0x199, 0x1e9, 0x2c0, 0x36c, 0x38a, 0x4de, 0x523, 0x539, 0x858, 0x92c, 0xa25, 0xa9b, 0xae2, 0xc75, 0xed4, 0x1083, 0x1113, 0x11ba, 0x11ee, 0x128a, 0x145c, 0x148d, 0x152b, 0x184a, 0x187b, 0x1b29, 0x1c6f, 0x1d35, 0x1dfc, 0x1fdb);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetZero, 0x2a, 0x15a, 0x1ea, 0x3cc, 0x421, 0x424, 0x4d0, 0x589, 0x5e9, 0x6c4, 0x74b, 0x88d, 0x8bf, 0x8c5, 0x924, 0x9b4, 0xbb2, 0xc6d, 0xc93, 0xd82, 0xec4, 0xfc9, 0x100b, 0x10b8, 0x10c5, 0x10d6, 0x1100, 0x126d, 0x1299, 0x14c9, 0x1540, 0x1622, 0x165b, 0x1677, 0x1696, 0x1761, 0x1773, 0x17bf, 0x181f, 0x1951, 0x19af, 0x19ba, 0x1a8c, 0x1afe, 0x1b7b, 0x1bf7, 0x1c13, 0x1c9e, 0x1cc3, 0x1cd0, 0x1d20, 0x1d78, 0x1f6e);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetFloat, 0x54, 0x78, 0xda, 0x150, 0x16d, 0x1c4, 0x219, 0x301, 0x308, 0x55a, 0x64b, 0x71e, 0x783, 0x78e, 0x7aa, 0x916, 0x9b9, 0xafc, 0xc6e, 0xe3e, 0xe8a, 0xf01, 0xf51, 0x1098, 0x1226, 0x1254, 0x1268, 0x1272, 0x12a1, 0x12fa, 0x13cf, 0x13e0, 0x14b8, 0x1530, 0x158a, 0x15a2, 0x15d7, 0x15f5, 0x17aa, 0x17fe, 0x18ba, 0x1929, 0x1947, 0x1961, 0x1a67, 0x1c2b, 0x1cb8, 0x1cfc, 0x1d65, 0x1dce, 0x1dff, 0x1e58, 0x1f16, 0x1fc9);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetSignedByte, 0xb4, 0xe9, 0x228, 0x2e0, 0x333, 0x378, 0x3a2, 0x3a9, 0x3fb, 0x401, 0x52f, 0x534, 0x5a6, 0x600, 0x71a, 0x731, 0x7be, 0x7f1, 0x842, 0x857, 0x8db, 0x961, 0xa13, 0xa63, 0xa6f, 0xb05, 0xb75, 0xbfa, 0xbfd, 0xc0f, 0xc17, 0xc58, 0xc6f, 0xde2, 0xf07, 0xf17, 0xfa5, 0xfca, 0xfdb, 0x10f1, 0x1152, 0x1236, 0x130d, 0x13ce, 0x14ff, 0x1596, 0x15c2, 0x15c3, 0x1613, 0x1614, 0x161b, 0x16d9, 0x17b3, 0x1802, 0x183f, 0x18b0, 0x18ce, 0x18ee, 0x1a30, 0x1a9b, 0x1b7c, 0x1bd5, 0x1bea, 0x1c51, 0x1d27, 0x1d9b, 0x1f5c, 0x1fb0, 0x1fb7);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetShort, 0x60, 0xf4, 0x198, 0x1a9, 0x2c3, 0x388, 0x38d, 0x39e, 0x3d5, 0x3dc, 0x3ff, 0x48b, 0x496, 0x4c5, 0x5e1, 0x5ee, 0x66e, 0x6a9, 0x709, 0x70f, 0x75b, 0x769, 0x7e8, 0x81b, 0x85b, 0x913, 0x949, 0x9ae, 0xa83, 0xc8b, 0xd49, 0xdfc, 0xe79, 0xe9b, 0xec0, 0xee8, 0xf08, 0xf9e, 0x1019, 0x1040, 0x1164, 0x1237, 0x1251, 0x12ad, 0x13e6, 0x14d3, 0x1507, 0x1748, 0x178d, 0x179a, 0x17d8, 0x186c, 0x18c0, 0x1963, 0x198a, 0x19a4, 0x19b1, 0x1b0d, 0x1b82, 0x1be2, 0x1ced, 0x1d42, 0x1dbf, 0x1dcc, 0x1de0, 0x1e31, 0x1e65, 0x1ee9, 0x1f37);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetVector, 0x2d, 0x33, 0x5b, 0x72, 0xaa, 0x229, 0x278, 0x2b5, 0x35f, 0x3db, 0x455, 0x500, 0x512, 0x6d8, 0x70a, 0x729, 0x7f4, 0x897, 0xa0c, 0xa7d, 0xba1, 0xc3d, 0xc98, 0xeed, 0xfa8, 0x113b, 0x1150, 0x1241, 0x13bd, 0x1420, 0x1437, 0x1520, 0x1523, 0x159d, 0x15e1, 0x1883, 0x18c9, 0x19e9, 0x19f6, 0x1a23, 0x1aed, 0x1af0, 0x1b03, 0x1b0b, 0x1b8b, 0x1be9, 0x1bef, 0x1d00, 0x1d0c, 0x1e00);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Vector, 0xb7, 0xbf, 0x157, 0x211, 0x225, 0x280, 0x298, 0x30b, 0x3c5, 0x478, 0x47e, 0x538, 0x54f, 0x578, 0x670, 0x6e1, 0x7d6, 0x84e, 0x94e, 0x99e, 0xa7c, 0xa94, 0xb76, 0xba9, 0xbf4, 0xc43, 0xc47, 0xdb5, 0xe4c, 0xedf, 0xf1b, 0x1038, 0x10a6, 0x10c7, 0x11d5, 0x1284, 0x1317, 0x13d5, 0x15b4, 0x15d2, 0x1643, 0x169b, 0x19c1, 0x1c37, 0x1cac, 0x1cc5, 0x1cda, 0x1d6b, 0x1d77, 0x1e75, 0x1eac, 0x1ee0, 0x1ee7, 0x1f2a);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_SizeOf, 0x24, 0x267, 0x292, 0x2b7, 0x3d6, 0x4fd, 0x57d, 0x5ba, 0x623, 0x9a9, 0x9db, 0xaba, 0xc61, 0xcd0, 0xd05, 0xd1d, 0xd6b, 0xe4a, 0xf4b, 0x103e, 0x1148, 0x1202, 0x14bc, 0x1546, 0x15f4, 0x164d, 0x16fa, 0x18a3, 0x1941, 0x19c6, 0x1bba, 0x1c91, 0x1cc7, 0x1ce8, 0x1e07, 0x1e4a, 0x1efc);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_EvalArrayRef, 0x79, 0x10b, 0x238, 0x264, 0x3d3, 0x3d8, 0x427, 0x441, 0x4bb, 0x4f3, 0x542, 0x682, 0x6f1, 0x7af, 0x7bd, 0x7d7, 0x7ea, 0x81a, 0x831, 0x860, 0x8e4, 0xa88, 0xae1, 0xae8, 0xb74, 0xb96, 0xb9a, 0xbbf, 0xbfb, 0xc9c, 0xcc9, 0xd3b, 0xdc6, 0xde7, 0xee3, 0xf97, 0x10d8, 0x11b1, 0x1252, 0x129c, 0x12b5, 0x13f4, 0x1477, 0x154a, 0x15de, 0x1707, 0x1764, 0x17f3, 0x180c, 0x18ac, 0x1934, 0x1974, 0x1ae3, 0x1bb9, 0x1c84, 0x1c9d, 0x1e0f, 0x1e2f, 0x1efd, 0x1fdd);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ScriptMethodThreadCall, 0x26e, 0x2c5, 0x389, 0x4b6, 0x4ce, 0x50c, 0x568, 0x617, 0x735, 0x799, 0x7a7, 0x81e, 0x836, 0x8e9, 0x90e, 0x959, 0x96e, 0x9ec, 0xa76, 0xa97, 0xaa4, 0xac3, 0xbc5, 0xc08, 0xd18, 0xde5, 0xe80, 0xefb, 0xf7a, 0xfba, 0xfcc, 0x1065, 0x1075, 0x1196, 0x1240, 0x126c, 0x1413, 0x141b, 0x1482, 0x1493, 0x14ea, 0x150f, 0x15c4, 0x16e9, 0x1718, 0x1879, 0x18be, 0x1906, 0x198c, 0x1998, 0x19bf, 0x1aea, 0x1b76, 0x1bb3, 0x1bd8, 0x1c46, 0x1c79, 0x1d3c, 0x1db2, 0x1f35, 0x1f81, 0x1f98, 0x1ff0);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetResolveFunction, 0x43, 0x4a, 0x115, 0x29c, 0x2d7, 0x3d0, 0x514, 0x565, 0x5db, 0x628, 0x634, 0x6af, 0x6b3, 0x7c9, 0x8c0, 0x94a, 0x9f8, 0xa0d, 0xb8f, 0xbff, 0xc1d, 0xc44, 0xc46, 0xc7f, 0xd62, 0xd80, 0xdab, 0xe3a, 0xeb6, 0x1010, 0x1173, 0x12a8, 0x147a, 0x14d6, 0x15ce, 0x1619, 0x1634, 0x166c, 0x16e2, 0x17d5, 0x1a18, 0x1a34, 0x1a39, 0x1a52, 0x1b0f, 0x1bb8, 0x1bde, 0x1dcb, 0x1df1, 0x1eb1);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetNegUnsignedShort, 0x41, 0x11d, 0x133, 0x1fa, 0x288, 0x28b, 0x370, 0x426, 0x554, 0x616, 0x6ac, 0x708, 0x716, 0x7e3, 0x7f2, 0x85a, 0x87f, 0x966, 0xa5e, 0xb0d, 0xb0e, 0xb4c, 0xb60, 0xc77, 0xc8c, 0xcf8, 0xd00, 0xd48, 0xd4f, 0xe29, 0xe2a, 0xebf, 0xf67, 0xfce, 0x1029, 0x1050, 0x10ee, 0x1108, 0x116a, 0x117d, 0x1220, 0x1282, 0x1291, 0x1294, 0x12c4, 0x12e0, 0x12e7, 0x1346, 0x1378, 0x1443, 0x1502, 0x1542, 0x15ed, 0x160b, 0x1621, 0x16bf, 0x173d, 0x1844, 0x1bfb, 0x1c0a, 0x1c7c, 0x1d4f, 0x1d68, 0x1dd5, 0x1e82, 0x1ea2, 0x1fb8);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetNegByte, 0x13, 0x59, 0x170, 0x190, 0x195, 0x1d1, 0x3a6, 0x3f5, 0x3f6, 0x567, 0x71f, 0x8fe, 0x902, 0x91a, 0x930, 0xc50, 0xc5b, 0xe18, 0xe1f, 0xf72, 0x102a, 0x106f, 0x10cb, 0x111c, 0x11b2, 0x1253, 0x126b, 0x12f8, 0x1336, 0x148b, 0x1529, 0x1630, 0x1645, 0x16eb, 0x16f6, 0x173c, 0x1762, 0x17d7, 0x182b, 0x1885, 0x189d, 0x1936, 0x19ad, 0x19c4, 0x19d6, 0x19d9, 0x1b4a, 0x1bad, 0x1c25, 0x1ee5, 0x1f14, 0x1fb5);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ScriptMethodCall, 0x1b, 0xc6, 0xd8, 0x207, 0x226, 0x2df, 0x2f3, 0x3c6, 0x476, 0x517, 0x5bb, 0x691, 0x6a5, 0x6bd, 0x82c, 0x89c, 0x92e, 0x931, 0x964, 0x9c2, 0xa07, 0xb9d, 0xcba, 0xd50, 0xd6f, 0xf93, 0x1427, 0x1489, 0x148c, 0x1602, 0x170d, 0x1737, 0x173f, 0x178c, 0x179b, 0x18da, 0x18f5, 0x197f, 0x1a33, 0x1a4a, 0x1a74, 0x1a8d, 0x1aee, 0x1b81, 0x1baf, 0x1d3e, 0x1d74, 0x1d98, 0x1da9, 0x1e0a, 0x1e7e, 0x1ead, 0x1ed9, 0x1fcc);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetHash32, 0x86, 0xaf, 0x108, 0x1b5, 0x1d3, 0x24a, 0x38b, 0x41a, 0x45c, 0x4e2, 0x61c, 0x6db, 0x84a, 0x8f7, 0x94f, 0x96a, 0x99a, 0xa0e, 0xb84, 0xb8d, 0xbd9, 0xbf1, 0xc3e, 0xc95, 0xcdb, 0xdff, 0xedb, 0xee0, 0xf61, 0xf96, 0x1066, 0x1070, 0x1089, 0x10b3, 0x1133, 0x11ab, 0x12d2, 0x132c, 0x134b, 0x14f2, 0x1579, 0x16e8, 0x16f2, 0x17e1, 0x1861, 0x1968, 0x1aef, 0x1b55, 0x1b5e, 0x1bed, 0x1cdd, 0x1cf7, 0x1d4d, 0x1e6f, 0x1e84, 0x1e8a, 0x1e90, 0x1f0c, 0x1f75);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_EvalLevelFieldVariableRef, 0x242, 0x2aa, 0x2cf, 0x2d1, 0x344, 0x469, 0x68c, 0x699, 0x69f, 0x6c5, 0x754, 0x781, 0x882, 0x92f, 0x9e8, 0x9f5, 0xab9, 0xaf4, 0xc12, 0xda4, 0xdfa, 0xf57, 0xf84, 0xfa6, 0x105a, 0x106d, 0x11b5, 0x11e5, 0x1234, 0x1310, 0x15fa, 0x1625, 0x1791, 0x1796, 0x1835, 0x1848, 0x1999, 0x19d7, 0x19dd, 0x1a5b, 0x1ace, 0x1ae5, 0x1bf2, 0x1c3e, 0x1ca4, 0x1f3b);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_SingleEndon, 0x8b, 0x18a, 0x20e, 0x307, 0x402, 0x41e, 0x474, 0x51b, 0x571, 0x5b6, 0x643, 0x763, 0x79e, 0x7f9, 0x811, 0x845, 0x984, 0x9c3, 0x9ef, 0xbd2, 0xc4b, 0xcb2, 0xd91, 0xdc1, 0xe27, 0xece, 0xf31, 0x100c, 0x108f, 0x10de, 0x1179, 0x11d0, 0x14ef, 0x1555, 0x160e, 0x1674, 0x17b0, 0x17d1, 0x1870, 0x18f7, 0x1a1b, 0x1a29, 0x1a79, 0x1bdf, 0x1c5d, 0x1d55, 0x1db0, 0x1e52, 0x1e8b, 0x1e93);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_Notify, 0x46, 0xa1, 0x31f, 0x3d7, 0x417, 0x4a5, 0x4c7, 0x527, 0x5ff, 0x605, 0x7f0, 0x837, 0x87c, 0x87d, 0x8e1, 0x920, 0xa2d, 0xa47, 0xaeb, 0xaf1, 0xafd, 0xb8b, 0xb8e, 0xb99, 0xbde, 0xc5a, 0xc65, 0xcd4, 0xcf7, 0xd78, 0xdeb, 0xe10, 0xe7b, 0xeee, 0xf5b, 0xfbb, 0xfc3, 0x1013, 0x1085, 0x113e, 0x1187, 0x11ca, 0x11d7, 0x1207, 0x1245, 0x136b, 0x1435, 0x1560, 0x1589, 0x1616, 0x1648, 0x1666, 0x16a7, 0x16a8, 0x16b9, 0x16be, 0x16c1, 0x179c, 0x1880, 0x191e, 0x1939, 0x1ad7, 0x1b1a, 0x1bbb, 0x1c7e, 0x1d01, 0x1dc5, 0x1de1, 0x1f09, 0x1f70);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_FirstArrayKey, 0xb2, 0x27d, 0x329, 0x33f, 0x40a, 0x5f3, 0x619, 0x722, 0x82b, 0x987, 0xa3f, 0xaa5, 0xbc2, 0xbcd, 0xc45, 0xca9, 0xeda, 0xf2e, 0x10c2, 0x10ff, 0x1174, 0x1289, 0x1320, 0x133a, 0x1352, 0x14d5, 0x1500, 0x15e2, 0x162a, 0x1670, 0x1792, 0x181c, 0x18a7, 0x1913, 0x195d, 0x1b2a, 0x1c87, 0x1ee3, 0x1f95, 0x1fcb);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_NextArrayKey, 0x25, 0x106, 0x1a6, 0x2ae, 0x2e8, 0x2f0, 0x44f, 0x4c8, 0x516, 0x614, 0x6c1, 0x6cd, 0xa16, 0xa64, 0xa98, 0xaab, 0xad5, 0xae5, 0xb1a, 0xb61, 0xb81, 0xc1b, 0xc55, 0xcca, 0xd43, 0xe05, 0xf04, 0xfc1, 0xfed, 0x100a, 0x1052, 0x1082, 0x1109, 0x1171, 0x12ef, 0x132e, 0x136e, 0x1486, 0x14cc, 0x14f3, 0x1501, 0x1698, 0x16af, 0x16f1, 0x17b4, 0x17f0, 0x1887, 0x1966, 0x19fc, 0x1a44, 0x1a89, 0x1af6, 0x1b65, 0x1bc1, 0x1ebc, 0x1fd2, 0x1feb);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_EvalArray, 0x4f, 0xa7, 0x214, 0x232, 0x34b, 0x3e3, 0x3fd, 0x4b1, 0x53a, 0x63c, 0x742, 0x771, 0x77d, 0x7a6, 0x805, 0x9d8, 0xa41, 0xaa3, 0xbf2, 0xbf8, 0xc57, 0xccf, 0xcde, 0xcea, 0xcee, 0xe13, 0xe4f, 0xe6f, 0x1107, 0x11b9, 0x12ff, 0x1343, 0x13a4, 0x140d, 0x142f, 0x149b, 0x15d3, 0x173a, 0x1852, 0x1863, 0x1958, 0x19c8, 0x1a06, 0x1a85, 0x1ac6, 0x1bb7, 0x1bc6, 0x1c00, 0x1c1e, 0x1ce1, 0x1d1d, 0x1e44, 0x1e45, 0x1e5a, 0x1e88, 0x1ec4, 0x1f32, 0x1fa3);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ClassFunctionCall, 0x3e, 0xa8, 0x147, 0x316, 0x391, 0x556, 0x5d9, 0x62d, 0x7ba, 0x7cd, 0x7ed, 0x829, 0x8a8, 0x8d7, 0x975, 0x9ba, 0xa34, 0xb7e, 0xc27, 0xd3f, 0xe28, 0xe37, 0xe68, 0xe88, 0xe99, 0xf00, 0xf19, 0xf1a, 0xfaf, 0xfd8, 0xfef, 0x1056, 0x1068, 0x116e, 0x1265, 0x1453, 0x1503, 0x158d, 0x1636, 0x16cb, 0x1812, 0x186e, 0x1893, 0x18f4, 0x19b7, 0x19e2, 0x1b98, 0x1bf8, 0x1c60, 0x1c8a, 0x1d8f, 0x1ddc, 0x1dee, 0x1e89, 0x1f6d, 0x1f83);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ClassFunctionThreadCall, 0x1c9, 0x247, 0x2c7, 0x323, 0x425, 0x485, 0x4a6, 0x515, 0x573, 0x620, 0x689, 0x6b0, 0x872, 0x88f, 0x898, 0x8a7, 0x8df, 0xa53, 0xa74, 0xac7, 0xb06, 0xceb, 0xe2d, 0xf02, 0x10ea, 0x1200, 0x1211, 0x1242, 0x13f0, 0x143d, 0x146c, 0x14b6, 0x1516, 0x158f, 0x1676, 0x1708, 0x1749, 0x175f, 0x17df, 0x1827, 0x18ae, 0x18d9, 0x1979, 0x1a7d, 0x1d29, 0x1db5, 0x1dda, 0x1e11, 0x1e63, 0x1e69, 0x1e8f, 0x1efe, 0x1f63);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_CastFieldObject, 0x3f, 0xa9, 0x19f, 0x3c8, 0x47f, 0x4ed, 0x5b8, 0x668, 0x6ef, 0x756, 0x7c0, 0x8cd, 0x9d4, 0xab3, 0xacd, 0xc24, 0xd19, 0xdba, 0xdf3, 0xe43, 0x1000, 0x10ba, 0x10e3, 0x117c, 0x136c, 0x14a6, 0x16aa, 0x1bab, 0x1bd4, 0x1cdb, 0x1d9c, 0x1e2d, 0x1e70, 0x1f3e, 0x1f5f);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ClearArray, 0x19, 0xec, 0x19b, 0x1bb, 0x222, 0x261, 0x296, 0x313, 0x487, 0x572, 0x69c, 0x732, 0x77c, 0x825, 0x8b6, 0x921, 0x9ce, 0xaaa, 0xaae, 0xad8, 0xb1b, 0xbe4, 0xc56, 0xd27, 0xe5f, 0xea1, 0xef1, 0xf05, 0xf56, 0xfa3, 0x108a, 0x1194, 0x125c, 0x134a, 0x13c0, 0x13e8, 0x14de, 0x154d, 0x160f, 0x161e, 0x1754, 0x17c6, 0x187a, 0x18d1, 0x191a, 0x1989, 0x1b6f, 0x1b71, 0x1bd7, 0x1cb9, 0x1d5b, 0x1dfe);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_VectorConstant, 0x53, 0x5a, 0x6a, 0x10e, 0x17f, 0x2be, 0x2ef, 0x362, 0x44b, 0x452, 0x45f, 0x464, 0x50a, 0x561, 0x587, 0x706, 0x72d, 0x775, 0x7fe, 0x8fa, 0x96c, 0x970, 0x9f0, 0xaf9, 0xb09, 0xd9d, 0xe42, 0xefc, 0xf5f, 0x1160, 0x1199, 0x11f6, 0x127f, 0x130a, 0x138f, 0x13b1, 0x13df, 0x13e1, 0x1432, 0x143f, 0x14b3, 0x14f9, 0x1590, 0x1699, 0x171a, 0x173e, 0x175b, 0x1768, 0x184e, 0x1855, 0x18a1, 0x1977, 0x1a32, 0x1a43, 0x1ab5, 0x1acb, 0x1b48, 0x1b93, 0x1c71, 0x1d46, 0x1de8, 0x1e6a, 0x1f1e, 0x1f6c, 0x1fbe);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Plus, 0x191, 0x235, 0x368, 0x382, 0x3ac, 0x3b5, 0x3ee, 0x472, 0x48d, 0x490, 0x499, 0x4fc, 0x52d, 0x56f, 0x6aa, 0x6da, 0x78f, 0x7d8, 0x9a3, 0xa15, 0xa82, 0xc8a, 0xe0c, 0xe36, 0xe62, 0xe9f, 0xf7f, 0xfe7, 0x10a0, 0x10cd, 0x112e, 0x116f, 0x118d, 0x11da, 0x12a3, 0x12c3, 0x13f7, 0x1409, 0x14c8, 0x1608, 0x1639, 0x1678, 0x172a, 0x188b, 0x18d2, 0x18d3, 0x190e, 0x1919, 0x19b3, 0x1a57, 0x1a60, 0x1bc0, 0x1c68, 0x1d2a, 0x1d3f, 0x1d50, 0x1d7a, 0x1d85, 0x1ddd, 0x1e3c, 0x1f26, 0x1f3d, 0x1fb3, 0x1fdf);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_EvalLevelFieldVariable, 0x27, 0x9f, 0xae, 0x12b, 0x141, 0x18f, 0x2ba, 0x342, 0x423, 0x42f, 0x4b0, 0x4c9, 0x4f4, 0x6cc, 0x6dc, 0x736, 0x7b4, 0x87b, 0x910, 0x9ad, 0x9c1, 0xa7e, 0xb00, 0xb22, 0xb80, 0xc2a, 0xc34, 0xdae, 0xe5d, 0xe61, 0xef2, 0xf68, 0x10b9, 0x110d, 0x11b8, 0x1364, 0x142b, 0x14f7, 0x1584, 0x1637, 0x16fd, 0x1746, 0x175c, 0x1765, 0x188a, 0x18c2, 0x18df, 0x1a12, 0x1b96, 0x1b9f, 0x1bb2, 0x1c19, 0x1c4c, 0x1c93, 0x1cb5, 0x1d69, 0x1d89, 0x1db9, 0x1ed2, 0x1ffd);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Return, 0xa3, 0x2a3, 0x304, 0x324, 0x42c, 0x48f, 0x56e, 0x576, 0x59e, 0x8e3, 0x8f2, 0x98a, 0xac1, 0xb86, 0xc16, 0xcc5, 0xce1, 0xd60, 0xf12, 0xf44, 0xfb8, 0x108c, 0x112c, 0x1132, 0x13de, 0x1428, 0x14a4, 0x16dd, 0x17b9, 0x1815, 0x1917, 0x1b6a, 0x1b9c, 0x1bee, 0x1ccb, 0x1d38, 0x1e29, 0x1e35, 0x1e3f, 0x1f68);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_EvalFieldVariable, 0x84, 0x309, 0x3bc, 0x3bd, 0x409, 0x430, 0x480, 0x4c0, 0x533, 0x5fc, 0x608, 0x91d, 0x928, 0x946, 0xa11, 0xa44, 0xa4a, 0xbb8, 0xbe0, 0xccd, 0xd51, 0xe1b, 0xe78, 0xea2, 0xf24, 0xf71, 0xfc0, 0x1005, 0x100f, 0x111f, 0x1168, 0x12f7, 0x1334, 0x13a5, 0x1521, 0x1684, 0x1730, 0x174d, 0x186d, 0x18d6, 0x19b8, 0x19e6, 0x1b45, 0x1b87, 0x1c2a, 0x1d60, 0x1e12, 0x1e7b, 0x1ec2, 0x1f1a, 0x1f49, 0x1f9b);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_EvalSelfFieldVar, 0xcc, 0xe0, 0x1d8, 0x216, 0x273, 0x3a8, 0x449, 0x4e5, 0x560, 0x64a, 0x678, 0x6cb, 0x74e, 0x790, 0x81f, 0x82f, 0x885, 0x887, 0x8a9, 0x90b, 0xa08, 0xa59, 0xab7, 0xacb, 0xc30, 0xcc2, 0xd89, 0xd98, 0xda0, 0xdac, 0xf27, 0xf62, 0xf75, 0xfb5, 0x1330, 0x1357, 0x14af, 0x14b4, 0x1575, 0x159b, 0x1611, 0x1664, 0x16f5, 0x171c, 0x1760, 0x17e5, 0x184f, 0x18f6, 0x1911, 0x192a, 0x1a9c, 0x1b39, 0x1c33, 0x1c3b, 0x1c6b, 0x1c9c, 0x1cdf, 0x1da5, 0x1df7, 0x1f8f, 0x1ff3);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_CallBuiltinMethod, 0x82, 0x20c, 0x245, 0x2d4, 0x2f2, 0x36d, 0x3c3, 0x404, 0x468, 0x503, 0x76c, 0x7eb, 0x8c2, 0xa03, 0xa2c, 0xb38, 0xb5c, 0xb62, 0xbdc, 0xc18, 0xc78, 0xc9b, 0xdb0, 0xdb7, 0xdcf, 0xdea, 0xdef, 0xe2f, 0xe39, 0x10c8, 0x10d5, 0x10db, 0x115e, 0x1198, 0x1271, 0x127b, 0x12a7, 0x12ee, 0x13d4, 0x15b8, 0x17ae, 0x1837, 0x194b, 0x19ae, 0x1a49, 0x1b27, 0x1c89, 0x1cbc, 0x1d43, 0x1f36, 0x1f3a, 0x1fb6);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetSelf, 0x146, 0x156, 0x180, 0x1b2, 0x215, 0x27f, 0x29d, 0x32b, 0x367, 0x36f, 0x43c, 0x492, 0x494, 0x5e8, 0x5ec, 0x6e8, 0x753, 0x792, 0x798, 0x861, 0x8a3, 0x929, 0x963, 0x995, 0xb4a, 0xb7d, 0xbe5, 0xc2f, 0xc7a, 0xd4b, 0xe94, 0xe9e, 0xf35, 0xfbc, 0xfe0, 0x1167, 0x1172, 0x11be, 0x11dd, 0x1374, 0x138d, 0x1395, 0x13fb, 0x141e, 0x142a, 0x14bf, 0x1515, 0x157f, 0x15a5, 0x15ab, 0x15ee, 0x16a3, 0x175d, 0x1777, 0x17a0, 0x185a, 0x1921, 0x1b37, 0x1ba4, 0x1c77, 0x1d11, 0x1d7f, 0x1da0, 0x1f4c, 0x1f9e);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetUndefined, 0x4b, 0x179, 0x1db, 0x1e2, 0x241, 0x354, 0x3ab, 0x444, 0x55e, 0x5b4, 0x62e, 0x717, 0x755, 0x768, 0x777, 0x8ab, 0xa09, 0xa5c, 0xb16, 0xbac, 0xca2, 0xd4c, 0xd7b, 0xdd4, 0xdd9, 0xddb, 0xeaa, 0xeba, 0xeca, 0xf1f, 0xf86, 0x1039, 0x106a, 0x10e9, 0x1125, 0x1155, 0x11f5, 0x12c2, 0x1425, 0x1470, 0x15a8, 0x16f8, 0x172d, 0x19f7, 0x19fe, 0x1a22, 0x1cd8, 0x1e15, 0x1e60, 0x1fec);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_EvalFieldVariableRef, 0x11, 0x36, 0xbb, 0xe3, 0x11c, 0x13a, 0x1c7, 0x40c, 0x4b3, 0x524, 0x526, 0x5c8, 0x655, 0x6d4, 0x77f, 0x7b0, 0x7e2, 0x808, 0x835, 0x8f4, 0x940, 0x95b, 0x9d7, 0x9dd, 0xade, 0xaff, 0xb29, 0xb7b, 0xe46, 0xe7d, 0xe86, 0xebd, 0xf0b, 0x10ac, 0x10c4, 0x110f, 0x1131, 0x11a0, 0x12b2, 0x1301, 0x1347, 0x1353, 0x1367, 0x1496, 0x14fa, 0x1665, 0x16ab, 0x1722, 0x174b, 0x1822, 0x1867, 0x1881, 0x1904, 0x1960, 0x19f5, 0x1a56, 0x1ac1, 0x1ba1, 0x1bc3, 0x1c53, 0x1d5e, 0x1d64, 0x1df3, 0x1e1a, 0x1ec1, 0x1f90, 0x1fd9, 0x1ff6);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_EvalSelfFieldVarRef, 0x109, 0x144, 0x2f4, 0x321, 0x363, 0x3d2, 0x581, 0x68e, 0x70e, 0x854, 0xa1c, 0xa89, 0xa9e, 0xad7, 0xaf3, 0xb2a, 0xbbd, 0xf5e, 0xfe8, 0x1053, 0x1117, 0x1158, 0x12bd, 0x135e, 0x1410, 0x15af, 0x16b8, 0x16bd, 0x1895, 0x1a00, 0x1a3d, 0x1ab7, 0x1ac5, 0x1d2e, 0x1d39, 0x1e42, 0x1f84);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_JumpOnTrueExpr, 0xf2, 0x289, 0x2c1, 0x2fa, 0x453, 0x4b2, 0x592, 0x5a3, 0x5c2, 0x684, 0x744, 0x911, 0x92d, 0x9b2, 0xa10, 0xa66, 0xb82, 0xbbb, 0xd0a, 0xd28, 0xd75, 0xd8d, 0xe35, 0xebb, 0xef0, 0xefa, 0xfc4, 0x10c9, 0x125b, 0x126e, 0x1348, 0x150a, 0x150e, 0x183e, 0x18a2, 0x18d8, 0x18fa, 0x1901, 0x1978, 0x1986, 0x19c3, 0x1b53, 0x1b9a, 0x1bf3, 0x1e1c, 0x1e4f, 0x1ea0, 0x1f5a, 0x1fc8);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_JumpOnFalseExpr, 0xc0, 0xc4, 0xed, 0x16b, 0x1a5, 0x244, 0x24e, 0x2ab, 0x340, 0x3de, 0x579, 0x5da, 0x5e2, 0x5e4, 0x680, 0x6eb, 0x6fa, 0x705, 0x7c1, 0x7fc, 0x8cf, 0x9fc, 0xa4e, 0xa75, 0xa8b, 0xb21, 0xb6a, 0xb98, 0xd66, 0xe54, 0xef6, 0xf1d, 0xf65, 0x1097, 0x1136, 0x119d, 0x11b6, 0x1302, 0x141a, 0x146e, 0x1574, 0x15c5, 0x16ed, 0x1721, 0x1738, 0x17b5, 0x1845, 0x1860, 0x1872, 0x1a4b, 0x1a54, 0x1a58, 0x1a5e, 0x1a77, 0x1af8, 0x1b00, 0x1b3e, 0x1b9d, 0x1c95, 0x1d8e, 0x1ef4, 0x1f48, 0x1f61, 0x1f7f, 0x1fce);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_CastBool, 0x98, 0xfb, 0x14c, 0x1dd, 0x537, 0x57f, 0x594, 0x5c5, 0x647, 0x758, 0x7ad, 0x7f8, 0x88b, 0x8ef, 0x955, 0x98d, 0x9cb, 0xa8f, 0xb70, 0xbb5, 0xcad, 0xcb3, 0xd04, 0x11df, 0x1293, 0x152c, 0x177e, 0x1862, 0x1a73, 0x1b3f, 0x1b5d, 0x1bca, 0x1eb3, 0x1f80, 0x1fc7);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Inc, 0x61, 0x14a, 0x22a, 0x375, 0x387, 0x399, 0x3e2, 0x4e3, 0x4e8, 0x56a, 0x6dd, 0x6e2, 0x7a1, 0x802, 0x84f, 0x864, 0x88e, 0x8b4, 0x93b, 0x98b, 0x9fa, 0xa39, 0xa92, 0xad3, 0xbc6, 0xbd6, 0xc7d, 0xcc3, 0xdc9, 0xe63, 0xe92, 0xefd, 0xf20, 0x1020, 0x104e, 0x10ae, 0x10e4, 0x1249, 0x1257, 0x13a8, 0x13b6, 0x13ca, 0x1426, 0x1484, 0x14c0, 0x14e4, 0x1604, 0x169f, 0x16f9, 0x17a2, 0x17c8, 0x17ed, 0x1808, 0x1823, 0x1865, 0x1927, 0x19b0, 0x1a16, 0x1a45, 0x1aa4, 0x1b25, 0x1d08, 0x1d5c, 0x1d94, 0x1df8, 0x1e37, 0x1eb2, 0x1f28, 0x1f64);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_DevblockBegin, 0x64, 0x29b, 0x3af, 0x44c, 0x4c1, 0x55b, 0x5a7, 0x5e6, 0x65c, 0x695, 0x806, 0x8d6, 0x9a0, 0xb0f, 0xb71, 0xbd0, 0xe4d, 0xfe6, 0xfee, 0x1119, 0x113f, 0x1153, 0x11d8, 0x1286, 0x1373, 0x1547, 0x1569, 0x156e, 0x1594, 0x15b6, 0x164b, 0x1659, 0x1711, 0x1769, 0x19db, 0x1a17, 0x1a4d, 0x1aca, 0x1b84, 0x1c35, 0x1dab, 0x1e6d, 0x1ea6, 0x1f11, 0x1faf);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Dec, 0x2c, 0x95, 0xfc, 0x1a7, 0x2bb, 0x394, 0x467, 0x5c6, 0x5f4, 0x5fb, 0x703, 0x738, 0x7df, 0x839, 0x870, 0xaa0, 0xb04, 0xb4e, 0xbae, 0xbaf, 0xc07, 0xc5d, 0xce2, 0xd56, 0xd8b, 0xd94, 0xddd, 0xdf8, 0xfb4, 0xfbf, 0xfc2, 0x104f, 0x10eb, 0x10f7, 0x1103, 0x1361, 0x1439, 0x14ba, 0x14fb, 0x1517, 0x1533, 0x155f, 0x15ae, 0x165d, 0x1690, 0x1700, 0x1723, 0x1778, 0x177a, 0x181d, 0x1871, 0x19ab, 0x1acf, 0x1b54, 0x1b61, 0x1b89, 0x1bd9, 0x1bdc, 0x1c32, 0x1d4c, 0x1d58, 0x1de6, 0x1e2b, 0x1eed, 0x1f67);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Minus, 0xdd, 0x1b7, 0x1e4, 0x23e, 0x24d, 0x32c, 0x330, 0x405, 0x434, 0x71c, 0x739, 0x764, 0x796, 0x7d4, 0x923, 0x994, 0xab1, 0xb47, 0xc9a, 0xcff, 0xd07, 0xf87, 0x10fc, 0x110a, 0x124b, 0x1256, 0x129d, 0x12c5, 0x12f9, 0x13b9, 0x13bb, 0x14c7, 0x14e5, 0x15bb, 0x1642, 0x1693, 0x17ce, 0x1ab0, 0x1c18);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GreaterThanOrEqualTo, 0x1b6, 0x2b0, 0x396, 0x3eb, 0x488, 0x4b8, 0x4bf, 0x53b, 0x5e7, 0x899, 0x971, 0x9bc, 0x9bd, 0xa4c, 0xa9c, 0xb5d, 0xb79, 0xba4, 0xd92, 0xe82, 0xe96, 0xec2, 0xfd1, 0x101a, 0x1061, 0x10a8, 0x1122, 0x118f, 0x11a7, 0x11f1, 0x1263, 0x1392, 0x1398, 0x14bb, 0x1552, 0x1623, 0x17e3, 0x1903, 0x190f, 0x199e, 0x19bc, 0x1a31, 0x1b5f, 0x1b66, 0x1b73, 0x1bae, 0x1ce2, 0x1fd1, 0x1fee);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_LessThanOrEqualTo, 0xf6, 0x1bf, 0x1cb, 0x21e, 0x31a, 0x347, 0x350, 0x465, 0x483, 0x525, 0x53d, 0x630, 0x639, 0x715, 0x7cc, 0x95e, 0x968, 0xa24, 0xad2, 0xb2b, 0xba7, 0xc2b, 0xca7, 0xcaa, 0xd2e, 0xd47, 0xdaf, 0xe3f, 0xe45, 0xe53, 0xf89, 0xf9d, 0xfc7, 0x112a, 0x1135, 0x1154, 0x1163, 0x1189, 0x11b3, 0x121f, 0x133c, 0x1381, 0x1464, 0x1465, 0x14f1, 0x15f9, 0x1724, 0x17b8, 0x1875, 0x199a, 0x1a2b, 0x1a80, 0x1ab2, 0x1abe, 0x1ad6, 0x1c67, 0x1c96, 0x1caf, 0x1cff, 0x1d6e, 0x1d79, 0x1e97, 0x1f55);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_LessThan, 0x47, 0xc2, 0xe4, 0x1a4, 0x236, 0x335, 0x3cf, 0x41d, 0x530, 0x5af, 0x5cd, 0x5f8, 0x67e, 0x69b, 0x6fb, 0x733, 0x7c5, 0x853, 0x856, 0x922, 0x972, 0x97d, 0x9dc, 0xa1e, 0xa3b, 0xa58, 0xa99, 0xbc1, 0xbdd, 0xc1c, 0xc6c, 0xc89, 0xca5, 0xd2f, 0xdc3, 0xe5c, 0xead, 0xed2, 0xf11, 0xf53, 0x103b, 0x1079, 0x10f8, 0x113a, 0x1140, 0x1141, 0x1184, 0x11b0, 0x120c, 0x122d, 0x1261, 0x1274, 0x12c8, 0x1415, 0x15ac, 0x1640, 0x1660, 0x16b3, 0x16cf, 0x17a6, 0x17ba, 0x17ff, 0x1912, 0x197d, 0x19ee, 0x1a90, 0x1af2, 0x1d7e, 0x1da4, 0x1f2f);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GreaterThan, 0x49, 0x89, 0x90, 0x167, 0x2e2, 0x3f4, 0x4d6, 0x4ea, 0x584, 0x595, 0x613, 0x76d, 0x7a5, 0x87a, 0x8c3, 0x957, 0x9c5, 0xa42, 0xa65, 0xa71, 0xa79, 0xaf2, 0xc87, 0xcfb, 0xd1b, 0xd5d, 0xe3b, 0xe52, 0xed1, 0xedd, 0xf0d, 0xf22, 0xf85, 0xfa9, 0x1042, 0x11ac, 0x11ea, 0x1213, 0x13a6, 0x13e7, 0x156b, 0x1661, 0x17ec, 0x193a, 0x1a2a, 0x1ae4, 0x1bd6, 0x1c29, 0x1d54, 0x1e6b, 0x1eeb, 0x1f0f, 0x1f8e);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Divide, 0x50, 0x1ba, 0x22d, 0x234, 0x255, 0x35e, 0x366, 0x42a, 0x553, 0x779, 0x784, 0x7b3, 0x807, 0x9a5, 0xb42, 0xbed, 0xc62, 0xcf9, 0xd1a, 0xdce, 0xdd5, 0xe2b, 0xe97, 0xed6, 0x1036, 0x107a, 0x107e, 0x10aa, 0x10bc, 0x10cc, 0x10df, 0x13d1, 0x13d3, 0x1442, 0x14cf, 0x1557, 0x15c0, 0x15d6, 0x15ff, 0x189a, 0x18e0, 0x192b, 0x192c, 0x1a11, 0x1a46, 0x1a48, 0x1abc, 0x1ad2, 0x1b7f, 0x1b83, 0x1b88, 0x1bac, 0x1bcd, 0x1bfe, 0x1d81, 0x1deb, 0x1df6, 0x1e94, 0x1eb7, 0x1ecb, 0x1f18, 0x1f57, 0x1f82);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Equal, 0x149, 0x256, 0x281, 0x602, 0x679, 0x67a, 0x82e, 0x874, 0x8b8, 0x8f9, 0x94d, 0x9c7, 0xa60, 0xab8, 0xb36, 0xc5c, 0xcd9, 0xd57, 0xdd0, 0x114a, 0x116d, 0x1206, 0x1233, 0x130e, 0x13ef, 0x13f8, 0x146f, 0x148e, 0x1553, 0x16e1, 0x178f, 0x1825, 0x18cb, 0x18e9, 0x19bd, 0x1a9f, 0x1cbe, 0x1ccc, 0x1e5d, 0x1e61, 0x1eba, 0x1f59, 0x1f9a, 0x1fa2, 0x1fff);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_SuperEqual, 0x6c, 0x192, 0x34f, 0x479, 0x6bc, 0x711, 0x7a0, 0x7e5, 0x800, 0x9f6, 0xa57, 0xab2, 0xb59, 0xb66, 0xb89, 0xbc4, 0xc8f, 0xca4, 0xd76, 0xf55, 0x112f, 0x120d, 0x121b, 0x12b7, 0x130c, 0x13c5, 0x1424, 0x15ca, 0x1688, 0x1847, 0x1954, 0x197c, 0x1a28, 0x1a53, 0x1b8e, 0x1c44, 0x1ce0, 0x1df2, 0x1f05, 0x1f0a, 0x1fd8);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_NotEqual, 0x45, 0x2da, 0x3c1, 0x462, 0x477, 0x529, 0x8ec, 0x935, 0xbec, 0xe04, 0xeaf, 0xeb8, 0xf77, 0xfd5, 0x109f, 0x10b5, 0x1250, 0x128b, 0x1319, 0x1474, 0x16d8, 0x1876, 0x193f, 0x19f3, 0x1a6a, 0x1b8d, 0x1c4d, 0x1e0b, 0x1e7c, 0x1ece, 0x1eef);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_SuperNotEqual, 0xdc, 0x15e, 0x18e, 0x196, 0x1aa, 0x2a4, 0x300, 0x317, 0x371, 0x51d, 0x520, 0x590, 0x712, 0x7b2, 0x80d, 0x91c, 0x954, 0x998, 0x9b0, 0xabf, 0xbd1, 0xcb8, 0xd21, 0xdcb, 0xe7c, 0xfae, 0x1067, 0x1104, 0x11cf, 0x12eb, 0x1344, 0x1456, 0x14d8, 0x15e4, 0x16d0, 0x1742, 0x1751, 0x17a9, 0x199c, 0x1aa1, 0x1aa2, 0x1acd, 0x1c98, 0x1cd9, 0x1e66, 0x1ed7, 0x1f27, 0x1f2b, 0x1f4a, 0x1fb2, 0x1fe6, 0x1fef);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ClearFieldVariable, 0x8c, 0x12c, 0x1cc, 0x2c6, 0x322, 0x7c8, 0x7dd, 0x81d, 0x827, 0x941, 0x979, 0x99f, 0xb56, 0xca3, 0xe7e, 0x1092, 0x10fe, 0x1114, 0x1144, 0x1190, 0x11c1, 0x12ea, 0x131e, 0x141f, 0x14a0, 0x14df, 0x1506, 0x167c, 0x17af, 0x180f, 0x189b, 0x18c1, 0x1967, 0x1a99, 0x1abb, 0x1ac4, 0x1e18, 0x1f5e);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_VectorScale, 0x66, 0x103, 0x1c8, 0x1ff, 0x276, 0x2f1, 0x390, 0x39c, 0x40b, 0x47d, 0x4d2, 0x52c, 0x71d, 0x7c3, 0x7d3, 0xa67, 0xa73, 0xb9e, 0xbd4, 0xc49, 0xc85, 0xef8, 0xf41, 0x1128, 0x115f, 0x117a, 0x1243, 0x128c, 0x12a0, 0x12f0, 0x14f0, 0x1513, 0x158e, 0x168a, 0x1731, 0x1799, 0x17ac, 0x185b, 0x1900, 0x1945, 0x199d, 0x1a3b, 0x1adf, 0x1b51, 0x1c49, 0x1e51, 0x1ed5, 0x1f8c, 0x1f92, 0x1ffb);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetTime, 0x117, 0x223, 0x230, 0x277, 0x2e4, 0x519, 0x577, 0x583, 0x64f, 0x6f3, 0x6f5, 0x7d2, 0x926, 0x97f, 0x9a4, 0xb18, 0xb95, 0xba5, 0xbea, 0xc39, 0xd7d, 0xe20, 0xe34, 0xec6, 0xf2c, 0xf99, 0x1094, 0x10ca, 0x1183, 0x1388, 0x1457, 0x15a6, 0x15b7, 0x15f6, 0x1627, 0x1706, 0x179f, 0x17c1, 0x17de, 0x1857, 0x199f, 0x1ad3, 0x1b8f, 0x1b97, 0x1be8, 0x1c06, 0x1c61, 0x1cd6, 0x1cf0, 0x1d13, 0x1d63, 0x1e4e, 0x1e86, 0x1edd, 0x1f94, 0x1fab);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetSelfObject, 0x31, 0xff, 0x102, 0x182, 0x1d6, 0x1e3, 0x212, 0x266, 0x3e6, 0x4dd, 0x59f, 0x787, 0x93c, 0xa2b, 0xadb, 0xbb6, 0xcae, 0xce7, 0xe1d, 0xe31, 0xe32, 0xe6a, 0xed7, 0xf58, 0xf7b, 0xf9f, 0x101f, 0x10b0, 0x10ed, 0x10f9, 0x1185, 0x119b, 0x11ae, 0x11f3, 0x1354, 0x13f3, 0x142e, 0x16b7, 0x1712, 0x1720, 0x1729, 0x1750, 0x1780, 0x17a3, 0x17eb, 0x187f, 0x18a8, 0x1969, 0x19f4, 0x19ff, 0x1bdd, 0x1c5b, 0x1c7d, 0x1d86, 0x1e27, 0x1ec5, 0x1f25, 0x1f51, 0x1fac);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetInteger, 0x100, 0x172, 0x1a2, 0x1af, 0x343, 0x3e7, 0x407, 0x4bc, 0x4d7, 0x4df, 0x5d8, 0x657, 0x8f5, 0x8f6, 0x943, 0x951, 0x982, 0x983, 0x9c0, 0xa35, 0xadc, 0xb13, 0xbf3, 0xbf7, 0xd17, 0xd2a, 0xe30, 0xe3d, 0xe75, 0xe9a, 0xeb3, 0x1009, 0x1012, 0x10b6, 0x1106, 0x11a6, 0x11c9, 0x1246, 0x1262, 0x1338, 0x1488, 0x159a, 0x164f, 0x16ea, 0x1805, 0x1833, 0x18d5, 0x1991, 0x1a19, 0x1a1f, 0x1aad, 0x1b21, 0x1b35, 0x1bbd, 0x1c03, 0x1c1a, 0x1c45, 0x1d36, 0x1e72, 0x1e85, 0x1f4e);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetUIntPtr, 0x63, 0x67, 0x204, 0x325, 0x34e, 0x397, 0x54a, 0x597, 0x64d, 0x672, 0x8d3, 0x919, 0x93f, 0x9eb, 0xa31, 0xab4, 0xb5e, 0xc26, 0xc74, 0xc8e, 0xcf5, 0xd45, 0xd5b, 0xee2, 0x10e5, 0x115d, 0x1182, 0x11f9, 0x11fb, 0x128f, 0x1298, 0x12de, 0x135a, 0x13c6, 0x13fd, 0x1511, 0x152f, 0x1534, 0x1576, 0x1679, 0x177c, 0x17cb, 0x1839, 0x1959, 0x196c, 0x1992, 0x1a68, 0x1c24, 0x1ca6, 0x1d32, 0x1e39, 0x1f10, 0x1f7a, 0x1fa8, 0x1fca, 0x1ff7);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Multiply, 0xd9, 0x260, 0x2f5, 0x34d, 0x603, 0x61e, 0x626, 0x86e, 0x8b0, 0x905, 0x990, 0x9b5, 0xa12, 0xa18, 0xbb4, 0xc01, 0xdad, 0xe1a, 0xea0, 0xf0c, 0x100d, 0x102c, 0x1129, 0x117b, 0x12a4, 0x12b9, 0x140e, 0x14d1, 0x163f, 0x1788, 0x17a8, 0x17ea, 0x1854, 0x18de, 0x190c, 0x19ac, 0x1a59, 0x1aaf, 0x1bc7, 0x1c34, 0x1d3a, 0x1e23, 0x1ed3, 0x1eda, 0x1fde);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ShiftLeft, 0x18, 0x2e, 0x107, 0x268, 0x2d6, 0x3aa, 0x4d8, 0x4f0, 0x54d, 0x871, 0x8cc, 0x9ee, 0xaea, 0xd4e, 0xd5e, 0xd77, 0xf39, 0x105b, 0x10bf, 0x110c, 0x1149, 0x115a, 0x1197, 0x11bb, 0x1266, 0x12c6, 0x1396, 0x14a2, 0x14ce, 0x1573, 0x16c8, 0x1817, 0x1830, 0x188f, 0x18ec, 0x1b4f, 0x1bfa, 0x1cbb, 0x1cf9, 0x1d0d, 0x1d62, 0x1dde, 0x1ea1, 0x1fda);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ShiftRight, 0x5d, 0x69, 0x125, 0x4bd, 0x5ae, 0x5d0, 0x61d, 0x633, 0x63b, 0x658, 0x69e, 0x7ce, 0x7dc, 0x84c, 0xa9d, 0xaad, 0xab5, 0xaf8, 0xc2d, 0xc83, 0xcb4, 0xeab, 0xed9, 0x106c, 0x106e, 0x1102, 0x118c, 0x1337, 0x139d, 0x13c7, 0x1406, 0x140b, 0x1459, 0x1499, 0x151c, 0x1526, 0x157a, 0x159e, 0x1620, 0x16c0, 0x17d2, 0x1813, 0x187d, 0x19e5, 0x1a71, 0x1a7f, 0x1a82, 0x1b02, 0x1b19, 0x1c7f, 0x1cf8, 0x1d37, 0x1d5d, 0x1dea, 0x1e3a, 0x1e96);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_WaitTillFrameEnd, 0xf0, 0x23b, 0x30d, 0x436, 0x46f, 0x47a, 0x550, 0x6ff, 0x740, 0x76e, 0x934, 0xb03, 0xb69, 0xbaa, 0xc05, 0xe9c, 0xed5, 0xedc, 0x109e, 0x139a, 0x16e4, 0x17b1, 0x1873, 0x198d, 0x19f9, 0x1b4c, 0x1ba6, 0x1c78, 0x1cfe, 0x1d12, 0x1d6a, 0x1ea8, 0x1ec8, 0x1eea, 0x1f17);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetFunction, 0x7e, 0x83, 0xf1, 0x19a, 0x1e8, 0x237, 0x25e, 0x2de, 0x352, 0x385, 0x3c7, 0x5f7, 0x69a, 0x746, 0x7f6, 0x828, 0xa5a, 0xb78, 0xb97, 0xd3e, 0xd72, 0xdbe, 0xde0, 0xe5e, 0xf13, 0xf23, 0xf2b, 0xf88, 0xfa1, 0xffc, 0x1015, 0x101c, 0x1044, 0x1096, 0x10b7, 0x114d, 0x1165, 0x11d1, 0x1290, 0x12e4, 0x12ec, 0x1434, 0x14bd, 0x14d2, 0x1571, 0x15e3, 0x1615, 0x161a, 0x1652, 0x1669, 0x1673, 0x16b1, 0x1849, 0x1924, 0x1ae9, 0x1b20, 0x1b2c, 0x1c38, 0x1c52, 0x1c62, 0x1c82, 0x1cad, 0x1d18, 0x1dfa, 0x1e9b, 0x1eff, 0x1f12);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ScriptThreadCall, 0x1e5, 0x253, 0x2ad, 0x43a, 0x4eb, 0x674, 0x7fd, 0xb4b, 0xb87, 0xb94, 0xdd6, 0xe15, 0xf33, 0xf47, 0xf54, 0xfa4, 0x1088, 0x109d, 0x10f4, 0x11e9, 0x121d, 0x1238, 0x15f7, 0x163b, 0x16ec, 0x1763, 0x1841, 0x18b8, 0x19b5, 0x19d5, 0x1a81, 0x1b91, 0x1c07, 0x1c6c, 0x1dba);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ScriptFunctionCallPointer, 0x3a, 0x26b, 0x2ce, 0x2db, 0x2fd, 0x36b, 0x3f2, 0x4d3, 0x566, 0x5ca, 0x5d2, 0x650, 0x653, 0x67c, 0x9f3, 0xbd3, 0xbdf, 0xc33, 0xd32, 0xe14, 0x1166, 0x143c, 0x169d, 0x16a2, 0x1704, 0x180b, 0x1905, 0x197e, 0x19bb, 0x1a83, 0x1acc, 0x1e9f, 0x1ede);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ScriptMethodCallPointer, 0x35, 0x77, 0xd2, 0x188, 0x21f, 0x22b, 0x2b6, 0x2bf, 0x31c, 0x345, 0x4f7, 0x51c, 0x52a, 0x656, 0x728, 0x72f, 0x74f, 0x79b, 0x7c4, 0x98f, 0x9f4, 0xafe, 0xb08, 0xb3a, 0xb90, 0xc14, 0xd40, 0xd7f, 0xddc, 0xf74, 0x1080, 0x10b4, 0x112b, 0x11c7, 0x125f, 0x12e9, 0x139c, 0x1451, 0x14e6, 0x1548, 0x1651, 0x172c, 0x1744, 0x175e, 0x176d, 0x1784, 0x17f1, 0x183c, 0x19ce, 0x19e0, 0x1a10, 0x1ab9, 0x1b2f, 0x1b56, 0x1b75, 0x1b92, 0x1bec, 0x1d49, 0x1d7c, 0x1f07, 0x1f85);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ScriptThreadCallPointer, 0xa0, 0xb6, 0x11a, 0x14f, 0x209, 0x29f, 0x39b, 0x44d, 0x50b, 0x5b0, 0x5fe, 0x629, 0x65e, 0x68d, 0x822, 0xa00, 0xbd5, 0xc3c, 0xc72, 0xde1, 0xe06, 0xe9d, 0x1007, 0x1229, 0x126f, 0x1285, 0x13b4, 0x1449, 0x14aa, 0x153b, 0x15aa, 0x15b1, 0x1601, 0x17ca, 0x182a, 0x1858, 0x198b, 0x1aba, 0x1ae0, 0x1b50, 0x1c0d, 0x1c3f, 0x1cdc, 0x1d16, 0x1d30, 0x1e10, 0x1e17, 0x1f73);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_ScriptMethodThreadCallPointer, 0xb1, 0xb3, 0x22c, 0x377, 0x42d, 0x63a, 0x65d, 0x66d, 0x850, 0x96d, 0x9e9, 0xb6e, 0xbce, 0xc37, 0x10be, 0x1124, 0x1214, 0x135d, 0x14f8, 0x1550, 0x17c4, 0x1832, 0x1933, 0x1b57, 0x1b80, 0x1cf4, 0x1d26, 0x1dc0, 0x1dc7, 0x1de2);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_T7_ProfileStart, 0xea, 0x161, 0x1e6, 0x3a3, 0x3ad, 0x3df, 0x498, 0x4a1, 0x59d, 0x5f6, 0x62b, 0x721, 0x749, 0x7d5, 0x8de, 0x8f0, 0x986, 0xa5d, 0xbb1, 0xd55, 0xd68, 0xdec, 0xf09, 0x102d, 0x10ad, 0x123d, 0x151d, 0x1591, 0x15a3, 0x15bc, 0x15fb, 0x168b, 0x17da, 0x180d, 0x182e, 0x1886, 0x18f0, 0x1a91, 0x1b2b, 0x1dbb, 0x1e4d, 0x1ea9, 0x1ef7, 0x1fe5, 0x1fe7);

			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_GetLevel, 0x8f, 0x1ae, 0x327, 0x3a7, 0x3ae, 0x3b8, 0x548, 0x562, 0x5cc, 0x5e0, 0x725, 0x7d1, 0xa45, 0xab0, 0xac6, 0xb31, 0xc03, 0xc60, 0xc70, 0xf7d, 0xfb9, 0x1037, 0x1055, 0x1074, 0x10ab, 0x122c, 0x1264, 0x1270, 0x1391, 0x1431, 0x1446, 0x14e0, 0x1512, 0x154b, 0x158b, 0x15c6, 0x1649, 0x17f2, 0x183b, 0x193b, 0x19c5, 0x1a20, 0x1a35, 0x1ae1, 0x1b07, 0x1ba5, 0x1ca7, 0x1cc6, 0x1ccd, 0x1d83, 0x1db4, 0x1dec, 0x1e33, 0x1e92, 0x1eb8);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_GetLevelGRef, 0x20, 0x2b, 0x122, 0x153, 0x2a8, 0x481, 0x506, 0x50f, 0x5d3, 0x62c, 0x63d, 0x642, 0x66c, 0x68b, 0x6c2, 0x6ec, 0x70d, 0x868, 0x9a8, 0x9f1, 0xa38, 0xa3e, 0xa43, 0xa6b, 0xabc, 0xbc8, 0xc1a, 0xc32, 0xc35, 0xc4d, 0xc5e, 0xcfe, 0xd64, 0xe40, 0xef4, 0xf40, 0x10e0, 0x12fe, 0x13be, 0x1466, 0x146d, 0x155b, 0x1597, 0x162c, 0x1682, 0x16db, 0x1789, 0x17d0, 0x1834, 0x1a66, 0x1af1, 0x1b4e, 0x1bc8, 0x1c72, 0x1cd1, 0x1d51, 0x1d8b, 0x1e0c, 0x1e9a, 0x1ee6, 0x1efb, 0x1f24, 0x1f69, 0x1fbc, 0x1fd7, 0x1ffa);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_GetAnim, 0xf7, 0x136, 0x155, 0x166, 0x16e, 0x21c, 0x291, 0x314, 0x38f, 0x419, 0x4f2, 0x507, 0x50e, 0x60c, 0x661, 0x6a3, 0x6df, 0x75d, 0x77b, 0x7ae, 0x809, 0x86d, 0x8a4, 0x8d1, 0x9af, 0xb39, 0xc22, 0xc2c, 0xc9d, 0xcf4, 0xd84, 0xdfd, 0xeff, 0xf49, 0xf6a, 0xfd2, 0x1145, 0x1188, 0x119c, 0x11ef, 0x1255, 0x1377, 0x1448, 0x144a, 0x145f, 0x1504, 0x1567, 0x1663, 0x166f, 0x1675, 0x190b, 0x193d, 0x1944, 0x1b04, 0x1b31, 0x1b5a, 0x1b62, 0x1be6, 0x1c09, 0x1cef, 0x1d44, 0x1d9a, 0x1d9e, 0x1e06, 0x1f38, 0x1fb4, 0x1fc1);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetAnimGRef, 0x23, 0x26, 0x8a, 0xeb, 0x164, 0x3bf, 0x3cd, 0x3d1, 0x3ed, 0x438, 0x45b, 0x4dc, 0x535, 0x73d, 0x795, 0x833, 0x8ea, 0x993, 0xa52, 0xb0a, 0xb5a, 0xcd6, 0xdd8, 0xf3e, 0xf46, 0x106b, 0x1312, 0x134f, 0x13e3, 0x144b, 0x14d0, 0x15d1, 0x166e, 0x176b, 0x194e, 0x1a08, 0x1d14, 0x1e24, 0x1ee2, 0x1eee, 0x1f21, 0x1f6b);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetClasses, 0x28, 0x9d, 0xdf, 0x24c, 0x294, 0x32e, 0x3ba, 0x3e4, 0x445, 0x5fd, 0x601, 0x659, 0x660, 0x698, 0x757, 0x75f, 0x7fa, 0x848, 0x93e, 0x992, 0xa86, 0xc04, 0xc0c, 0xd39, 0xe91, 0xf8e, 0x1118, 0x1126, 0x122a, 0x123c, 0x123e, 0x12d5, 0x13d8, 0x1430, 0x1450, 0x14fe, 0x156d, 0x15e5, 0x163c, 0x165c, 0x16d2, 0x16d3, 0x1716, 0x17cd, 0x17ee, 0x18cc, 0x1b09, 0x1b11, 0x1c3c, 0x1c86, 0x1c88, 0x1c8b, 0x1dcf, 0x1def, 0x1fdc);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetClassesObject, 0xa6, 0xd0, 0x16a, 0x295, 0x2a1, 0x428, 0x42e, 0x486, 0x55c, 0x5cf, 0x727, 0x789, 0x7ab, 0x814, 0x82d, 0xa2e, 0xa49, 0xa93, 0xbf9, 0xc4e, 0xca8, 0xd38, 0xd46, 0xe25, 0xe69, 0xea5, 0xf48, 0xfaa, 0x1023, 0x10c3, 0x1146, 0x119a, 0x11a3, 0x1221, 0x125d, 0x12a6, 0x12fd, 0x133e, 0x1384, 0x13ab, 0x13fe, 0x1479, 0x147e, 0x150c, 0x1536, 0x1538, 0x156c, 0x157e, 0x163d, 0x167e, 0x170a, 0x1850, 0x1965, 0x19c9, 0x19f8, 0x1a0f, 0x1a40, 0x1a76, 0x1b5b, 0x1bfd, 0x1c1d, 0x1c5a, 0x1d1e, 0x1e02, 0x1e55, 0x1ef0);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetObjectType, 0x30, 0x1da, 0x22f, 0x2fc, 0x3b2, 0x406, 0x40e, 0x450, 0x45d, 0x57b, 0x580, 0x662, 0x6bb, 0x76f, 0x794, 0x7db, 0x876, 0x9e2, 0xa9f, 0xac2, 0xaf6, 0xb33, 0xb83, 0xbab, 0xc4a, 0xcbc, 0xdd3, 0x10c0, 0x10fb, 0x1127, 0x114e, 0x11ce, 0x11eb, 0x1362, 0x1467, 0x149f, 0x14b1, 0x15e0, 0x15f8, 0x1629, 0x1671, 0x167f, 0x16fb, 0x1795, 0x1798, 0x17ab, 0x18cf, 0x18f9, 0x1993, 0x19a6, 0x19e7, 0x19eb, 0x1a2e, 0x1ac2, 0x1b34, 0x1baa, 0x1c70, 0x1c8c, 0x1caa, 0x1cc0, 0x1d04, 0x1dfd, 0x1e14, 0x1f3c, 0x1fbf);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetWorld, 0x42, 0x9b, 0xef, 0x13e, 0x14e, 0x1b0, 0x2f6, 0x369, 0x461, 0x615, 0x696, 0x6b5, 0x7a8, 0x7cf, 0xa3a, 0xaec, 0xb1d, 0xb2e, 0xb3b, 0xc40, 0xd0f, 0xf21, 0x10e1, 0x1217, 0x124d, 0x12c7, 0x1339, 0x137a, 0x137d, 0x13ac, 0x13d2, 0x14ec, 0x15fc, 0x1691, 0x16a0, 0x16b0, 0x1747, 0x1804, 0x1846, 0x1868, 0x1878, 0x19da, 0x1aa0, 0x1aab, 0x1cb3, 0x1d92, 0x1e2a, 0x1ea4, 0x1fb1);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_GetWorldObject, 0xa2, 0xe5, 0x10d, 0x13d, 0x27c, 0x383, 0x6bf, 0x6e4, 0x96b, 0xa36, 0xb0b, 0xb7c, 0xbcb, 0xc91, 0xe57, 0xe76, 0xec9, 0xf4c, 0xf7c, 0xff0, 0x1130, 0x1138, 0x1151, 0x12aa, 0x13ad, 0x1408, 0x155d, 0x16c9, 0x174e, 0x1755, 0x1770, 0x18fd, 0x195a, 0x19d3, 0x1a07, 0x1a63, 0x1c0c, 0x1c65, 0x1d3b, 0x1ef2);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_GetGame, 0x13f, 0x1d4, 0x1d9, 0x272, 0x2a9, 0x2ac, 0x2ca, 0x585, 0x5a2, 0x5dc, 0x6c9, 0x6ce, 0x6de, 0x719, 0x7d0, 0x7e6, 0x891, 0x8a0, 0x8a1, 0x8bd, 0x90f, 0x95f, 0x9aa, 0x9b8, 0x9f2, 0xa70, 0xb23, 0xd3a, 0xd83, 0xda3, 0xe58, 0xf50, 0xf92, 0x104c, 0x1059, 0x10b1, 0x11f4, 0x12b3, 0x12d4, 0x1321, 0x13f1, 0x143b, 0x14f6, 0x1522, 0x1535, 0x1599, 0x15e8, 0x16ff, 0x1771, 0x17c2, 0x17cc, 0x18bf, 0x1a7b, 0x1b26, 0x1bd1, 0x1be1, 0x1be5, 0x1bf9, 0x1c81, 0x1cb4, 0x1cea, 0x1d0b, 0x1e8c, 0x1e9d, 0x1ecf, 0x1ef1, 0x1ef9, 0x1f01, 0x1f30, 0x1f5b);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_GetGameRef, 0x39, 0xdb, 0x10c, 0x21a, 0x27a, 0x2b1, 0x2c2, 0x31b, 0x349, 0x3a1, 0x410, 0x510, 0x531, 0x5bf, 0x710, 0x94b, 0x997, 0xaef, 0xb3d, 0xb54, 0xb55, 0xbee, 0xc4f, 0xed3, 0xf4a, 0xf6f, 0x1008, 0x1090, 0x10a7, 0x10e8, 0x110b, 0x11f8, 0x12b0, 0x12cc, 0x13e5, 0x1401, 0x1444, 0x1498, 0x14b7, 0x14ed, 0x151b, 0x16ae, 0x16d4, 0x16e7, 0x1797, 0x17b6, 0x1a5c, 0x1abf, 0x1ad8, 0x1afc, 0x1b0e, 0x1b38, 0x1c05, 0x1c2c, 0x1c64, 0x1c9f, 0x1ce9, 0x1d05, 0x1d61, 0x1e34, 0x1f56, 0x1fea);
			//0xd5 12d4880 / 0x104 12d41c0
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Wait, 0xd5, 0x11b, 0x1a8, 0x303, 0x311, 0x32f, 0x5aa, 0x610, 0x631, 0x637, 0x6f6, 0x844, 0x895, 0x8c8, 0x9f7, 0xa01, 0xa1d, 0xa40, 0xb27, 0xb43, 0xbf0, 0xc86, 0xc92, 0xcbd, 0xd86, 0xea8, 0xebc, 0xf69, 0xf90, 0xfa7, 0x101e, 0x1035, 0x104b, 0x1116, 0x114b, 0x1205, 0x121c, 0x134e, 0x140c, 0x1421, 0x1447, 0x1595, 0x15fd, 0x16ca, 0x16ce, 0x176a, 0x17e9, 0x18e4, 0x1931, 0x19c2, 0x19e4, 0x1a2f, 0x1ae8, 0x1b3c, 0x1b6d, 0x1c1c, 0x1d09, 0x1db7, 0x1df9, 0x1e08, 0x1e1d, 0x1e22, 0x1e5f, 0x1edc, 0x1fe3, 0x1ff9);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Wait2, 0x104, 0x137, 0x162, 0x1d5, 0x23d, 0x318, 0x346, 0x3b7, 0x448, 0x4a8, 0x540, 0x6d7, 0x734, 0x8cb, 0xa1f, 0xa96, 0xb28, 0xce3, 0xe01, 0xec5, 0xf8f, 0x1081, 0x10da, 0x1231, 0x1303, 0x149c, 0x1582, 0x1605, 0x1656, 0x177b, 0x18b9, 0x195b, 0x1a13, 0x1c5e, 0x1c63, 0x1cd4, 0x1da1, 0x1e8e, 0x1f7d, 0x1fad);
			// waittill 1:12d4850 / 2:12d44f0
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_SingleWaitTill, 0x4e, 0x2b2, 0x49d, 0x58a, 0x606, 0x60d, 0x6fe, 0x84d, 0x893, 0x8be, 0x948, 0x9c6, 0x9c8, 0xa20, 0xa56, 0xaa2, 0xd37, 0xdb9, 0xf73, 0x1091, 0x10fa, 0x11bd, 0x11c3, 0x11de, 0x127e, 0x129f, 0x12a5, 0x12f3, 0x1387, 0x1389, 0x13c2, 0x13f5, 0x14ca, 0x150d, 0x15d0, 0x15ea, 0x161f, 0x17dd, 0x1806, 0x1820, 0x18e1, 0x18ea, 0x1a98, 0x1ade, 0x1bb4, 0x1c16, 0x1cf5, 0x1e43, 0x1e59, 0x1e6c, 0x1edf);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_WaitTillMatch2, 0x62, 0xf5, 0x357, 0x4fe, 0x675, 0x6ea, 0x74d, 0x776, 0x803, 0x83a, 0x9df, 0xa51, 0xad0, 0xb58, 0xcac, 0xcbf, 0xcd8, 0xcfd, 0x107b, 0x12d9, 0x14ac, 0x16f7, 0x1710, 0x1736, 0x17d4, 0x17e6, 0x1800, 0x18c6, 0x199b, 0x19a5, 0x1a61, 0x1aa9, 0x1b18, 0x1c4a, 0x1c4b, 0x1c85, 0x1cc9, 0x1d40, 0x1d56, 0x1d99, 0x1dae, 0x1f00);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_SetWaittillVariableFieldCached, 0x126, 0x131, 0x1ac, 0x1f6, 0x3b0, 0x505, 0x5df, 0x79c, 0x7f3, 0x819, 0x8c9, 0x9ea, 0xf0a, 0x1018, 0x1157, 0x1275, 0x12f1, 0x1417, 0x153f, 0x1687, 0x1a1c, 0x1a3e, 0x1a5f, 0x1a6c, 0x1ae6, 0x1b01, 0x1b05, 0x1c08, 0x1df0, 0x1e41, 0x1e91, 0x1fa0);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Switch, 0x6b, 0x9e, 0xbc, 0x124, 0x1c0, 0x1f8, 0x205, 0x22e, 0x2c4, 0x2e6, 0x30e, 0x332, 0x37a, 0x513, 0x5ab, 0x5b9, 0x5e3, 0x68f, 0x6b4, 0x702, 0x726, 0x8ac, 0x938, 0x96f, 0xac4, 0xbca, 0xc20, 0xc73, 0xce8, 0xcf3, 0xdcc, 0xe00, 0xe11, 0xe38, 0xea6, 0xf1c, 0xfa0, 0xfb7, 0xfd6, 0xff3, 0x1026, 0x115b, 0x117f, 0x118b, 0x11cd, 0x125a, 0x12c9, 0x12e8, 0x1472, 0x14f4, 0x154f, 0x16d6, 0x16fc, 0x1703, 0x17e2, 0x1859, 0x1a05, 0x1a51, 0x1b42, 0x1b7d, 0x1bbf, 0x1cc2, 0x1db6, 0x1f3f, 0x1fbd, 0x1fcf);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_EndSwitch, 0x15, 0x68, 0xca, 0x128, 0x1e0, 0x233, 0x33c, 0x403, 0x429, 0x442, 0x491, 0x545, 0x671, 0x77a, 0x7a3, 0x817, 0x953, 0xa6d, 0xa8c, 0xaf0, 0xb52, 0xb9c, 0xc28, 0xdfe, 0xe5a, 0xfcd, 0x100e, 0x11bc, 0x11c2, 0x120b, 0x1283, 0x13a0, 0x144e, 0x1478, 0x14e1, 0x1532, 0x1587, 0x15bd, 0x1681, 0x16ef, 0x1726, 0x17dc, 0x17e0, 0x18a5, 0x1994, 0x1a9d, 0x1af9, 0x1afa, 0x1afb, 0x1c5f, 0x1c73, 0x1c80, 0x1ca8, 0x1d1f, 0x1e57, 0x1ee1);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_GetIString, 0xc9, 0xd7, 0x123, 0x1ef, 0x208, 0x21b, 0x26c, 0x353, 0x3f3, 0x3fc, 0x416, 0x688, 0x743, 0x7f7, 0x80b, 0x894, 0x8e2, 0x927, 0x9c4, 0xa77, 0xbcc, 0xd73, 0xdd1, 0xe0a, 0xe55, 0xee4, 0xf4d, 0x1021, 0x10a2, 0x1134, 0x1142, 0x1181, 0x133b, 0x149a, 0x1694, 0x1758, 0x1853, 0x1882, 0x1899, 0x1950, 0x1a96, 0x1aeb, 0x1b16, 0x1bc5, 0x1bf5, 0x1c02, 0x1cab, 0x1ce6, 0x1f40);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_Modulus, 0xbe, 0xc7, 0x13b, 0x158, 0x4db, 0x502, 0x58e, 0x683, 0x7c2, 0x889, 0x91e, 0xa30, 0xb0c, 0xbc0, 0xc52, 0xd31, 0xeef, 0xf8d, 0xfad, 0x102e, 0x10dd, 0x1304, 0x134c, 0x14be, 0x15f2, 0x17ad, 0x19ca, 0x1bff, 0x1cd2, 0x1d52, 0x1d96, 0x1df4, 0x1fa7);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IgnoreWaittillVariableFieldCached, 0x3fe, 0x53c, 0x84b, 0x859, 0x8ad, 0x92a, 0x9d3, 0xcc0, 0xd06, 0xd2b, 0xdb8, 0xe17, 0xea4, 0xf0e, 0xf28, 0x11a8, 0x11b7, 0x12d7, 0x12d8, 0x1593, 0x161c, 0x166a, 0x172b, 0x17a1, 0x1891, 0x1952, 0x1a3f, 0x1a4f, 0x1a64, 0x1aa8, 0x1b2d, 0x1cf2, 0x1d1b, 0x1de3, 0x1f04, 0x1fd4);
			RegisterOpCode(VM_T7, PLATFORM_PC, OPCODE_IW_GetAnimation, 0x9c, 0x173, 0x420, 0x457, 0x45e, 0x4d1, 0x508, 0x6c0, 0x718, 0x79f, 0x8aa, 0x8ba, 0x903, 0x978, 0xaa6, 0xadd, 0xb5f, 0xb6c, 0xd24, 0xda1, 0xda8, 0xdd2, 0xe4b, 0xfa2, 0x109c, 0x123f, 0x12b1, 0x1359, 0x1390, 0x13ec, 0x1554, 0x165a, 0x1772, 0x1818, 0x1923, 0x1937, 0x1956, 0x1afd, 0x1b86, 0x1d2b, 0x1d41, 0x1d8c, 0x1f4b, 0x1f6f);

			// 118:12d2b90 -> {0x118, 0x24f, 0x575, 0x5de, 0x621, 0x640, 0x669, 0x7a9, 0x8fc, 0x985, 0xa8e, 0xcb0, 0xd29, 0xd36, 0xfc8, 0x1101, 0x11af, 0x11ec, 0x11f7, 0x12fc, 0x1505, 0x1549, 0x1641, 0x178b, 0x1920, 0x1a37, 0x1a65, 0x1a7e, 0x1bc9, 0x1c43, 0x1cf6, 0x1ffc}
			// 243:12d0000 -> {0x243, 0x249, 0x25a, 0x2dc, 0x32a, 0x33b, 0x372, 0x38e, 0x54b, 0x552, 0x555, 0x5a0, 0x5b2, 0x5c0, 0x65a, 0x685, 0x79a, 0x7ee, 0x813, 0x95a, 0x969, 0x9b1, 0xa21, 0xb3c, 0xb51, 0xc0e, 0xc6a, 0xd0e, 0xdb6, 0xdc5, 0xf3f, 0xf5a, 0xfda, 0xfe5, 0x101d, 0x1277, 0x133f, 0x13b0, 0x1481, 0x14ab, 0x15cd, 0x1610, 0x1689, 0x17f6, 0x1896, 0x1953, 0x19fa, 0x1aa5, 0x1ab6, 0x1ad4, 0x1b06, 0x1b74, 0x1c58, 0x1cfb, 0x1d34, 0x1de5, 0x1e2e, 0x1f13, 0x1f46, 0x1fba, 0x1ff4}


			RegisterVM(VM_T71B, "Call of Duty: Black ops 3 (1B)", "t7_1b", VmFlags::VMF_CLIENT_VM | VmFlags::VMF_NO_FILE_NAMESPACE | VmFlags::VMF_ALIGN); // | VmFlags::VMF_CALL_NO_PARAMS
			RegisterVMPlatform(VM_T71B, PLATFORM_PC);
			RegisterVMGlobalVariable(VM_T71B, "level", OPCODE_IW_GetLevel);
			RegisterVMGlobalVariable(VM_T71B, "game", OPCODE_IW_GetGame);
			RegisterVMGlobalVariable(VM_T71B, "anim", OPCODE_IW_GetAnim);
			RegisterVMGlobalVariable(VM_T71B, "world", OPCODE_GetWorld);
			RegisterVMGlobalVariable(VM_T71B, "classes", OPCODE_GetClasses);
			RegisterVMHashOPCode(VM_T71B, '#', OPCODE_GetHash32, 4, [](const char* str) { return hashutils::HashT7(str); });
			RegisterDevCall(VM_T71B, "assert", "assertmsg", "errormsg", "throw", "println");
			SetMaxOpCode(VM_T71B, 0xFF);


			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Unknown0, 0x0);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Unknown1, 0x1);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Unknown2, 0x2);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Unknown3, 0x3);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Unknown4, 0x4);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Unknown5, 0x5);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Unknown6, 0x6);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Unknown7, 0x7);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_EvalLocalVariableCachedDebug, 0x8);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_EvalLocalVariableRefCachedDebug, 0x9);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Unknowna, 0xa);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Unknownb, 0xb);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_ClearParams, 0xc);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_CheckClearParams, 0xd);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_PreScriptCall, 0xe);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_CallBuiltinFunction, 0xf);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_End, 0x10);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetUndefined, 0x82);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetResolveFunction, 0xd9);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetString, 0x2a);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_DecTop, 0xb4);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_SafeCreateLocalVariables, 0xae);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IW_EvalLevelFieldVariableRef, 0x11);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_EvalArrayRef, 0x33);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_SetVariableField, 0x29);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_CallBuiltinMethod, 0xde);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_EvalSelfFieldVariable, 0xe3);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Plus, 0x5b);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetSignedByte, 0xe2);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetZero, 0x76);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_EvalLocalVariableCached, 0x5d);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IsDefined, 0x18);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_JumpOnFalseExpr, 0x9d);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IW_GetLevel, 0xd4);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_BoolNot, 0x16);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_JumpOnFalse, 0x7f);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_CallBuiltinFunction, 0xac);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_EvalLocalVariableRefCached, 0xe5);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_CastFieldObject, 0xd1);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_EvalFieldVariable, 0xef);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetSelf, 0x91);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_ScriptMethodThreadCallPointer, 0x7b);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_ScriptMethodThreadCall, 0x26);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IW_EvalSelfFieldVarRef, 0x37);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetSelfObject, 0x24);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_ClearFieldVariable, 0xf4);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_JumpOnTrue, 0xdd);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetHash32, 0xed);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IW_SingleEndon, 0x44);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_DevblockBegin, 0x67);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetFloat, 0x98);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetShort, 0xa7);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Wait, 0xc6);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetInteger, 0x23);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IW_EvalLevelFieldVariable, 0xfa);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_FirstArrayKey, 0xb3);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_EvalArray, 0x51);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_NextArrayKey, 0x17);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GreaterThan, 0xdb);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_LessThanOrEqualTo, 0x42);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_JumpOnTrueExpr, 0x43);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Minus, 0x4f);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_LessThan, 0x3d);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetNegByte, 0x3b);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Multiply, 0xd6);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Switch, 0x71);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_EndSwitch, 0x21);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_EvalFieldVariableRef, 0x49);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Vector, 0x1f);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IW_SingleWaitTill, 0xc0);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IW_GetIString, 0x4d);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_SizeOf, 0x9b);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_SuperNotEqual, 0x66);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IW_Notify, 0x5a);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Inc, 0xc3);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IW_SetWaittillVariableFieldCached, 0x56);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Equal, 0x57);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GreaterThanOrEqualTo, 0xf3);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_SuperEqual, 0x28);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_VectorConstant, 0x95);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Return, 0x89);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_BoolNot, 0x72);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_VectorScale, 0x48);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_EmptyArray, 0x1c);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_NotEqual, 0x40);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_ScriptFunctionCallPointer, 0xe6);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetNegUnsignedShort, 0xcc);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetTime, 0xa3);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IW_GetLevelGRef, 0x35);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Modulus, 0xad);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Divide, 0xb0);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Dec, 0x9c);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_ScriptThreadCall, 0xe8);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_ClassFunctionCall, 0x27);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_ScriptMethodCallPointer, 0x3f);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_WaitTillFrameEnd, 0x3a);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IW_GetAnimation, 0x83);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_WaitTillMatch2, 0x1b);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Wait2, 0xb7);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_ClearArray, 0x30);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_GetObjectType, 0x34);
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_IgnoreWaittillVariableFieldCached, 0xa1);
			
			RegisterOpCode(VM_T71B, PLATFORM_PC, OPCODE_Jump, 0x45);
			
			
			

			// loading serious db2 files (if any)
			const char* seriousDBDir = actscli::options().seriousDBFile;
			std::filesystem::path seriousDBDirPath;
			if (!seriousDBDir) {
				seriousDBDirPath = utils::GetProgDir() / compatibility::scobalula::wni::packageIndexDir;
			}
			else {
				seriousDBDirPath = seriousDBDir;
			}

			std::vector<std::filesystem::path> dbFiles{};

			utils::GetFileRecurse(seriousDBDirPath, dbFiles, [](const std::filesystem::path& p) {
				auto s = p.string();
				return s.ends_with(".db2");
			});
			
			for (const auto& db : dbFiles) {
				compatibility::serious::LoadVMDatabase(db);
			}
		});
	}

	class OpCodeLookupTable {
	public:
		std::unordered_map<OPCode, const char*> opToName{};
		std::unordered_map<std::string, OPCode> nameToOp{};
	private:
		void RegisterOpCode(OPCode op, const char* name) {
			opToName[op] = name;
			auto& opl = nameToOp[utils::LowerCase(utils::CloneString(name))];
			if (opl && opl != op) {
				LOG_WARNING("Registered opcode with the same name : '{}' 0x{:x} != 0x{:x}", name, (int)opl, (int)op);
			}
			else {
				opl = op;
			}
		}
	public:
		OpCodeLookupTable() {
			RegisterOpCode(OPCODE_Undefined, "Undefined");
			RegisterOpCode(OPCODE_Unknown0, "Unknown0");
			RegisterOpCode(OPCODE_Unknown1, "Unknown1");
			RegisterOpCode(OPCODE_Unknown2, "Unknown2");
			RegisterOpCode(OPCODE_Unknown3, "Unknown3");
			RegisterOpCode(OPCODE_Unknown4, "Unknown4");
			RegisterOpCode(OPCODE_Unknown5, "Unknown5");
			RegisterOpCode(OPCODE_Unknown6, "Unknown6");
			RegisterOpCode(OPCODE_Unknown7, "Unknown7");
			RegisterOpCode(OPCODE_Unknowna, "Unknowna");
			RegisterOpCode(OPCODE_Unknownb, "Unknownb");
			RegisterOpCode(OPCODE_Unknown38, "Unknown38");
			RegisterOpCode(OPCODE_Nop, "Nop");
			RegisterOpCode(OPCODE_GetUndefined, "GetUndefined");
			RegisterOpCode(OPCODE_Unknown10e, "Unknown10e");
			RegisterOpCode(OPCODE_Unknown126, "Unknown126");
			RegisterOpCode(OPCODE_End, "End");
			RegisterOpCode(OPCODE_EvalLocalVariableCachedDebug, "EvalLocalVariableCachedDebug");
			RegisterOpCode(OPCODE_EvalLocalVariableRefCachedDebug, "EvalLocalVariableRefCachedDebug");
			RegisterOpCode(OPCODE_ClearParams, "ClearParams");
			RegisterOpCode(OPCODE_CheckClearParams, "CheckClearParams");
			RegisterOpCode(OPCODE_PreScriptCall, "PreScriptCall");
			RegisterOpCode(OPCODE_CallBuiltinFunction, "CallBuiltinFunction");
			RegisterOpCode(OPCODE_CallBuiltinMethod, "CallBuiltinMethod");
			RegisterOpCode(OPCODE_EmptyArray, "EmptyArray");
			RegisterOpCode(OPCODE_EmptyStruct, "EmptyStruct");
			RegisterOpCode(OPCODE_WaitTill, "WaitTill");
			RegisterOpCode(OPCODE_ClearFieldVariableOnStack, "ClearFieldVariableOnStack");
			RegisterOpCode(OPCODE_ClearArray, "ClearArray");
			RegisterOpCode(OPCODE_ScriptMethodThreadCallPointer, "ScriptMethodThreadCallPointer");
			RegisterOpCode(OPCODE_WaitTillMatchTimeout, "WaitTillMatchTimeout");
			RegisterOpCode(OPCODE_GetHash, "GetHash");
			RegisterOpCode(OPCODE_WaitFrame, "WaitFrame");
			RegisterOpCode(OPCODE_ScriptMethodThreadCallPointerEndOn, "ScriptMethodThreadCallPointerEndOn");
			RegisterOpCode(OPCODE_WaitTillMatch, "WaitTillMatch");
			RegisterOpCode(OPCODE_ScriptThreadCallEndOn, "ScriptThreadCallEndOn");
			RegisterOpCode(OPCODE_Switch, "Switch");
			RegisterOpCode(OPCODE_ScriptFunctionCallPointer, "ScriptFunctionCallPointer");
			RegisterOpCode(OPCODE_DevblockBegin, "DevblockBegin");
			RegisterOpCode(OPCODE_NotEqual, "NotEqual");
			RegisterOpCode(OPCODE_ScriptMethodCallPointer, "ScriptMethodCallPointer");
			RegisterOpCode(OPCODE_JumpOnTrue, "JumpOnTrue");
			RegisterOpCode(OPCODE_ScriptMethodThreadCallEndOn, "ScriptMethodThreadCallEndOn");
			RegisterOpCode(OPCODE_SafeCreateLocalVariables, "SafeCreateLocalVariables");
			RegisterOpCode(OPCODE_GetNegUnsignedShort, "GetNegUnsignedShort");
			RegisterOpCode(OPCODE_ClassFunctionCall, "ClassFunctionCall");
			RegisterOpCode(OPCODE_Return, "Return");
			RegisterOpCode(OPCODE_EvalFieldVariableRef, "EvalFieldVariableRef");
			RegisterOpCode(OPCODE_SafeDecTop, "SafeDecTop");
			RegisterOpCode(OPCODE_Bit_Or, "Bit_Or");
			RegisterOpCode(OPCODE_ScriptThreadCall, "ScriptThreadCall");
			RegisterOpCode(OPCODE_Bit_Xor, "Bit_Xor");
			RegisterOpCode(OPCODE_GetSelfObject, "GetSelfObject");
			RegisterOpCode(OPCODE_GetNegByte, "GetNegByte");
			RegisterOpCode(OPCODE_ScriptThreadCallPointerEndOn, "ScriptThreadCallPointerEndOn");
			RegisterOpCode(OPCODE_BoolComplement, "BoolComplement");
			RegisterOpCode(OPCODE_IsDefined, "IsDefined");
			RegisterOpCode(OPCODE_AddToArray, "AddToArray");
			RegisterOpCode(OPCODE_Wait, "Wait");
			RegisterOpCode(OPCODE_SuperEqual, "SuperEqual");
			RegisterOpCode(OPCODE_ScriptFunctionCall, "ScriptFunctionCall");
			RegisterOpCode(OPCODE_JumpOnTrueExpr, "JumpOnTrueExpr");
			RegisterOpCode(OPCODE_CreateArray, "CreateArray");
			RegisterOpCode(OPCODE_Inc, "Inc");
			RegisterOpCode(OPCODE_ShiftLeft, "ShiftLeft");
			RegisterOpCode(OPCODE_JumpOnGreaterThan, "JumpOnGreaterThan");
			RegisterOpCode(OPCODE_Plus, "Plus");
			RegisterOpCode(OPCODE_CastAndEvalFieldVariable, "CastAndEvalFieldVariable");
			RegisterOpCode(OPCODE_ShiftRight, "ShiftRight");
			RegisterOpCode(OPCODE_CreateStruct, "CreateStruct");
			RegisterOpCode(OPCODE_CastCanon, "CastCanon");
			RegisterOpCode(OPCODE_GreaterThanOrEqualTo, "GreaterThanOrEqualTo");
			RegisterOpCode(OPCODE_GetUIntPtr, "GetUIntPtr");
			RegisterOpCode(OPCODE_GetLongInteger, "GetLongInteger");
			RegisterOpCode(OPCODE_EvalArray, "EvalArray");
			RegisterOpCode(OPCODE_WaitTillFrameEnd, "WaitTillFrameEnd");
			RegisterOpCode(OPCODE_EndOnCallback, "EndOnCallback");
			RegisterOpCode(OPCODE_EndOn, "EndOn");
			RegisterOpCode(OPCODE_SuperNotEqual, "SuperNotEqual");
			RegisterOpCode(OPCODE_GetFloat, "GetFloat");
			RegisterOpCode(OPCODE_ProfileStart, "ProfileStart");
			RegisterOpCode(OPCODE_GetString, "GetString");
			RegisterOpCode(OPCODE_BoolNot, "BoolNot");
			RegisterOpCode(OPCODE_CastBool, "CastBool");
			RegisterOpCode(OPCODE_Equal, "Equal");
			RegisterOpCode(OPCODE_GetUnsignedInteger, "GetUnsignedInteger");
			RegisterOpCode(OPCODE_WaittillTimeout, "WaittillTimeout");
			RegisterOpCode(OPCODE_GreaterThan, "GreaterThan");
			RegisterOpCode(OPCODE_Jump, "Jump");
			RegisterOpCode(OPCODE_Divide, "Divide");
			RegisterOpCode(OPCODE_EndSwitch, "EndSwitch");
			RegisterOpCode(OPCODE_JumpOnFalse, "JumpOnFalse");
			RegisterOpCode(OPCODE_JumpOnFalseExpr, "JumpOnFalseExpr");
			RegisterOpCode(OPCODE_Minus, "Minus");
			RegisterOpCode(OPCODE_ProfileStop, "ProfileStop");
			RegisterOpCode(OPCODE_GetInteger, "GetInteger");
			RegisterOpCode(OPCODE_ClassFunctionThreadCall, "ClassFunctionThreadCall");
			RegisterOpCode(OPCODE_VectorScale, "VectorScale");
			RegisterOpCode(OPCODE_Modulus, "Modulus");
			RegisterOpCode(OPCODE_VectorConstant, "VectorConstant");
			RegisterOpCode(OPCODE_SizeOf, "SizeOf");
			RegisterOpCode(OPCODE_Notify, "Notify");
			RegisterOpCode(OPCODE_Vector, "Vector");
			RegisterOpCode(OPCODE_Dec, "Dec");
			RegisterOpCode(OPCODE_JumpOnLessThan, "JumpOnLessThan");
			RegisterOpCode(OPCODE_Bit_And, "Bit_And");
			RegisterOpCode(OPCODE_GetObjectType, "GetObjectType");
			RegisterOpCode(OPCODE_Multiply, "Multiply");
			RegisterOpCode(OPCODE_EvalFieldVariableOnStack, "EvalFieldVariableOnStack");
			RegisterOpCode(OPCODE_GetTime, "GetTime");
			RegisterOpCode(OPCODE_AddToStruct, "AddToStruct");
			RegisterOpCode(OPCODE_ClassFunctionThreadCallEndOn, "ClassFunctionThreadCallEndOn");
			RegisterOpCode(OPCODE_LessThanOrEqualTo, "LessThanOrEqualTo");
			RegisterOpCode(OPCODE_GetGlobal, "GetGlobal");
			RegisterOpCode(OPCODE_GetZero, "GetZero");
			RegisterOpCode(OPCODE_ClearFieldVariable, "ClearFieldVariable");
			RegisterOpCode(OPCODE_EvalFieldObjectFromRef, "EvalFieldObjectFromRef");
			RegisterOpCode(OPCODE_GetSelf, "GetSelf");
			RegisterOpCode(OPCODE_GetResolveFunction, "GetResolveFunction");
			RegisterOpCode(OPCODE_GetGlobalObject, "GetGlobalObject");
			RegisterOpCode(OPCODE_GetByte, "GetByte");
			RegisterOpCode(OPCODE_CastFieldObject, "CastFieldObject");
			RegisterOpCode(OPCODE_ScriptThreadCallPointer, "ScriptThreadCallPointer");
			RegisterOpCode(OPCODE_LessThan, "LessThan");
			RegisterOpCode(OPCODE_ScriptMethodCall, "ScriptMethodCall");
			RegisterOpCode(OPCODE_DecTop, "DecTop");
			RegisterOpCode(OPCODE_GetVector, "GetVector");
			RegisterOpCode(OPCODE_ScriptMethodThreadCall, "ScriptMethodThreadCall");
			RegisterOpCode(OPCODE_JumpPush, "JumpPush");
			RegisterOpCode(OPCODE_GetUnsignedShort, "GetUnsignedShort");
			RegisterOpCode(OPCODE_EvalLocalVariableCached, "EvalLocalVariableCached");
			RegisterOpCode(OPCODE_EvalFieldVariable, "EvalFieldVariable");
			RegisterOpCode(OPCODE_GetFunction, "GetFunction");
			RegisterOpCode(OPCODE_EvalArrayRef, "EvalArrayRef");
			RegisterOpCode(OPCODE_SetNextArrayKeyCached, "SetNextArrayKeyCached");
			RegisterOpCode(OPCODE_Unknown9e, "Unknown9e");
			RegisterOpCode(OPCODE_EvalLocalVariableCachedSafe, "EvalLocalVariableCachedSafe");
			RegisterOpCode(OPCODE_SetLocalVariableCachedOnStack, "SetLocalVariableCachedOnStack");
			RegisterOpCode(OPCODE_Unknownc7, "Unknownc7");
			RegisterOpCode(OPCODE_Unknown35, "Unknown35");
			RegisterOpCode(OPCODE_FirstArrayKey, "FirstArrayKey");
			RegisterOpCode(OPCODE_EvalFieldVariableOnStackRef, "EvalFieldVariableOnStackRef");
			RegisterOpCode(OPCODE_SetVariableFieldRef, "SetVariableFieldRef");
			RegisterOpCode(OPCODE_SetVariableField, "SetVariableField");
			RegisterOpCode(OPCODE_EvalSelfFieldVariable, "EvalSelfFieldVariable");
			RegisterOpCode(OPCODE_SetLocalVariableCached, "SetLocalVariableCached");
			RegisterOpCode(OPCODE_FirstArrayKeyCached, "FirstArrayKeyCached");
			RegisterOpCode(OPCODE_EvalLocalVariableRefCached, "EvalLocalVariableRefCached");
			RegisterOpCode(OPCODE_EvalGlobalObjectFieldVariable, "EvalGlobalObjectFieldVariable");
			RegisterOpCode(OPCODE_EvalLocalVariableDefined, "EvalLocalVariableDefined");
			RegisterOpCode(OPCODE_T8C_GetLazyFunction, "T8C_GetLazyFunction");
			RegisterOpCode(OPCODE_ProfileNamedStart, "ProfileNamedStart");
			RegisterOpCode(OPCODE_ProfileNamedEnd, "ProfileNamedEnd");
			RegisterOpCode(OPCODE_GetNegUnsignedInteger, "GetNegUnsignedInteger");
			RegisterOpCode(OPCODE_T9_EvalFieldVariableFromObjectCached, "EvalFieldVariableFromObjectCached");
			RegisterOpCode(OPCODE_T9_EvalFieldVariableFromObjectFromRef, "EvalFieldVariableFromObjectFromRef");
			RegisterOpCode(OPCODE_T9_SetFieldVariableFromObjectFromRef, "SetFieldVariableFromObjectFromRef");
			RegisterOpCode(OPCODE_T9_EvalLocalVariableCachedDouble, "EvalLocalVariableCachedDouble");
			RegisterOpCode(OPCODE_T9_EvalFieldVariableFromGlobalObject, "EvalFieldVariableFromGlobalObject");
			RegisterOpCode(OPCODE_T9_SetVariableFieldFromEvalArrayRef, "SetVariableFieldFromEvalArrayRef");
			RegisterOpCode(OPCODE_T9_IncLocalVariableCached, "IncLocalVariableCached");
			RegisterOpCode(OPCODE_T9_DecLocalVariableCached, "DecLocalVariableCached");
			RegisterOpCode(OPCODE_T9_EvalArrayCached, "EvalArrayCached");
			RegisterOpCode(OPCODE_T9_EndOnCallbackParam, "EndOnCallbackParam");
			RegisterOpCode(OPCODE_T9_GetVarRef, "GetVarRef");
			RegisterOpCode(OPCODE_T9_IteratorKey, "IteratorKey");
			RegisterOpCode(OPCODE_T9_IteratorVal, "IteratorVal");
			RegisterOpCode(OPCODE_T9_IteratorNext, "IteratorNext");
			RegisterOpCode(OPCODE_IW_RegisterVariable, "RegisterVariable");
			RegisterOpCode(OPCODE_IW_GetAnimation, "GetAnimation");
			RegisterOpCode(OPCODE_IW_GetAnimationTree, "GetAnimationTree");
			RegisterOpCode(OPCODE_IW_GetBuiltinFunction, "GetBuiltinFunction");
			RegisterOpCode(OPCODE_IW_GetBuiltinMethod, "GetBuiltinMethod");
			RegisterOpCode(OPCODE_IW_GetIString, "GetIString");
			RegisterOpCode(OPCODE_IW_GetEmptyUnkE, "GetEmptyUnkE");
			RegisterOpCode(OPCODE_IW_GetUnkb, "GetUnkb");
			RegisterOpCode(OPCODE_IW_GetUnk9, "GetUnk9");
			RegisterOpCode(OPCODE_IW_GetDVarHash, "GetDVarHash");
			RegisterOpCode(OPCODE_IW_EvalLocalVariableCached0, "EvalLocalVariableCached0");
			RegisterOpCode(OPCODE_IW_EvalLocalVariableCached1, "EvalLocalVariableCached1");
			RegisterOpCode(OPCODE_IW_EvalLocalVariableCached2, "EvalLocalVariableCached2");
			RegisterOpCode(OPCODE_IW_EvalLocalVariableCached3, "EvalLocalVariableCached3");
			RegisterOpCode(OPCODE_IW_EvalLocalVariableCached4, "EvalLocalVariableCached4");
			RegisterOpCode(OPCODE_IW_EvalLocalVariableCached5, "EvalLocalVariableCached5");
			RegisterOpCode(OPCODE_IW_EvalLocalArrayCached, "EvalLocalArrayCached");
			RegisterOpCode(OPCODE_IW_EvalLocalVariableObjectCached, "EvalLocalVariableObjectCached");
			RegisterOpCode(OPCODE_IW_ClearFieldVariableRef, "ClearFieldVariableRef");
			RegisterOpCode(OPCODE_IW_EvalLevelFieldVariableRef, "EvalLevelFieldVariableRef");
			RegisterOpCode(OPCODE_IW_EvalLevelFieldVariable, "EvalLevelFieldVariable");
			RegisterOpCode(OPCODE_IW_EvalSelfFieldVar, "EvalSelfFieldVar");
			RegisterOpCode(OPCODE_IW_EvalSelfFieldVarRef, "EvalSelfFieldVarRef");
			RegisterOpCode(OPCODE_IW_EvalAnimFieldVar, "EvalAnimFieldVar");
			RegisterOpCode(OPCODE_IW_EvalAnimFieldVarRef, "EvalAnimFieldVarRef");
			RegisterOpCode(OPCODE_IW_SetAnimFieldVar, "SetAnimFieldVar");
			RegisterOpCode(OPCODE_IW_SetLevelFieldVariable, "SetLevelFieldVariable");
			RegisterOpCode(OPCODE_IW_SetSelfFieldVar, "SetSelfFieldVar");
			RegisterOpCode(OPCODE_IW_DevBlock, "DevBlock");
			RegisterOpCode(OPCODE_IW_SingleEndon, "SingleEndon");
			RegisterOpCode(OPCODE_IW_SingleWaitTill, "SingleWaitTill");
			RegisterOpCode(OPCODE_IW_IsTrue, "IsTrue");
			RegisterOpCode(OPCODE_IW_Switch, "IWSwitch");
			RegisterOpCode(OPCODE_IW_EndSwitch, "IWEndSwitch");
			RegisterOpCode(OPCODE_IW_SetWaittillVariableFieldCached, "SetWaittillVariableFieldCached");
			RegisterOpCode(OPCODE_IW_WaitFrame, "IWWaitFrame");
			RegisterOpCode(OPCODE_IW_AddToStruct, "IWAddToStruct");
			RegisterOpCode(OPCODE_IW_BuiltinFunctionCallPointer, "BuiltinFunctionCallPointer");
			RegisterOpCode(OPCODE_IW_BuiltinMethodCallPointer, "BuiltinMethodCallPointer");
			RegisterOpCode(OPCODE_IW_GetLevel, "GetLevel");
			RegisterOpCode(OPCODE_IW_GetLevelGRef, "GetLevelGRef");
			RegisterOpCode(OPCODE_IW_GetGame, "GetGame");
			RegisterOpCode(OPCODE_IW_GetGameRef, "GetGameRef");
			RegisterOpCode(OPCODE_IW_GetAnim, "GetAnim");
			RegisterOpCode(OPCODE_IW_GetAnimRef, "GetAnimRef");
			RegisterOpCode(OPCODE_IW_EvalArrayCachedField, "EvalArrayCachedField");
			RegisterOpCode(OPCODE_IW_GetThread, "GetThread");
			RegisterOpCode(OPCODE_IW_Notify, "IWNotify");
			RegisterOpCode(OPCODE_IW_WaitTillMatch, "IWWaitTillMatch");
			RegisterOpCode(OPCODE_DevOp, "DevOp");
			RegisterOpCode(OPCODE_GetSignedByte, "GetSignedByte");
			RegisterOpCode(OPCODE_GetShort, "GetShort");
			RegisterOpCode(OPCODE_GetHash32, "GetHash32");
			RegisterOpCode(OPCODE_NextArrayKey, "NextArrayKey");
			RegisterOpCode(OPCODE_GetAnimGRef, "GetAnimGRef");
			RegisterOpCode(OPCODE_T7_ProfileStart, "T7ProfileStart");
			RegisterOpCode(OPCODE_GetClasses, "GetClasses");
			RegisterOpCode(OPCODE_GetClassesObject, "GetClassesObject");
			RegisterOpCode(OPCODE_GetWorld, "GetWorld");
			RegisterOpCode(OPCODE_GetWorldObject, "GetWorldObject");
			RegisterOpCode(OPCODE_Wait2, "Wait2");
			RegisterOpCode(OPCODE_WaitTillMatch2, "WaitTillMatch2");
			RegisterOpCode(OPCODE_IgnoreWaittillVariableFieldCached, "IgnoreWaittillVariableFieldCached");
			RegisterOpCode(OPCODE_IW_RegisterMultipleVariables, "RegisterMultipleVariables");
		}
	};
	namespace {
		static OpCodeLookupTable table{};
	}

	const char* OpCodeName(OPCode op) {
		auto it = table.opToName.find(op);
		return it != table.opToName.end() ? it->second : nullptr;
	}
	OPCode OpCodeFromName(const char* op) {
		auto it = table.nameToOp.find(op);
		return it != table.nameToOp.end() ? it->second : OPCODE_Undefined;
	}
	int dop(Process& proc, int argc, const char* argv[]) {
		std::filesystem::path outFile;
		if (argc == 2) {
			outFile = "opcodes.actsop";
		}
		else {
			outFile = argv[2];
		}
		tool::gsc::opcode::RegisterOpCodesMap();
		const std::unordered_map<byte, VmInfo>& maps{ opcode::GetVMMaps() };

		std::ofstream os{ outFile };

		os << "VM,PLATFORM,OPCODE,VALUES";
		for (auto& [vm, vmInfo] : maps) {
			const char* vmname{ utils::UpperCase(utils::CloneString(vmInfo.codeName)) };
			for (auto& [plt, lookupmap] : vmInfo.opcodemappltlookup) {
				const char* pltname{ utils::UpperCase(utils::CloneString(PlatformName(plt))) };
				LOG_INFO("Dump {}/{}", vmname, pltname);
				std::unordered_set<uint16_t> defined{};
				for (auto& [opco, opcodes] : lookupmap) {

					const char* opcodename{ OpCodeName(opco) };
					if (!opcodename) {
						LOG_ERROR("Invalid opcode : {}", (int)opco);
						opcodename = "<error>";
					}
					os << "\n" << vmname << "," << pltname << "," << opcodename << ",";

					for (size_t i = 0; i < opcodes.size(); i++) {
						if (i) os << ";";
						os << "0x" << std::hex << opcodes[i];
						defined.insert(opcodes[i]);
					}
				}
				if (defined.size() < vmInfo.maxOpCode) {
					os << "\n" << vmname << "," << pltname << ",Undefined,";
					bool def{};
					for (size_t i = 0; i <= vmInfo.maxOpCode; i++) {
						if (!defined.contains((uint16_t)i)) {
							if (def) {
								os << ";";
							}
							else {
								def = true;
							}
							os << "0x" << std::hex << i;
						}
					}
				}
			}
		}

		os.close();
		LOG_INFO("Dump into {}", outFile.string());

		return tool::OK;
	}

#ifndef CI_BUILD

	int opcodetest(Process& proc, int argc, const char* argv[]) {
		LOG_INFO("{}", utils::PtrOrElse(OpCodeName(OPCODE_End), "null"));
		return tool::OK;
	}

	ADD_TOOL("opcodetest", "dev", "", "test opcodes names lookup", nullptr, opcodetest);
#endif
	ADD_TOOL("dop", "dev", " [file=opcodes.actsop]", "dump opcodes", nullptr, dop);

}