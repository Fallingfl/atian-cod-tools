#include <includes.hpp>
#include "acti_crypto_keys.hpp"

namespace compatibility::acti::crypto_keys {

	std::vector<AesKeyLocal*>& GetKeys() {
		static std::vector<AesKeyLocal*> keys{};
		return keys;
	}

	AesKeyLocal* GetKeyByName(const char* filename) {
		for (AesKeyLocal* k : GetKeys()) {
			if (!_strcmpi(filename, k->fileName)) {
				return k;
			}
		}
		return nullptr;
	}

	REGISTER_ACTI_KEY(mp_common, 0x1, 0x2c, 0xa0, 0x5c, 0x8c, 0x0b, 0x4b, 0x16, 0xda, 0xe1, 0x19, 0x0a, 0x97, 0x64, 0xfd, 0xc6, 0x40, 0xdd, 0x8c, 0x5d, 0xb1, 0x9e, 0xe3, 0x20, 0x40, 0xe0, 0x22, 0x7c, 0x28, 0xaf, 0x93, 0x9b, 0x2c);
	REGISTER_ACTI_KEY(cp_common, 0x1, 0xd5, 0x79, 0xac, 0xf1, 0xb8, 0xaf, 0x0e, 0x7b, 0xed, 0x95, 0xef, 0x46, 0x94, 0xdc, 0xb7, 0x20, 0x7b, 0x03, 0x05, 0x88, 0xb9, 0xab, 0xa9, 0x12, 0x25, 0x3a, 0x8c, 0x25, 0x46, 0x5b, 0x50, 0x1a);
	REGISTER_ACTI_KEY(zm_common, 0x1, 0xb9, 0x59, 0x31, 0x39, 0x3c, 0x4d, 0xda, 0xf2, 0x82, 0x24, 0x7b, 0x76, 0xa6, 0x26, 0x39, 0xb4, 0x6a, 0xb2, 0xdf, 0x72, 0xca, 0x67, 0x47, 0x4a, 0x94, 0xa8, 0xb3, 0xba, 0xd6, 0x62, 0x7e, 0xe2);
	REGISTER_ACTI_KEY(mp_common_script, 0x1, 0xed, 0xee, 0x8a, 0x02, 0x6a, 0xb1, 0x08, 0xad, 0xe7, 0x37, 0x75, 0xbb, 0xd6, 0xb8, 0xd9, 0x1e, 0x97, 0x45, 0x6a, 0xa0, 0x12, 0x78, 0x12, 0x6b, 0x28, 0x95, 0xf7, 0x30, 0xb9, 0xfa, 0x4e, 0x00);
	REGISTER_ACTI_KEY(cp_common_script, 0x1, 0xa9, 0xe8, 0x1c, 0x1d, 0x3f, 0x48, 0x4f, 0xe3, 0xa3, 0x3d, 0xe0, 0x75, 0x84, 0x3f, 0x0a, 0x75, 0x0d, 0x4b, 0xcb, 0xe9, 0xa3, 0x6e, 0x47, 0x35, 0xeb, 0x9c, 0xb6, 0xa3, 0x22, 0x6b, 0x2a, 0x31);
	REGISTER_ACTI_KEY(zm_common_script, 0x1, 0x19, 0x43, 0xc6, 0xb6, 0xb3, 0x64, 0x74, 0xa0, 0xdb, 0x86, 0xff, 0x41, 0xb1, 0xe4, 0x45, 0x88, 0x15, 0xac, 0xef, 0x93, 0xea, 0xcb, 0x0b, 0xea, 0x0f, 0xb6, 0xb7, 0xa8, 0xe4, 0x59, 0x33, 0x3e);
	REGISTER_ACTI_KEY(wz_common, 0x1, 0xa9, 0x83, 0xb0, 0xdd, 0x11, 0xe9, 0x7f, 0xfe, 0x0b, 0xa0, 0xda, 0xa1, 0x6b, 0xb0, 0xfc, 0xc3, 0x49, 0x75, 0xb8, 0x9b, 0x35, 0x6b, 0xc7, 0xf5, 0x19, 0x7b, 0xf3, 0xf5, 0x14, 0xa5, 0x72, 0x97);
	REGISTER_ACTI_KEY(wz_common_script, 0x1, 0x83, 0x10, 0xd0, 0x8b, 0x91, 0xd1, 0x79, 0x0f, 0xa3, 0x55, 0xeb, 0x8c, 0xd9, 0x58, 0x9d, 0x19, 0xf6, 0x0f, 0x1b, 0xfb, 0x48, 0x86, 0xc0, 0x82, 0x1f, 0x9c, 0xde, 0x16, 0x2f, 0x84, 0x7f, 0x8d);
	REGISTER_ACTI_KEY(4k_mp_common, 0x1, 0xf2, 0x2b, 0x37, 0x58, 0xd9, 0xec, 0xdf, 0x05, 0x33, 0xfb, 0xf8, 0x8f, 0xfa, 0x02, 0xea, 0x38, 0x4e, 0xcf, 0xbd, 0x4a, 0xc4, 0x8c, 0x09, 0x42, 0xeb, 0x9e, 0x2e, 0x48, 0x25, 0x6a, 0x45, 0xf7);
	REGISTER_ACTI_KEY(4k_cp_common, 0x1, 0x35, 0xce, 0x15, 0x0d, 0xe2, 0xdb, 0x3d, 0x7f, 0xee, 0x4d, 0x51, 0x6d, 0xf1, 0xd9, 0xad, 0x37, 0x38, 0x02, 0xc6, 0xb8, 0xa6, 0x40, 0xdf, 0x19, 0x64, 0x39, 0xee, 0x84, 0x8c, 0x38, 0x4f, 0x81);
	REGISTER_ACTI_KEY(4k_zm_common, 0x1, 0x07, 0x6d, 0xff, 0x8e, 0x01, 0x88, 0x93, 0xf6, 0x4d, 0x99, 0x09, 0x12, 0x0b, 0xdf, 0x20, 0x21, 0x3a, 0x5e, 0x36, 0x8a, 0xc1, 0x90, 0xb7, 0x55, 0x17, 0xaf, 0x3e, 0x28, 0xf4, 0xa9, 0x11, 0xc2);
	REGISTER_ACTI_KEY(4k_wz_common, 0x1, 0x69, 0xdd, 0xbf, 0x42, 0xd8, 0x00, 0xfc, 0xce, 0xad, 0x31, 0x4b, 0x34, 0x81, 0x31, 0xa5, 0x14, 0xa1, 0xc0, 0x28, 0x18, 0xea, 0xaf, 0xf6, 0x83, 0xe0, 0x2e, 0xd3, 0xc1, 0x07, 0xd5, 0x00, 0x3d);
	REGISTER_ACTI_KEY(1080_mp_common, 0x1, 0x1c, 0x17, 0x3a, 0xe6, 0xa0, 0x0a, 0x0e, 0xe5, 0x7b, 0x20, 0xea, 0xa2, 0x1c, 0x62, 0xba, 0x30, 0xa8, 0x67, 0xaa, 0x04, 0x2a, 0x12, 0xe1, 0xab, 0x5c, 0x4e, 0x34, 0xa3, 0xf3, 0xc4, 0xa3, 0x9b);
	REGISTER_ACTI_KEY(1080_cp_common, 0x1, 0xd6, 0xf6, 0xea, 0x66, 0x1c, 0x6f, 0x17, 0xad, 0x86, 0x06, 0xf6, 0x34, 0xea, 0x7e, 0x91, 0x63, 0x56, 0x0a, 0x34, 0x2d, 0xeb, 0x5b, 0x0b, 0x3c, 0x12, 0x91, 0xff, 0xc9, 0x6b, 0x3b, 0xc8, 0x35);
	REGISTER_ACTI_KEY(1080_zm_common, 0x1, 0x4c, 0x90, 0x93, 0x14, 0x76, 0x54, 0xce, 0x47, 0x01, 0xe7, 0x1d, 0x29, 0x06, 0x15, 0x93, 0x21, 0xfc, 0x45, 0x9a, 0x74, 0xda, 0x3d, 0x1d, 0x42, 0x96, 0xbd, 0x29, 0x48, 0xc4, 0x82, 0x12, 0xcc);
	REGISTER_ACTI_KEY(1080_wz_common, 0x1, 0x88, 0x85, 0x7a, 0xe5, 0x22, 0x0a, 0x36, 0xf9, 0x76, 0xe2, 0x18, 0xe8, 0x7b, 0x7b, 0xbc, 0x81, 0xeb, 0x8f, 0x5d, 0xa2, 0x7c, 0xad, 0x1d, 0x7c, 0x77, 0x2e, 0xc6, 0xbb, 0x12, 0xbd, 0xd7, 0xa0);

}